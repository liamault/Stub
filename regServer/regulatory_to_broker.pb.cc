// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regulatory_to_broker.proto

#include "regulatory_to_broker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BrokerageId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
}  // namespace protobuf_common_2eproto
namespace regulatory_to_broker {
class BrokerageRuleViolationRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrokerageRuleViolationRequest>
      _instance;
} _BrokerageRuleViolationRequest_default_instance_;
class BrokerageRuleViolationResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrokerageRuleViolationResponse>
      _instance;
} _BrokerageRuleViolationResponse_default_instance_;
}  // namespace regulatory_to_broker
namespace protobuf_regulatory_5fto_5fbroker_2eproto {
static void InitDefaultsBrokerageRuleViolationRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::regulatory_to_broker::_BrokerageRuleViolationRequest_default_instance_;
    new (ptr) ::regulatory_to_broker::BrokerageRuleViolationRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::regulatory_to_broker::BrokerageRuleViolationRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BrokerageRuleViolationRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBrokerageRuleViolationRequest}, {
      &protobuf_common_2eproto::scc_info_Header.base,
      &protobuf_common_2eproto::scc_info_BrokerageId.base,}};

static void InitDefaultsBrokerageRuleViolationResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::regulatory_to_broker::_BrokerageRuleViolationResponse_default_instance_;
    new (ptr) ::regulatory_to_broker::BrokerageRuleViolationResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::regulatory_to_broker::BrokerageRuleViolationResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BrokerageRuleViolationResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBrokerageRuleViolationResponse}, {
      &protobuf_common_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BrokerageRuleViolationRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrokerageRuleViolationResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, brokerage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, block_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::regulatory_to_broker::BrokerageRuleViolationRequest)},
  { 9, -1, sizeof(::regulatory_to_broker::BrokerageRuleViolationResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::regulatory_to_broker::_BrokerageRuleViolationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::regulatory_to_broker::_BrokerageRuleViolationResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "regulatory_to_broker.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032regulatory_to_broker.proto\022\024regulatory"
      "_to_broker\032\014common.proto\"\247\001\n\035BrokerageRu"
      "leViolationRequest\022\027\n\006header\030\001 \001(\0132\007.Hea"
      "der\022\037\n\tbrokerage\030\002 \001(\0132\014.BrokerageId\022\026\n\016"
      "block_duration\030\003 \001(\r\0224\n\006reason\030\004 \001(\0162$.r"
      "egulatory_to_broker.ReasonForBlock\"o\n\036Br"
      "okerageRuleViolationResponse\022\027\n\006header\030\001"
      " \001(\0132\007.Header\0224\n\010response\030\002 \001(\0162\".regula"
      "tory_to_broker.ResponseType*\233\001\n\016ReasonFo"
      "rBlock\022\022\n\016Reason_Default\020\000\022\027\n\023ITT_Break_"
      "Good_News\020\001\022\026\n\022ITT_Break_Bad_News\020\002\022\031\n\025T"
      "rade_Block_Violation\020\003\022\023\n\017Tip_Flag_Activ"
      "e\020\004\022\024\n\020TTV_Exceeds_mTTV\020\005*.\n\014ResponseTyp"
      "e\022\013\n\007INVALID\020\000\022\006\n\002OK\020\001\022\t\n\005ERROR\020\002b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "regulatory_to_broker.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_regulatory_5fto_5fbroker_2eproto
namespace regulatory_to_broker {
const ::google::protobuf::EnumDescriptor* ReasonForBlock_descriptor() {
  protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_regulatory_5fto_5fbroker_2eproto::file_level_enum_descriptors[0];
}
bool ReasonForBlock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_regulatory_5fto_5fbroker_2eproto::file_level_enum_descriptors[1];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BrokerageRuleViolationRequest::InitAsDefaultInstance() {
  ::regulatory_to_broker::_BrokerageRuleViolationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::Header*>(
      ::Header::internal_default_instance());
  ::regulatory_to_broker::_BrokerageRuleViolationRequest_default_instance_._instance.get_mutable()->brokerage_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
void BrokerageRuleViolationRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void BrokerageRuleViolationRequest::clear_brokerage() {
  if (GetArenaNoVirtual() == NULL && brokerage_ != NULL) {
    delete brokerage_;
  }
  brokerage_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerageRuleViolationRequest::kHeaderFieldNumber;
const int BrokerageRuleViolationRequest::kBrokerageFieldNumber;
const int BrokerageRuleViolationRequest::kBlockDurationFieldNumber;
const int BrokerageRuleViolationRequest::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerageRuleViolationRequest::BrokerageRuleViolationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_regulatory_5fto_5fbroker_2eproto::scc_info_BrokerageRuleViolationRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:regulatory_to_broker.BrokerageRuleViolationRequest)
}
BrokerageRuleViolationRequest::BrokerageRuleViolationRequest(const BrokerageRuleViolationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_brokerage()) {
    brokerage_ = new ::BrokerageId(*from.brokerage_);
  } else {
    brokerage_ = NULL;
  }
  ::memcpy(&block_duration_, &from.block_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&block_duration_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:regulatory_to_broker.BrokerageRuleViolationRequest)
}

void BrokerageRuleViolationRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&header_)) + sizeof(reason_));
}

BrokerageRuleViolationRequest::~BrokerageRuleViolationRequest() {
  // @@protoc_insertion_point(destructor:regulatory_to_broker.BrokerageRuleViolationRequest)
  SharedDtor();
}

void BrokerageRuleViolationRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete brokerage_;
}

void BrokerageRuleViolationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BrokerageRuleViolationRequest::descriptor() {
  ::protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_regulatory_5fto_5fbroker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrokerageRuleViolationRequest& BrokerageRuleViolationRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_regulatory_5fto_5fbroker_2eproto::scc_info_BrokerageRuleViolationRequest.base);
  return *internal_default_instance();
}


void BrokerageRuleViolationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && brokerage_ != NULL) {
    delete brokerage_;
  }
  brokerage_ = NULL;
  ::memset(&block_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&block_duration_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool BrokerageRuleViolationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BrokerageId brokerage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 block_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .regulatory_to_broker.ReasonForBlock reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::regulatory_to_broker::ReasonForBlock >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:regulatory_to_broker.BrokerageRuleViolationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:regulatory_to_broker.BrokerageRuleViolationRequest)
  return false;
#undef DO_
}

void BrokerageRuleViolationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .BrokerageId brokerage = 2;
  if (this->has_brokerage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_brokerage(), output);
  }

  // uint32 block_duration = 3;
  if (this->block_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->block_duration(), output);
  }

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:regulatory_to_broker.BrokerageRuleViolationRequest)
}

::google::protobuf::uint8* BrokerageRuleViolationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .BrokerageId brokerage = 2;
  if (this->has_brokerage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_brokerage(), deterministic, target);
  }

  // uint32 block_duration = 3;
  if (this->block_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->block_duration(), target);
  }

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatory_to_broker.BrokerageRuleViolationRequest)
  return target;
}

size_t BrokerageRuleViolationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .BrokerageId brokerage = 2;
  if (this->has_brokerage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_);
  }

  // uint32 block_duration = 3;
  if (this->block_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_duration());
  }

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrokerageRuleViolationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerageRuleViolationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerageRuleViolationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:regulatory_to_broker.BrokerageRuleViolationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:regulatory_to_broker.BrokerageRuleViolationRequest)
    MergeFrom(*source);
  }
}

void BrokerageRuleViolationRequest::MergeFrom(const BrokerageRuleViolationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Header::MergeFrom(from.header());
  }
  if (from.has_brokerage()) {
    mutable_brokerage()->::BrokerageId::MergeFrom(from.brokerage());
  }
  if (from.block_duration() != 0) {
    set_block_duration(from.block_duration());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void BrokerageRuleViolationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerageRuleViolationRequest::CopyFrom(const BrokerageRuleViolationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageRuleViolationRequest::IsInitialized() const {
  return true;
}

void BrokerageRuleViolationRequest::Swap(BrokerageRuleViolationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerageRuleViolationRequest::InternalSwap(BrokerageRuleViolationRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(brokerage_, other->brokerage_);
  swap(block_duration_, other->block_duration_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BrokerageRuleViolationRequest::GetMetadata() const {
  protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_regulatory_5fto_5fbroker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BrokerageRuleViolationResponse::InitAsDefaultInstance() {
  ::regulatory_to_broker::_BrokerageRuleViolationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::Header*>(
      ::Header::internal_default_instance());
}
void BrokerageRuleViolationResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerageRuleViolationResponse::kHeaderFieldNumber;
const int BrokerageRuleViolationResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerageRuleViolationResponse::BrokerageRuleViolationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_regulatory_5fto_5fbroker_2eproto::scc_info_BrokerageRuleViolationResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:regulatory_to_broker.BrokerageRuleViolationResponse)
}
BrokerageRuleViolationResponse::BrokerageRuleViolationResponse(const BrokerageRuleViolationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:regulatory_to_broker.BrokerageRuleViolationResponse)
}

void BrokerageRuleViolationResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&header_)) + sizeof(response_));
}

BrokerageRuleViolationResponse::~BrokerageRuleViolationResponse() {
  // @@protoc_insertion_point(destructor:regulatory_to_broker.BrokerageRuleViolationResponse)
  SharedDtor();
}

void BrokerageRuleViolationResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BrokerageRuleViolationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BrokerageRuleViolationResponse::descriptor() {
  ::protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_regulatory_5fto_5fbroker_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrokerageRuleViolationResponse& BrokerageRuleViolationResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_regulatory_5fto_5fbroker_2eproto::scc_info_BrokerageRuleViolationResponse.base);
  return *internal_default_instance();
}


void BrokerageRuleViolationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  response_ = 0;
  _internal_metadata_.Clear();
}

bool BrokerageRuleViolationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .regulatory_to_broker.ResponseType response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::regulatory_to_broker::ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:regulatory_to_broker.BrokerageRuleViolationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:regulatory_to_broker.BrokerageRuleViolationResponse)
  return false;
#undef DO_
}

void BrokerageRuleViolationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .regulatory_to_broker.ResponseType response = 2;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:regulatory_to_broker.BrokerageRuleViolationResponse)
}

::google::protobuf::uint8* BrokerageRuleViolationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .regulatory_to_broker.ResponseType response = 2;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatory_to_broker.BrokerageRuleViolationResponse)
  return target;
}

size_t BrokerageRuleViolationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .regulatory_to_broker.ResponseType response = 2;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrokerageRuleViolationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerageRuleViolationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerageRuleViolationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:regulatory_to_broker.BrokerageRuleViolationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:regulatory_to_broker.BrokerageRuleViolationResponse)
    MergeFrom(*source);
  }
}

void BrokerageRuleViolationResponse::MergeFrom(const BrokerageRuleViolationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Header::MergeFrom(from.header());
  }
  if (from.response() != 0) {
    set_response(from.response());
  }
}

void BrokerageRuleViolationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerageRuleViolationResponse::CopyFrom(const BrokerageRuleViolationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageRuleViolationResponse::IsInitialized() const {
  return true;
}

void BrokerageRuleViolationResponse::Swap(BrokerageRuleViolationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerageRuleViolationResponse::InternalSwap(BrokerageRuleViolationResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BrokerageRuleViolationResponse::GetMetadata() const {
  protobuf_regulatory_5fto_5fbroker_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_regulatory_5fto_5fbroker_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace regulatory_to_broker
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::regulatory_to_broker::BrokerageRuleViolationRequest* Arena::CreateMaybeMessage< ::regulatory_to_broker::BrokerageRuleViolationRequest >(Arena* arena) {
  return Arena::CreateInternal< ::regulatory_to_broker::BrokerageRuleViolationRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::regulatory_to_broker::BrokerageRuleViolationResponse* Arena::CreateMaybeMessage< ::regulatory_to_broker::BrokerageRuleViolationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::regulatory_to_broker::BrokerageRuleViolationResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
