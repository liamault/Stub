// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regulatory_to_broker.proto

#include "regulatory_to_broker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace regulatory_to_broker {
PROTOBUF_CONSTEXPR BrokerageRuleViolationRequest::BrokerageRuleViolationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.brokerage_)*/nullptr
  , /*decltype(_impl_.block_duration_)*/0u
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrokerageRuleViolationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerageRuleViolationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerageRuleViolationRequestDefaultTypeInternal() {}
  union {
    BrokerageRuleViolationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerageRuleViolationRequestDefaultTypeInternal _BrokerageRuleViolationRequest_default_instance_;
PROTOBUF_CONSTEXPR BrokerageRuleViolationResponse::BrokerageRuleViolationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrokerageRuleViolationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerageRuleViolationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerageRuleViolationResponseDefaultTypeInternal() {}
  union {
    BrokerageRuleViolationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerageRuleViolationResponseDefaultTypeInternal _BrokerageRuleViolationResponse_default_instance_;
}  // namespace regulatory_to_broker
static ::_pb::Metadata file_level_metadata_regulatory_5fto_5fbroker_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_regulatory_5fto_5fbroker_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_regulatory_5fto_5fbroker_2eproto = nullptr;

const uint32_t TableStruct_regulatory_5fto_5fbroker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _impl_.brokerage_),
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _impl_.block_duration_),
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationRequest, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::regulatory_to_broker::BrokerageRuleViolationResponse, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::regulatory_to_broker::BrokerageRuleViolationRequest)},
  { 10, -1, -1, sizeof(::regulatory_to_broker::BrokerageRuleViolationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::regulatory_to_broker::_BrokerageRuleViolationRequest_default_instance_._instance,
  &::regulatory_to_broker::_BrokerageRuleViolationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_regulatory_5fto_5fbroker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032regulatory_to_broker.proto\022\024regulatory"
  "_to_broker\032\014common.proto\"\247\001\n\035BrokerageRu"
  "leViolationRequest\022\027\n\006header\030\001 \001(\0132\007.Hea"
  "der\022\037\n\tbrokerage\030\002 \001(\0132\014.BrokerageId\022\026\n\016"
  "block_duration\030\003 \001(\r\0224\n\006reason\030\004 \001(\0162$.r"
  "egulatory_to_broker.ReasonForBlock\"o\n\036Br"
  "okerageRuleViolationResponse\022\027\n\006header\030\001"
  " \001(\0132\007.Header\0224\n\010response\030\002 \001(\0162\".regula"
  "tory_to_broker.ResponseType*\233\001\n\016ReasonFo"
  "rBlock\022\022\n\016Reason_Default\020\000\022\027\n\023ITT_Break_"
  "Good_News\020\001\022\026\n\022ITT_Break_Bad_News\020\002\022\031\n\025T"
  "rade_Block_Violation\020\003\022\023\n\017Tip_Flag_Activ"
  "e\020\004\022\024\n\020TTV_Exceeds_mTTV\020\005*.\n\014ResponseTyp"
  "e\022\013\n\007INVALID\020\000\022\006\n\002OK\020\001\022\t\n\005ERROR\020\002b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_regulatory_5fto_5fbroker_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_regulatory_5fto_5fbroker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_regulatory_5fto_5fbroker_2eproto = {
    false, false, 561, descriptor_table_protodef_regulatory_5fto_5fbroker_2eproto,
    "regulatory_to_broker.proto",
    &descriptor_table_regulatory_5fto_5fbroker_2eproto_once, descriptor_table_regulatory_5fto_5fbroker_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_regulatory_5fto_5fbroker_2eproto::offsets,
    file_level_metadata_regulatory_5fto_5fbroker_2eproto, file_level_enum_descriptors_regulatory_5fto_5fbroker_2eproto,
    file_level_service_descriptors_regulatory_5fto_5fbroker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_regulatory_5fto_5fbroker_2eproto_getter() {
  return &descriptor_table_regulatory_5fto_5fbroker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_regulatory_5fto_5fbroker_2eproto(&descriptor_table_regulatory_5fto_5fbroker_2eproto);
namespace regulatory_to_broker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReasonForBlock_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_regulatory_5fto_5fbroker_2eproto);
  return file_level_enum_descriptors_regulatory_5fto_5fbroker_2eproto[0];
}
bool ReasonForBlock_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_regulatory_5fto_5fbroker_2eproto);
  return file_level_enum_descriptors_regulatory_5fto_5fbroker_2eproto[1];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BrokerageRuleViolationRequest::_Internal {
 public:
  static const ::Header& header(const BrokerageRuleViolationRequest* msg);
  static const ::BrokerageId& brokerage(const BrokerageRuleViolationRequest* msg);
};

const ::Header&
BrokerageRuleViolationRequest::_Internal::header(const BrokerageRuleViolationRequest* msg) {
  return *msg->_impl_.header_;
}
const ::BrokerageId&
BrokerageRuleViolationRequest::_Internal::brokerage(const BrokerageRuleViolationRequest* msg) {
  return *msg->_impl_.brokerage_;
}
void BrokerageRuleViolationRequest::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void BrokerageRuleViolationRequest::clear_brokerage() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_ != nullptr) {
    delete _impl_.brokerage_;
  }
  _impl_.brokerage_ = nullptr;
}
BrokerageRuleViolationRequest::BrokerageRuleViolationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:regulatory_to_broker.BrokerageRuleViolationRequest)
}
BrokerageRuleViolationRequest::BrokerageRuleViolationRequest(const BrokerageRuleViolationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerageRuleViolationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.brokerage_){nullptr}
    , decltype(_impl_.block_duration_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Header(*from._impl_.header_);
  }
  if (from._internal_has_brokerage()) {
    _this->_impl_.brokerage_ = new ::BrokerageId(*from._impl_.brokerage_);
  }
  ::memcpy(&_impl_.block_duration_, &from._impl_.block_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.block_duration_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:regulatory_to_broker.BrokerageRuleViolationRequest)
}

inline void BrokerageRuleViolationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.brokerage_){nullptr}
    , decltype(_impl_.block_duration_){0u}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BrokerageRuleViolationRequest::~BrokerageRuleViolationRequest() {
  // @@protoc_insertion_point(destructor:regulatory_to_broker.BrokerageRuleViolationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerageRuleViolationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.brokerage_;
}

void BrokerageRuleViolationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerageRuleViolationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_ != nullptr) {
    delete _impl_.brokerage_;
  }
  _impl_.brokerage_ = nullptr;
  ::memset(&_impl_.block_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.block_duration_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerageRuleViolationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BrokerageId brokerage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 block_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.block_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .regulatory_to_broker.ReasonForBlock reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::regulatory_to_broker::ReasonForBlock>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerageRuleViolationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .BrokerageId brokerage = 2;
  if (this->_internal_has_brokerage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::brokerage(this),
        _Internal::brokerage(this).GetCachedSize(), target, stream);
  }

  // uint32 block_duration = 3;
  if (this->_internal_block_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_block_duration(), target);
  }

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatory_to_broker.BrokerageRuleViolationRequest)
  return target;
}

size_t BrokerageRuleViolationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .BrokerageId brokerage = 2;
  if (this->_internal_has_brokerage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_);
  }

  // uint32 block_duration = 3;
  if (this->_internal_block_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_block_duration());
  }

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerageRuleViolationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerageRuleViolationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerageRuleViolationRequest::GetClassData() const { return &_class_data_; }


void BrokerageRuleViolationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerageRuleViolationRequest*>(&to_msg);
  auto& from = static_cast<const BrokerageRuleViolationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_brokerage()) {
    _this->_internal_mutable_brokerage()->::BrokerageId::MergeFrom(
        from._internal_brokerage());
  }
  if (from._internal_block_duration() != 0) {
    _this->_internal_set_block_duration(from._internal_block_duration());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerageRuleViolationRequest::CopyFrom(const BrokerageRuleViolationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatory_to_broker.BrokerageRuleViolationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageRuleViolationRequest::IsInitialized() const {
  return true;
}

void BrokerageRuleViolationRequest::InternalSwap(BrokerageRuleViolationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerageRuleViolationRequest, _impl_.reason_)
      + sizeof(BrokerageRuleViolationRequest::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(BrokerageRuleViolationRequest, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerageRuleViolationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatory_5fto_5fbroker_2eproto_getter, &descriptor_table_regulatory_5fto_5fbroker_2eproto_once,
      file_level_metadata_regulatory_5fto_5fbroker_2eproto[0]);
}

// ===================================================================

class BrokerageRuleViolationResponse::_Internal {
 public:
  static const ::Header& header(const BrokerageRuleViolationResponse* msg);
};

const ::Header&
BrokerageRuleViolationResponse::_Internal::header(const BrokerageRuleViolationResponse* msg) {
  return *msg->_impl_.header_;
}
void BrokerageRuleViolationResponse::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
BrokerageRuleViolationResponse::BrokerageRuleViolationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:regulatory_to_broker.BrokerageRuleViolationResponse)
}
BrokerageRuleViolationResponse::BrokerageRuleViolationResponse(const BrokerageRuleViolationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerageRuleViolationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Header(*from._impl_.header_);
  }
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:regulatory_to_broker.BrokerageRuleViolationResponse)
}

inline void BrokerageRuleViolationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.response_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BrokerageRuleViolationResponse::~BrokerageRuleViolationResponse() {
  // @@protoc_insertion_point(destructor:regulatory_to_broker.BrokerageRuleViolationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerageRuleViolationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void BrokerageRuleViolationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerageRuleViolationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _impl_.response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerageRuleViolationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .regulatory_to_broker.ResponseType response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::regulatory_to_broker::ResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerageRuleViolationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .regulatory_to_broker.ResponseType response = 2;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regulatory_to_broker.BrokerageRuleViolationResponse)
  return target;
}

size_t BrokerageRuleViolationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .regulatory_to_broker.ResponseType response = 2;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerageRuleViolationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerageRuleViolationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerageRuleViolationResponse::GetClassData() const { return &_class_data_; }


void BrokerageRuleViolationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerageRuleViolationResponse*>(&to_msg);
  auto& from = static_cast<const BrokerageRuleViolationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_response() != 0) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerageRuleViolationResponse::CopyFrom(const BrokerageRuleViolationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regulatory_to_broker.BrokerageRuleViolationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageRuleViolationResponse::IsInitialized() const {
  return true;
}

void BrokerageRuleViolationResponse::InternalSwap(BrokerageRuleViolationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerageRuleViolationResponse, _impl_.response_)
      + sizeof(BrokerageRuleViolationResponse::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(BrokerageRuleViolationResponse, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerageRuleViolationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_regulatory_5fto_5fbroker_2eproto_getter, &descriptor_table_regulatory_5fto_5fbroker_2eproto_once,
      file_level_metadata_regulatory_5fto_5fbroker_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace regulatory_to_broker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::regulatory_to_broker::BrokerageRuleViolationRequest*
Arena::CreateMaybeMessage< ::regulatory_to_broker::BrokerageRuleViolationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatory_to_broker::BrokerageRuleViolationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::regulatory_to_broker::BrokerageRuleViolationResponse*
Arena::CreateMaybeMessage< ::regulatory_to_broker::BrokerageRuleViolationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regulatory_to_broker::BrokerageRuleViolationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
