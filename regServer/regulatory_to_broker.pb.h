// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regulatory_to_broker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_regulatory_5fto_5fbroker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_regulatory_5fto_5fbroker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_regulatory_5fto_5fbroker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_regulatory_5fto_5fbroker_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_regulatory_5fto_5fbroker_2eproto;
namespace regulatory_to_broker {
class BrokerageRuleViolationRequest;
struct BrokerageRuleViolationRequestDefaultTypeInternal;
extern BrokerageRuleViolationRequestDefaultTypeInternal _BrokerageRuleViolationRequest_default_instance_;
class BrokerageRuleViolationResponse;
struct BrokerageRuleViolationResponseDefaultTypeInternal;
extern BrokerageRuleViolationResponseDefaultTypeInternal _BrokerageRuleViolationResponse_default_instance_;
}  // namespace regulatory_to_broker
PROTOBUF_NAMESPACE_OPEN
template<> ::regulatory_to_broker::BrokerageRuleViolationRequest* Arena::CreateMaybeMessage<::regulatory_to_broker::BrokerageRuleViolationRequest>(Arena*);
template<> ::regulatory_to_broker::BrokerageRuleViolationResponse* Arena::CreateMaybeMessage<::regulatory_to_broker::BrokerageRuleViolationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace regulatory_to_broker {

enum ReasonForBlock : int {
  Reason_Default = 0,
  ITT_Break_Good_News = 1,
  ITT_Break_Bad_News = 2,
  Trade_Block_Violation = 3,
  Tip_Flag_Active = 4,
  TTV_Exceeds_mTTV = 5,
  ReasonForBlock_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ReasonForBlock_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ReasonForBlock_IsValid(int value);
constexpr ReasonForBlock ReasonForBlock_MIN = Reason_Default;
constexpr ReasonForBlock ReasonForBlock_MAX = TTV_Exceeds_mTTV;
constexpr int ReasonForBlock_ARRAYSIZE = ReasonForBlock_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReasonForBlock_descriptor();
template<typename T>
inline const std::string& ReasonForBlock_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReasonForBlock>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReasonForBlock_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReasonForBlock_descriptor(), enum_t_value);
}
inline bool ReasonForBlock_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReasonForBlock* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReasonForBlock>(
    ReasonForBlock_descriptor(), name, value);
}
enum ResponseType : int {
  INVALID = 0,
  OK = 1,
  ERROR = 2,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = INVALID;
constexpr ResponseType ResponseType_MAX = ERROR;
constexpr int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseType_descriptor();
template<typename T>
inline const std::string& ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseType_descriptor(), enum_t_value);
}
inline bool ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class BrokerageRuleViolationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:regulatory_to_broker.BrokerageRuleViolationRequest) */ {
 public:
  inline BrokerageRuleViolationRequest() : BrokerageRuleViolationRequest(nullptr) {}
  ~BrokerageRuleViolationRequest() override;
  explicit PROTOBUF_CONSTEXPR BrokerageRuleViolationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerageRuleViolationRequest(const BrokerageRuleViolationRequest& from);
  BrokerageRuleViolationRequest(BrokerageRuleViolationRequest&& from) noexcept
    : BrokerageRuleViolationRequest() {
    *this = ::std::move(from);
  }

  inline BrokerageRuleViolationRequest& operator=(const BrokerageRuleViolationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerageRuleViolationRequest& operator=(BrokerageRuleViolationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerageRuleViolationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerageRuleViolationRequest* internal_default_instance() {
    return reinterpret_cast<const BrokerageRuleViolationRequest*>(
               &_BrokerageRuleViolationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrokerageRuleViolationRequest& a, BrokerageRuleViolationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerageRuleViolationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerageRuleViolationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerageRuleViolationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerageRuleViolationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerageRuleViolationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerageRuleViolationRequest& from) {
    BrokerageRuleViolationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerageRuleViolationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "regulatory_to_broker.BrokerageRuleViolationRequest";
  }
  protected:
  explicit BrokerageRuleViolationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBrokerageFieldNumber = 2,
    kBlockDurationFieldNumber = 3,
    kReasonFieldNumber = 4,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .BrokerageId brokerage = 2;
  bool has_brokerage() const;
  private:
  bool _internal_has_brokerage() const;
  public:
  void clear_brokerage();
  const ::BrokerageId& brokerage() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage();
  ::BrokerageId* mutable_brokerage();
  void set_allocated_brokerage(::BrokerageId* brokerage);
  private:
  const ::BrokerageId& _internal_brokerage() const;
  ::BrokerageId* _internal_mutable_brokerage();
  public:
  void unsafe_arena_set_allocated_brokerage(
      ::BrokerageId* brokerage);
  ::BrokerageId* unsafe_arena_release_brokerage();

  // uint32 block_duration = 3;
  void clear_block_duration();
  uint32_t block_duration() const;
  void set_block_duration(uint32_t value);
  private:
  uint32_t _internal_block_duration() const;
  void _internal_set_block_duration(uint32_t value);
  public:

  // .regulatory_to_broker.ReasonForBlock reason = 4;
  void clear_reason();
  ::regulatory_to_broker::ReasonForBlock reason() const;
  void set_reason(::regulatory_to_broker::ReasonForBlock value);
  private:
  ::regulatory_to_broker::ReasonForBlock _internal_reason() const;
  void _internal_set_reason(::regulatory_to_broker::ReasonForBlock value);
  public:

  // @@protoc_insertion_point(class_scope:regulatory_to_broker.BrokerageRuleViolationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    ::BrokerageId* brokerage_;
    uint32_t block_duration_;
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_regulatory_5fto_5fbroker_2eproto;
};
// -------------------------------------------------------------------

class BrokerageRuleViolationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:regulatory_to_broker.BrokerageRuleViolationResponse) */ {
 public:
  inline BrokerageRuleViolationResponse() : BrokerageRuleViolationResponse(nullptr) {}
  ~BrokerageRuleViolationResponse() override;
  explicit PROTOBUF_CONSTEXPR BrokerageRuleViolationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerageRuleViolationResponse(const BrokerageRuleViolationResponse& from);
  BrokerageRuleViolationResponse(BrokerageRuleViolationResponse&& from) noexcept
    : BrokerageRuleViolationResponse() {
    *this = ::std::move(from);
  }

  inline BrokerageRuleViolationResponse& operator=(const BrokerageRuleViolationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerageRuleViolationResponse& operator=(BrokerageRuleViolationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerageRuleViolationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerageRuleViolationResponse* internal_default_instance() {
    return reinterpret_cast<const BrokerageRuleViolationResponse*>(
               &_BrokerageRuleViolationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrokerageRuleViolationResponse& a, BrokerageRuleViolationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerageRuleViolationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerageRuleViolationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerageRuleViolationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerageRuleViolationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerageRuleViolationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerageRuleViolationResponse& from) {
    BrokerageRuleViolationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerageRuleViolationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "regulatory_to_broker.BrokerageRuleViolationResponse";
  }
  protected:
  explicit BrokerageRuleViolationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .regulatory_to_broker.ResponseType response = 2;
  void clear_response();
  ::regulatory_to_broker::ResponseType response() const;
  void set_response(::regulatory_to_broker::ResponseType value);
  private:
  ::regulatory_to_broker::ResponseType _internal_response() const;
  void _internal_set_response(::regulatory_to_broker::ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:regulatory_to_broker.BrokerageRuleViolationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    int response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_regulatory_5fto_5fbroker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrokerageRuleViolationRequest

// .Header header = 1;
inline bool BrokerageRuleViolationRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool BrokerageRuleViolationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::Header& BrokerageRuleViolationRequest::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& BrokerageRuleViolationRequest::header() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationRequest.header)
  return _internal_header();
}
inline void BrokerageRuleViolationRequest::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:regulatory_to_broker.BrokerageRuleViolationRequest.header)
}
inline ::Header* BrokerageRuleViolationRequest::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* BrokerageRuleViolationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:regulatory_to_broker.BrokerageRuleViolationRequest.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* BrokerageRuleViolationRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* BrokerageRuleViolationRequest::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:regulatory_to_broker.BrokerageRuleViolationRequest.header)
  return _msg;
}
inline void BrokerageRuleViolationRequest::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:regulatory_to_broker.BrokerageRuleViolationRequest.header)
}

// .BrokerageId brokerage = 2;
inline bool BrokerageRuleViolationRequest::_internal_has_brokerage() const {
  return this != internal_default_instance() && _impl_.brokerage_ != nullptr;
}
inline bool BrokerageRuleViolationRequest::has_brokerage() const {
  return _internal_has_brokerage();
}
inline const ::BrokerageId& BrokerageRuleViolationRequest::_internal_brokerage() const {
  const ::BrokerageId* p = _impl_.brokerage_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& BrokerageRuleViolationRequest::brokerage() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationRequest.brokerage)
  return _internal_brokerage();
}
inline void BrokerageRuleViolationRequest::unsafe_arena_set_allocated_brokerage(
    ::BrokerageId* brokerage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_);
  }
  _impl_.brokerage_ = brokerage;
  if (brokerage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:regulatory_to_broker.BrokerageRuleViolationRequest.brokerage)
}
inline ::BrokerageId* BrokerageRuleViolationRequest::release_brokerage() {
  
  ::BrokerageId* temp = _impl_.brokerage_;
  _impl_.brokerage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* BrokerageRuleViolationRequest::unsafe_arena_release_brokerage() {
  // @@protoc_insertion_point(field_release:regulatory_to_broker.BrokerageRuleViolationRequest.brokerage)
  
  ::BrokerageId* temp = _impl_.brokerage_;
  _impl_.brokerage_ = nullptr;
  return temp;
}
inline ::BrokerageId* BrokerageRuleViolationRequest::_internal_mutable_brokerage() {
  
  if (_impl_.brokerage_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_ = p;
  }
  return _impl_.brokerage_;
}
inline ::BrokerageId* BrokerageRuleViolationRequest::mutable_brokerage() {
  ::BrokerageId* _msg = _internal_mutable_brokerage();
  // @@protoc_insertion_point(field_mutable:regulatory_to_broker.BrokerageRuleViolationRequest.brokerage)
  return _msg;
}
inline void BrokerageRuleViolationRequest::set_allocated_brokerage(::BrokerageId* brokerage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_);
  }
  if (brokerage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage));
    if (message_arena != submessage_arena) {
      brokerage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_ = brokerage;
  // @@protoc_insertion_point(field_set_allocated:regulatory_to_broker.BrokerageRuleViolationRequest.brokerage)
}

// uint32 block_duration = 3;
inline void BrokerageRuleViolationRequest::clear_block_duration() {
  _impl_.block_duration_ = 0u;
}
inline uint32_t BrokerageRuleViolationRequest::_internal_block_duration() const {
  return _impl_.block_duration_;
}
inline uint32_t BrokerageRuleViolationRequest::block_duration() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationRequest.block_duration)
  return _internal_block_duration();
}
inline void BrokerageRuleViolationRequest::_internal_set_block_duration(uint32_t value) {
  
  _impl_.block_duration_ = value;
}
inline void BrokerageRuleViolationRequest::set_block_duration(uint32_t value) {
  _internal_set_block_duration(value);
  // @@protoc_insertion_point(field_set:regulatory_to_broker.BrokerageRuleViolationRequest.block_duration)
}

// .regulatory_to_broker.ReasonForBlock reason = 4;
inline void BrokerageRuleViolationRequest::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::regulatory_to_broker::ReasonForBlock BrokerageRuleViolationRequest::_internal_reason() const {
  return static_cast< ::regulatory_to_broker::ReasonForBlock >(_impl_.reason_);
}
inline ::regulatory_to_broker::ReasonForBlock BrokerageRuleViolationRequest::reason() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationRequest.reason)
  return _internal_reason();
}
inline void BrokerageRuleViolationRequest::_internal_set_reason(::regulatory_to_broker::ReasonForBlock value) {
  
  _impl_.reason_ = value;
}
inline void BrokerageRuleViolationRequest::set_reason(::regulatory_to_broker::ReasonForBlock value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:regulatory_to_broker.BrokerageRuleViolationRequest.reason)
}

// -------------------------------------------------------------------

// BrokerageRuleViolationResponse

// .Header header = 1;
inline bool BrokerageRuleViolationResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool BrokerageRuleViolationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::Header& BrokerageRuleViolationResponse::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& BrokerageRuleViolationResponse::header() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationResponse.header)
  return _internal_header();
}
inline void BrokerageRuleViolationResponse::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:regulatory_to_broker.BrokerageRuleViolationResponse.header)
}
inline ::Header* BrokerageRuleViolationResponse::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* BrokerageRuleViolationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:regulatory_to_broker.BrokerageRuleViolationResponse.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* BrokerageRuleViolationResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* BrokerageRuleViolationResponse::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:regulatory_to_broker.BrokerageRuleViolationResponse.header)
  return _msg;
}
inline void BrokerageRuleViolationResponse::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:regulatory_to_broker.BrokerageRuleViolationResponse.header)
}

// .regulatory_to_broker.ResponseType response = 2;
inline void BrokerageRuleViolationResponse::clear_response() {
  _impl_.response_ = 0;
}
inline ::regulatory_to_broker::ResponseType BrokerageRuleViolationResponse::_internal_response() const {
  return static_cast< ::regulatory_to_broker::ResponseType >(_impl_.response_);
}
inline ::regulatory_to_broker::ResponseType BrokerageRuleViolationResponse::response() const {
  // @@protoc_insertion_point(field_get:regulatory_to_broker.BrokerageRuleViolationResponse.response)
  return _internal_response();
}
inline void BrokerageRuleViolationResponse::_internal_set_response(::regulatory_to_broker::ResponseType value) {
  
  _impl_.response_ = value;
}
inline void BrokerageRuleViolationResponse::set_response(::regulatory_to_broker::ResponseType value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:regulatory_to_broker.BrokerageRuleViolationResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace regulatory_to_broker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::regulatory_to_broker::ReasonForBlock> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::regulatory_to_broker::ReasonForBlock>() {
  return ::regulatory_to_broker::ReasonForBlock_descriptor();
}
template <> struct is_proto_enum< ::regulatory_to_broker::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::regulatory_to_broker::ResponseType>() {
  return ::regulatory_to_broker::ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_regulatory_5fto_5fbroker_2eproto
