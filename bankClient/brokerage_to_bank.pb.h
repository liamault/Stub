// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brokerage_to_bank.proto

#ifndef PROTOBUF_INCLUDED_brokerage_5fto_5fbank_2eproto
#define PROTOBUF_INCLUDED_brokerage_5fto_5fbank_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brokerage_5fto_5fbank_2eproto 

namespace protobuf_brokerage_5fto_5fbank_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brokerage_5fto_5fbank_2eproto
namespace brokerage_to_bank {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Deposit;
class DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class UpdateAccount;
class UpdateAccountDefaultTypeInternal;
extern UpdateAccountDefaultTypeInternal _UpdateAccount_default_instance_;
class Withdraw;
class WithdrawDefaultTypeInternal;
extern WithdrawDefaultTypeInternal _Withdraw_default_instance_;
}  // namespace brokerage_to_bank
namespace google {
namespace protobuf {
template<> ::brokerage_to_bank::Ack* Arena::CreateMaybeMessage<::brokerage_to_bank::Ack>(Arena*);
template<> ::brokerage_to_bank::Deposit* Arena::CreateMaybeMessage<::brokerage_to_bank::Deposit>(Arena*);
template<> ::brokerage_to_bank::UpdateAccount* Arena::CreateMaybeMessage<::brokerage_to_bank::UpdateAccount>(Arena*);
template<> ::brokerage_to_bank::Withdraw* Arena::CreateMaybeMessage<::brokerage_to_bank::Withdraw>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace brokerage_to_bank {

enum Ack_ResponseType {
  Ack_ResponseType_INVALID = 0,
  Ack_ResponseType_MALFORMED_MESSAGE = 1,
  Ack_ResponseType_INVALID_TRANSACTION_ID = 2,
  Ack_ResponseType_INVALID_BROKERAGE_ID = 3,
  Ack_ResponseType_SUCCESS = 4,
  Ack_ResponseType_Ack_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ack_ResponseType_Ack_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ack_ResponseType_IsValid(int value);
const Ack_ResponseType Ack_ResponseType_ResponseType_MIN = Ack_ResponseType_INVALID;
const Ack_ResponseType Ack_ResponseType_ResponseType_MAX = Ack_ResponseType_SUCCESS;
const int Ack_ResponseType_ResponseType_ARRAYSIZE = Ack_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ack_ResponseType_descriptor();
inline const ::std::string& Ack_ResponseType_Name(Ack_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ack_ResponseType_descriptor(), value);
}
inline bool Ack_ResponseType_Parse(
    const ::std::string& name, Ack_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ack_ResponseType>(
    Ack_ResponseType_descriptor(), name, value);
}
// ===================================================================

class Withdraw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brokerage_to_bank.Withdraw) */ {
 public:
  Withdraw();
  virtual ~Withdraw();

  Withdraw(const Withdraw& from);

  inline Withdraw& operator=(const Withdraw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Withdraw(Withdraw&& from) noexcept
    : Withdraw() {
    *this = ::std::move(from);
  }

  inline Withdraw& operator=(Withdraw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Withdraw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Withdraw* internal_default_instance() {
    return reinterpret_cast<const Withdraw*>(
               &_Withdraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Withdraw* other);
  friend void swap(Withdraw& a, Withdraw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Withdraw* New() const final {
    return CreateMaybeMessage<Withdraw>(NULL);
  }

  Withdraw* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Withdraw>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Withdraw& from);
  void MergeFrom(const Withdraw& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdraw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 1;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // .Price price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  private:
  const ::Price& _internal_price() const;
  public:
  const ::Price& price() const;
  ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);

  // @@protoc_insertion_point(class_scope:brokerage_to_bank.Withdraw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BrokerageId* brokerage_id_;
  ::Price* price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_brokerage_5fto_5fbank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Deposit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brokerage_to_bank.Deposit) */ {
 public:
  Deposit();
  virtual ~Deposit();

  Deposit(const Deposit& from);

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(Deposit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Deposit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Deposit* other);
  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Deposit* New() const final {
    return CreateMaybeMessage<Deposit>(NULL);
  }

  Deposit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Deposit& from);
  void MergeFrom(const Deposit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 1;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // .Price price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  private:
  const ::Price& _internal_price() const;
  public:
  const ::Price& price() const;
  ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);

  // @@protoc_insertion_point(class_scope:brokerage_to_bank.Deposit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BrokerageId* brokerage_id_;
  ::Price* price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_brokerage_5fto_5fbank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brokerage_to_bank.UpdateAccount) */ {
 public:
  UpdateAccount();
  virtual ~UpdateAccount();

  UpdateAccount(const UpdateAccount& from);

  inline UpdateAccount& operator=(const UpdateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateAccount(UpdateAccount&& from) noexcept
    : UpdateAccount() {
    *this = ::std::move(from);
  }

  inline UpdateAccount& operator=(UpdateAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAccount& default_instance();

  enum PayloadCase {
    kWithdraw = 2,
    kDeposit = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAccount* internal_default_instance() {
    return reinterpret_cast<const UpdateAccount*>(
               &_UpdateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UpdateAccount* other);
  friend void swap(UpdateAccount& a, UpdateAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateAccount* New() const final {
    return CreateMaybeMessage<UpdateAccount>(NULL);
  }

  UpdateAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateAccount& from);
  void MergeFrom(const UpdateAccount& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Header& _internal_header() const;
  public:
  const ::Header& header() const;
  ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);

  // .brokerage_to_bank.Withdraw withdraw = 2;
  bool has_withdraw() const;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 2;
  private:
  const ::brokerage_to_bank::Withdraw& _internal_withdraw() const;
  public:
  const ::brokerage_to_bank::Withdraw& withdraw() const;
  ::brokerage_to_bank::Withdraw* release_withdraw();
  ::brokerage_to_bank::Withdraw* mutable_withdraw();
  void set_allocated_withdraw(::brokerage_to_bank::Withdraw* withdraw);

  // .brokerage_to_bank.Deposit deposit = 3;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 3;
  private:
  const ::brokerage_to_bank::Deposit& _internal_deposit() const;
  public:
  const ::brokerage_to_bank::Deposit& deposit() const;
  ::brokerage_to_bank::Deposit* release_deposit();
  ::brokerage_to_bank::Deposit* mutable_deposit();
  void set_allocated_deposit(::brokerage_to_bank::Deposit* deposit);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:brokerage_to_bank.UpdateAccount)
 private:
  void set_has_withdraw();
  void set_has_deposit();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Header* header_;
  union PayloadUnion {
    PayloadUnion() {}
    ::brokerage_to_bank::Withdraw* withdraw_;
    ::brokerage_to_bank::Deposit* deposit_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_brokerage_5fto_5fbank_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:brokerage_to_bank.Ack) */ {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Ack* other);
  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(NULL);
  }

  Ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ack_ResponseType ResponseType;
  static const ResponseType INVALID =
    Ack_ResponseType_INVALID;
  static const ResponseType MALFORMED_MESSAGE =
    Ack_ResponseType_MALFORMED_MESSAGE;
  static const ResponseType INVALID_TRANSACTION_ID =
    Ack_ResponseType_INVALID_TRANSACTION_ID;
  static const ResponseType INVALID_BROKERAGE_ID =
    Ack_ResponseType_INVALID_BROKERAGE_ID;
  static const ResponseType SUCCESS =
    Ack_ResponseType_SUCCESS;
  static inline bool ResponseType_IsValid(int value) {
    return Ack_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    Ack_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    Ack_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    Ack_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return Ack_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return Ack_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return Ack_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .brokerage_to_bank.Ack.ResponseType response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::brokerage_to_bank::Ack_ResponseType response() const;
  void set_response(::brokerage_to_bank::Ack_ResponseType value);

  // @@protoc_insertion_point(class_scope:brokerage_to_bank.Ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_brokerage_5fto_5fbank_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Withdraw

// .BrokerageId brokerage_id = 1;
inline bool Withdraw::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& Withdraw::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& Withdraw::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:brokerage_to_bank.Withdraw.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Withdraw::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.Withdraw.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* Withdraw::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.Withdraw.brokerage_id)
  return brokerage_id_;
}
inline void Withdraw::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:brokerage_to_bank.Withdraw.brokerage_id)
}

// .Price price = 2;
inline bool Withdraw::has_price() const {
  return this != internal_default_instance() && price_ != NULL;
}
inline const ::Price& Withdraw::_internal_price() const {
  return *price_;
}
inline const ::Price& Withdraw::price() const {
  const ::Price* p = price_;
  // @@protoc_insertion_point(field_get:brokerage_to_bank.Withdraw.price)
  return p != NULL ? *p : *reinterpret_cast<const ::Price*>(
      &::_Price_default_instance_);
}
inline ::Price* Withdraw::release_price() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.Withdraw.price)
  
  ::Price* temp = price_;
  price_ = NULL;
  return temp;
}
inline ::Price* Withdraw::mutable_price() {
  
  if (price_ == NULL) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaNoVirtual());
    price_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.Withdraw.price)
  return price_;
}
inline void Withdraw::set_allocated_price(::Price* price) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(price_);
  }
  if (price) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      price = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:brokerage_to_bank.Withdraw.price)
}

// -------------------------------------------------------------------

// Deposit

// .BrokerageId brokerage_id = 1;
inline bool Deposit::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& Deposit::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& Deposit::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:brokerage_to_bank.Deposit.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Deposit::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.Deposit.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* Deposit::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.Deposit.brokerage_id)
  return brokerage_id_;
}
inline void Deposit::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:brokerage_to_bank.Deposit.brokerage_id)
}

// .Price price = 2;
inline bool Deposit::has_price() const {
  return this != internal_default_instance() && price_ != NULL;
}
inline const ::Price& Deposit::_internal_price() const {
  return *price_;
}
inline const ::Price& Deposit::price() const {
  const ::Price* p = price_;
  // @@protoc_insertion_point(field_get:brokerage_to_bank.Deposit.price)
  return p != NULL ? *p : *reinterpret_cast<const ::Price*>(
      &::_Price_default_instance_);
}
inline ::Price* Deposit::release_price() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.Deposit.price)
  
  ::Price* temp = price_;
  price_ = NULL;
  return temp;
}
inline ::Price* Deposit::mutable_price() {
  
  if (price_ == NULL) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaNoVirtual());
    price_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.Deposit.price)
  return price_;
}
inline void Deposit::set_allocated_price(::Price* price) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(price_);
  }
  if (price) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      price = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:brokerage_to_bank.Deposit.price)
}

// -------------------------------------------------------------------

// UpdateAccount

// .Header header = 1;
inline bool UpdateAccount::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::Header& UpdateAccount::_internal_header() const {
  return *header_;
}
inline const ::Header& UpdateAccount::header() const {
  const ::Header* p = header_;
  // @@protoc_insertion_point(field_get:brokerage_to_bank.UpdateAccount.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Header*>(
      &::_Header_default_instance_);
}
inline ::Header* UpdateAccount::release_header() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.UpdateAccount.header)
  
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Header* UpdateAccount::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.UpdateAccount.header)
  return header_;
}
inline void UpdateAccount::set_allocated_header(::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:brokerage_to_bank.UpdateAccount.header)
}

// .brokerage_to_bank.Withdraw withdraw = 2;
inline bool UpdateAccount::has_withdraw() const {
  return payload_case() == kWithdraw;
}
inline void UpdateAccount::set_has_withdraw() {
  _oneof_case_[0] = kWithdraw;
}
inline void UpdateAccount::clear_withdraw() {
  if (has_withdraw()) {
    delete payload_.withdraw_;
    clear_has_payload();
  }
}
inline const ::brokerage_to_bank::Withdraw& UpdateAccount::_internal_withdraw() const {
  return *payload_.withdraw_;
}
inline ::brokerage_to_bank::Withdraw* UpdateAccount::release_withdraw() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.UpdateAccount.withdraw)
  if (has_withdraw()) {
    clear_has_payload();
      ::brokerage_to_bank::Withdraw* temp = payload_.withdraw_;
    payload_.withdraw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::brokerage_to_bank::Withdraw& UpdateAccount::withdraw() const {
  // @@protoc_insertion_point(field_get:brokerage_to_bank.UpdateAccount.withdraw)
  return has_withdraw()
      ? *payload_.withdraw_
      : *reinterpret_cast< ::brokerage_to_bank::Withdraw*>(&::brokerage_to_bank::_Withdraw_default_instance_);
}
inline ::brokerage_to_bank::Withdraw* UpdateAccount::mutable_withdraw() {
  if (!has_withdraw()) {
    clear_payload();
    set_has_withdraw();
    payload_.withdraw_ = CreateMaybeMessage< ::brokerage_to_bank::Withdraw >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.UpdateAccount.withdraw)
  return payload_.withdraw_;
}

// .brokerage_to_bank.Deposit deposit = 3;
inline bool UpdateAccount::has_deposit() const {
  return payload_case() == kDeposit;
}
inline void UpdateAccount::set_has_deposit() {
  _oneof_case_[0] = kDeposit;
}
inline void UpdateAccount::clear_deposit() {
  if (has_deposit()) {
    delete payload_.deposit_;
    clear_has_payload();
  }
}
inline const ::brokerage_to_bank::Deposit& UpdateAccount::_internal_deposit() const {
  return *payload_.deposit_;
}
inline ::brokerage_to_bank::Deposit* UpdateAccount::release_deposit() {
  // @@protoc_insertion_point(field_release:brokerage_to_bank.UpdateAccount.deposit)
  if (has_deposit()) {
    clear_has_payload();
      ::brokerage_to_bank::Deposit* temp = payload_.deposit_;
    payload_.deposit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::brokerage_to_bank::Deposit& UpdateAccount::deposit() const {
  // @@protoc_insertion_point(field_get:brokerage_to_bank.UpdateAccount.deposit)
  return has_deposit()
      ? *payload_.deposit_
      : *reinterpret_cast< ::brokerage_to_bank::Deposit*>(&::brokerage_to_bank::_Deposit_default_instance_);
}
inline ::brokerage_to_bank::Deposit* UpdateAccount::mutable_deposit() {
  if (!has_deposit()) {
    clear_payload();
    set_has_deposit();
    payload_.deposit_ = CreateMaybeMessage< ::brokerage_to_bank::Deposit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:brokerage_to_bank.UpdateAccount.deposit)
  return payload_.deposit_;
}

inline bool UpdateAccount::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void UpdateAccount::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline UpdateAccount::PayloadCase UpdateAccount::payload_case() const {
  return UpdateAccount::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ack

// .brokerage_to_bank.Ack.ResponseType response = 1;
inline void Ack::clear_response() {
  response_ = 0;
}
inline ::brokerage_to_bank::Ack_ResponseType Ack::response() const {
  // @@protoc_insertion_point(field_get:brokerage_to_bank.Ack.response)
  return static_cast< ::brokerage_to_bank::Ack_ResponseType >(response_);
}
inline void Ack::set_response(::brokerage_to_bank::Ack_ResponseType value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:brokerage_to_bank.Ack.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brokerage_to_bank

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::brokerage_to_bank::Ack_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brokerage_to_bank::Ack_ResponseType>() {
  return ::brokerage_to_bank::Ack_ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brokerage_5fto_5fbank_2eproto
