// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankServer/brokerage_to_bank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bankServer_2fbrokerage_5fto_5fbank_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bankServer_2fbrokerage_5fto_5fbank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bankServer_2fbrokerage_5fto_5fbank_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto;
class Ack;
struct AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Deposit;
struct DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class UpdateAccount;
struct UpdateAccountDefaultTypeInternal;
extern UpdateAccountDefaultTypeInternal _UpdateAccount_default_instance_;
class Withdraw;
struct WithdrawDefaultTypeInternal;
extern WithdrawDefaultTypeInternal _Withdraw_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Ack* Arena::CreateMaybeMessage<::Ack>(Arena*);
template<> ::Deposit* Arena::CreateMaybeMessage<::Deposit>(Arena*);
template<> ::UpdateAccount* Arena::CreateMaybeMessage<::UpdateAccount>(Arena*);
template<> ::Withdraw* Arena::CreateMaybeMessage<::Withdraw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Ack_ResponseType : int {
  Ack_ResponseType_INVALID = 0,
  Ack_ResponseType_MALFORMED_MESSAGE = 1,
  Ack_ResponseType_INVALID_TRANSACTION_ID = 2,
  Ack_ResponseType_INVALID_BROKERAGE_ID = 3,
  Ack_ResponseType_SUCCESS = 4,
  Ack_ResponseType_Ack_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Ack_ResponseType_Ack_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Ack_ResponseType_IsValid(int value);
constexpr Ack_ResponseType Ack_ResponseType_ResponseType_MIN = Ack_ResponseType_INVALID;
constexpr Ack_ResponseType Ack_ResponseType_ResponseType_MAX = Ack_ResponseType_SUCCESS;
constexpr int Ack_ResponseType_ResponseType_ARRAYSIZE = Ack_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_ResponseType_descriptor();
template<typename T>
inline const std::string& Ack_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ack_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ack_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ack_ResponseType_descriptor(), enum_t_value);
}
inline bool Ack_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Ack_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ack_ResponseType>(
    Ack_ResponseType_descriptor(), name, value);
}
// ===================================================================

class Withdraw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Withdraw) */ {
 public:
  inline Withdraw() : Withdraw(nullptr) {}
  ~Withdraw() override;
  explicit PROTOBUF_CONSTEXPR Withdraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Withdraw(const Withdraw& from);
  Withdraw(Withdraw&& from) noexcept
    : Withdraw() {
    *this = ::std::move(from);
  }

  inline Withdraw& operator=(const Withdraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdraw& operator=(Withdraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Withdraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const Withdraw* internal_default_instance() {
    return reinterpret_cast<const Withdraw*>(
               &_Withdraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Withdraw& a, Withdraw& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Withdraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Withdraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Withdraw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Withdraw& from) {
    Withdraw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdraw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Withdraw";
  }
  protected:
  explicit Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerageIdFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // .Price price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Price& price() const;
  PROTOBUF_NODISCARD ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);
  private:
  const ::Price& _internal_price() const;
  ::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Price* price);
  ::Price* unsafe_arena_release_price();

  // @@protoc_insertion_point(class_scope:Withdraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::BrokerageId* brokerage_id_;
    ::Price* price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto;
};
// -------------------------------------------------------------------

class Deposit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  ~Deposit() override;
  explicit PROTOBUF_CONSTEXPR Deposit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deposit(const Deposit& from);
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Deposit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Deposit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Deposit& from) {
    Deposit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Deposit";
  }
  protected:
  explicit Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerageIdFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // .Price price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Price& price() const;
  PROTOBUF_NODISCARD ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);
  private:
  const ::Price& _internal_price() const;
  ::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Price* price);
  ::Price* unsafe_arena_release_price();

  // @@protoc_insertion_point(class_scope:Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::BrokerageId* brokerage_id_;
    ::Price* price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto;
};
// -------------------------------------------------------------------

class UpdateAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateAccount) */ {
 public:
  inline UpdateAccount() : UpdateAccount(nullptr) {}
  ~UpdateAccount() override;
  explicit PROTOBUF_CONSTEXPR UpdateAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAccount(const UpdateAccount& from);
  UpdateAccount(UpdateAccount&& from) noexcept
    : UpdateAccount() {
    *this = ::std::move(from);
  }

  inline UpdateAccount& operator=(const UpdateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAccount& operator=(UpdateAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAccount& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kWithdraw = 2,
    kDeposit = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const UpdateAccount* internal_default_instance() {
    return reinterpret_cast<const UpdateAccount*>(
               &_UpdateAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateAccount& a, UpdateAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAccount& from) {
    UpdateAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateAccount";
  }
  protected:
  explicit UpdateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kWithdrawFieldNumber = 2,
    kDepositFieldNumber = 3,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .Withdraw withdraw = 2;
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::Withdraw& withdraw() const;
  PROTOBUF_NODISCARD ::Withdraw* release_withdraw();
  ::Withdraw* mutable_withdraw();
  void set_allocated_withdraw(::Withdraw* withdraw);
  private:
  const ::Withdraw& _internal_withdraw() const;
  ::Withdraw* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::Withdraw* withdraw);
  ::Withdraw* unsafe_arena_release_withdraw();

  // .Deposit deposit = 3;
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::Deposit& deposit() const;
  PROTOBUF_NODISCARD ::Deposit* release_deposit();
  ::Deposit* mutable_deposit();
  void set_allocated_deposit(::Deposit* deposit);
  private:
  const ::Deposit& _internal_deposit() const;
  ::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::Deposit* deposit);
  ::Deposit* unsafe_arena_release_deposit();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:UpdateAccount)
 private:
  class _Internal;
  void set_has_withdraw();
  void set_has_deposit();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Withdraw* withdraw_;
      ::Deposit* deposit_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto;
};
// -------------------------------------------------------------------

class Ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  ~Ack() override;
  explicit PROTOBUF_CONSTEXPR Ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ack& from) {
    Ack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ack_ResponseType ResponseType;
  static constexpr ResponseType INVALID =
    Ack_ResponseType_INVALID;
  static constexpr ResponseType MALFORMED_MESSAGE =
    Ack_ResponseType_MALFORMED_MESSAGE;
  static constexpr ResponseType INVALID_TRANSACTION_ID =
    Ack_ResponseType_INVALID_TRANSACTION_ID;
  static constexpr ResponseType INVALID_BROKERAGE_ID =
    Ack_ResponseType_INVALID_BROKERAGE_ID;
  static constexpr ResponseType SUCCESS =
    Ack_ResponseType_SUCCESS;
  static inline bool ResponseType_IsValid(int value) {
    return Ack_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    Ack_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    Ack_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    Ack_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return Ack_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return Ack_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return Ack_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .Ack.ResponseType response = 1;
  void clear_response();
  ::Ack_ResponseType response() const;
  void set_response(::Ack_ResponseType value);
  private:
  ::Ack_ResponseType _internal_response() const;
  void _internal_set_response(::Ack_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Withdraw

// .BrokerageId brokerage_id = 1;
inline bool Withdraw::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Withdraw::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Withdraw::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Withdraw::brokerage_id() const {
  // @@protoc_insertion_point(field_get:Withdraw.brokerage_id)
  return _internal_brokerage_id();
}
inline void Withdraw::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Withdraw.brokerage_id)
}
inline ::BrokerageId* Withdraw::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Withdraw::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:Withdraw.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Withdraw::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Withdraw::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:Withdraw.brokerage_id)
  return _msg;
}
inline void Withdraw::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:Withdraw.brokerage_id)
}

// .Price price = 2;
inline bool Withdraw::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool Withdraw::has_price() const {
  return _internal_has_price();
}
inline const ::Price& Withdraw::_internal_price() const {
  const ::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& Withdraw::price() const {
  // @@protoc_insertion_point(field_get:Withdraw.price)
  return _internal_price();
}
inline void Withdraw::unsafe_arena_set_allocated_price(
    ::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Withdraw.price)
}
inline ::Price* Withdraw::release_price() {
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* Withdraw::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:Withdraw.price)
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::Price* Withdraw::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::Price* Withdraw::mutable_price() {
  ::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:Withdraw.price)
  return _msg;
}
inline void Withdraw::set_allocated_price(::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:Withdraw.price)
}

// -------------------------------------------------------------------

// Deposit

// .BrokerageId brokerage_id = 1;
inline bool Deposit::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Deposit::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Deposit::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Deposit::brokerage_id() const {
  // @@protoc_insertion_point(field_get:Deposit.brokerage_id)
  return _internal_brokerage_id();
}
inline void Deposit::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Deposit.brokerage_id)
}
inline ::BrokerageId* Deposit::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Deposit::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:Deposit.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Deposit::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Deposit::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:Deposit.brokerage_id)
  return _msg;
}
inline void Deposit::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:Deposit.brokerage_id)
}

// .Price price = 2;
inline bool Deposit::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool Deposit::has_price() const {
  return _internal_has_price();
}
inline const ::Price& Deposit::_internal_price() const {
  const ::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& Deposit::price() const {
  // @@protoc_insertion_point(field_get:Deposit.price)
  return _internal_price();
}
inline void Deposit::unsafe_arena_set_allocated_price(
    ::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Deposit.price)
}
inline ::Price* Deposit::release_price() {
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* Deposit::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:Deposit.price)
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::Price* Deposit::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::Price* Deposit::mutable_price() {
  ::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:Deposit.price)
  return _msg;
}
inline void Deposit::set_allocated_price(::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:Deposit.price)
}

// -------------------------------------------------------------------

// UpdateAccount

// .Header header = 1;
inline bool UpdateAccount::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool UpdateAccount::has_header() const {
  return _internal_has_header();
}
inline const ::Header& UpdateAccount::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& UpdateAccount::header() const {
  // @@protoc_insertion_point(field_get:UpdateAccount.header)
  return _internal_header();
}
inline void UpdateAccount::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateAccount.header)
}
inline ::Header* UpdateAccount::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* UpdateAccount::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:UpdateAccount.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* UpdateAccount::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* UpdateAccount::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:UpdateAccount.header)
  return _msg;
}
inline void UpdateAccount::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:UpdateAccount.header)
}

// .Withdraw withdraw = 2;
inline bool UpdateAccount::_internal_has_withdraw() const {
  return payload_case() == kWithdraw;
}
inline bool UpdateAccount::has_withdraw() const {
  return _internal_has_withdraw();
}
inline void UpdateAccount::set_has_withdraw() {
  _impl_._oneof_case_[0] = kWithdraw;
}
inline void UpdateAccount::clear_withdraw() {
  if (_internal_has_withdraw()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.withdraw_;
    }
    clear_has_payload();
  }
}
inline ::Withdraw* UpdateAccount::release_withdraw() {
  // @@protoc_insertion_point(field_release:UpdateAccount.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_payload();
    ::Withdraw* temp = _impl_.payload_.withdraw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Withdraw& UpdateAccount::_internal_withdraw() const {
  return _internal_has_withdraw()
      ? *_impl_.payload_.withdraw_
      : reinterpret_cast< ::Withdraw&>(::_Withdraw_default_instance_);
}
inline const ::Withdraw& UpdateAccount::withdraw() const {
  // @@protoc_insertion_point(field_get:UpdateAccount.withdraw)
  return _internal_withdraw();
}
inline ::Withdraw* UpdateAccount::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateAccount.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_payload();
    ::Withdraw* temp = _impl_.payload_.withdraw_;
    _impl_.payload_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateAccount::unsafe_arena_set_allocated_withdraw(::Withdraw* withdraw) {
  clear_payload();
  if (withdraw) {
    set_has_withdraw();
    _impl_.payload_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateAccount.withdraw)
}
inline ::Withdraw* UpdateAccount::_internal_mutable_withdraw() {
  if (!_internal_has_withdraw()) {
    clear_payload();
    set_has_withdraw();
    _impl_.payload_.withdraw_ = CreateMaybeMessage< ::Withdraw >(GetArenaForAllocation());
  }
  return _impl_.payload_.withdraw_;
}
inline ::Withdraw* UpdateAccount::mutable_withdraw() {
  ::Withdraw* _msg = _internal_mutable_withdraw();
  // @@protoc_insertion_point(field_mutable:UpdateAccount.withdraw)
  return _msg;
}

// .Deposit deposit = 3;
inline bool UpdateAccount::_internal_has_deposit() const {
  return payload_case() == kDeposit;
}
inline bool UpdateAccount::has_deposit() const {
  return _internal_has_deposit();
}
inline void UpdateAccount::set_has_deposit() {
  _impl_._oneof_case_[0] = kDeposit;
}
inline void UpdateAccount::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.deposit_;
    }
    clear_has_payload();
  }
}
inline ::Deposit* UpdateAccount::release_deposit() {
  // @@protoc_insertion_point(field_release:UpdateAccount.deposit)
  if (_internal_has_deposit()) {
    clear_has_payload();
    ::Deposit* temp = _impl_.payload_.deposit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Deposit& UpdateAccount::_internal_deposit() const {
  return _internal_has_deposit()
      ? *_impl_.payload_.deposit_
      : reinterpret_cast< ::Deposit&>(::_Deposit_default_instance_);
}
inline const ::Deposit& UpdateAccount::deposit() const {
  // @@protoc_insertion_point(field_get:UpdateAccount.deposit)
  return _internal_deposit();
}
inline ::Deposit* UpdateAccount::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateAccount.deposit)
  if (_internal_has_deposit()) {
    clear_has_payload();
    ::Deposit* temp = _impl_.payload_.deposit_;
    _impl_.payload_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateAccount::unsafe_arena_set_allocated_deposit(::Deposit* deposit) {
  clear_payload();
  if (deposit) {
    set_has_deposit();
    _impl_.payload_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateAccount.deposit)
}
inline ::Deposit* UpdateAccount::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_payload();
    set_has_deposit();
    _impl_.payload_.deposit_ = CreateMaybeMessage< ::Deposit >(GetArenaForAllocation());
  }
  return _impl_.payload_.deposit_;
}
inline ::Deposit* UpdateAccount::mutable_deposit() {
  ::Deposit* _msg = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:UpdateAccount.deposit)
  return _msg;
}

inline bool UpdateAccount::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void UpdateAccount::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline UpdateAccount::PayloadCase UpdateAccount::payload_case() const {
  return UpdateAccount::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ack

// .Ack.ResponseType response = 1;
inline void Ack::clear_response() {
  _impl_.response_ = 0;
}
inline ::Ack_ResponseType Ack::_internal_response() const {
  return static_cast< ::Ack_ResponseType >(_impl_.response_);
}
inline ::Ack_ResponseType Ack::response() const {
  // @@protoc_insertion_point(field_get:Ack.response)
  return _internal_response();
}
inline void Ack::_internal_set_response(::Ack_ResponseType value) {
  
  _impl_.response_ = value;
}
inline void Ack::set_response(::Ack_ResponseType value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:Ack.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Ack_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Ack_ResponseType>() {
  return ::Ack_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bankServer_2fbrokerage_5fto_5fbank_2eproto
