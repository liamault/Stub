// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankServer/brokerage_to_bank.proto

#include "bankServer/brokerage_to_bank.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Withdraw::Withdraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brokerage_id_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WithdrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WithdrawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WithdrawDefaultTypeInternal() {}
  union {
    Withdraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WithdrawDefaultTypeInternal _Withdraw_default_instance_;
PROTOBUF_CONSTEXPR Deposit::Deposit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brokerage_id_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DepositDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepositDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepositDefaultTypeInternal() {}
  union {
    Deposit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepositDefaultTypeInternal _Deposit_default_instance_;
PROTOBUF_CONSTEXPR UpdateAccount::UpdateAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateAccountDefaultTypeInternal() {}
  union {
    UpdateAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateAccountDefaultTypeInternal _UpdateAccount_default_instance_;
PROTOBUF_CONSTEXPR Ack::Ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;
static ::_pb::Metadata file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bankServer_2fbrokerage_5fto_5fbank_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bankServer_2fbrokerage_5fto_5fbank_2eproto = nullptr;

const uint32_t TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Withdraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Withdraw, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::Withdraw, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Deposit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Deposit, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::Deposit, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::UpdateAccount, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UpdateAccount, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::UpdateAccount, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ack, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Withdraw)},
  { 8, -1, -1, sizeof(::Deposit)},
  { 16, -1, -1, sizeof(::UpdateAccount)},
  { 26, -1, -1, sizeof(::Ack)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Withdraw_default_instance_._instance,
  &::_Deposit_default_instance_._instance,
  &::_UpdateAccount_default_instance_._instance,
  &::_Ack_default_instance_._instance,
};

const char descriptor_table_protodef_bankServer_2fbrokerage_5fto_5fbank_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"bankServer/brokerage_to_bank.proto\032\014co"
  "mmon.proto\"E\n\010Withdraw\022\"\n\014brokerage_id\030\001"
  " \001(\0132\014.BrokerageId\022\025\n\005price\030\002 \001(\0132\006.Pric"
  "e\"D\n\007Deposit\022\"\n\014brokerage_id\030\001 \001(\0132\014.Bro"
  "kerageId\022\025\n\005price\030\002 \001(\0132\006.Price\"o\n\rUpdat"
  "eAccount\022\027\n\006header\030\001 \001(\0132\007.Header\022\035\n\010wit"
  "hdraw\030\002 \001(\0132\t.WithdrawH\000\022\033\n\007deposit\030\003 \001("
  "\0132\010.DepositH\000B\t\n\007payload\"\241\001\n\003Ack\022#\n\010resp"
  "onse\030\001 \001(\0162\021.Ack.ResponseType\"u\n\014Respons"
  "eType\022\013\n\007INVALID\020\000\022\025\n\021MALFORMED_MESSAGE\020"
  "\001\022\032\n\026INVALID_TRANSACTION_ID\020\002\022\030\n\024INVALID"
  "_BROKERAGE_ID\020\003\022\013\n\007SUCCESS\020\004b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto = {
    false, false, 476, descriptor_table_protodef_bankServer_2fbrokerage_5fto_5fbank_2eproto,
    "bankServer/brokerage_to_bank.proto",
    &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once, descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_bankServer_2fbrokerage_5fto_5fbank_2eproto::offsets,
    file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto, file_level_enum_descriptors_bankServer_2fbrokerage_5fto_5fbank_2eproto,
    file_level_service_descriptors_bankServer_2fbrokerage_5fto_5fbank_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_getter() {
  return &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bankServer_2fbrokerage_5fto_5fbank_2eproto(&descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ack_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto);
  return file_level_enum_descriptors_bankServer_2fbrokerage_5fto_5fbank_2eproto[0];
}
bool Ack_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Ack_ResponseType Ack::INVALID;
constexpr Ack_ResponseType Ack::MALFORMED_MESSAGE;
constexpr Ack_ResponseType Ack::INVALID_TRANSACTION_ID;
constexpr Ack_ResponseType Ack::INVALID_BROKERAGE_ID;
constexpr Ack_ResponseType Ack::SUCCESS;
constexpr Ack_ResponseType Ack::ResponseType_MIN;
constexpr Ack_ResponseType Ack::ResponseType_MAX;
constexpr int Ack::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Withdraw::_Internal {
 public:
  static const ::BrokerageId& brokerage_id(const Withdraw* msg);
  static const ::Price& price(const Withdraw* msg);
};

const ::BrokerageId&
Withdraw::_Internal::brokerage_id(const Withdraw* msg) {
  return *msg->_impl_.brokerage_id_;
}
const ::Price&
Withdraw::_Internal::price(const Withdraw* msg) {
  return *msg->_impl_.price_;
}
void Withdraw::clear_brokerage_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
}
void Withdraw::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
Withdraw::Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Withdraw)
}
Withdraw::Withdraw(const Withdraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Withdraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brokerage_id()) {
    _this->_impl_.brokerage_id_ = new ::BrokerageId(*from._impl_.brokerage_id_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::Price(*from._impl_.price_);
  }
  // @@protoc_insertion_point(copy_constructor:Withdraw)
}

inline void Withdraw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Withdraw::~Withdraw() {
  // @@protoc_insertion_point(destructor:Withdraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Withdraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.brokerage_id_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void Withdraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Withdraw::Clear() {
// @@protoc_insertion_point(message_clear_start:Withdraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Withdraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BrokerageId brokerage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Price price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Withdraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Withdraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brokerage_id(this),
        _Internal::brokerage_id(this).GetCachedSize(), target, stream);
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Withdraw)
  return target;
}

size_t Withdraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Withdraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_);
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Withdraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Withdraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Withdraw::GetClassData() const { return &_class_data_; }


void Withdraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Withdraw*>(&to_msg);
  auto& from = static_cast<const Withdraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Withdraw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brokerage_id()) {
    _this->_internal_mutable_brokerage_id()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::Price::MergeFrom(
        from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Withdraw::CopyFrom(const Withdraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Withdraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Withdraw::IsInitialized() const {
  return true;
}

void Withdraw::InternalSwap(Withdraw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Withdraw, _impl_.price_)
      + sizeof(Withdraw::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(Withdraw, _impl_.brokerage_id_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_id_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Withdraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_getter, &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once,
      file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto[0]);
}

// ===================================================================

class Deposit::_Internal {
 public:
  static const ::BrokerageId& brokerage_id(const Deposit* msg);
  static const ::Price& price(const Deposit* msg);
};

const ::BrokerageId&
Deposit::_Internal::brokerage_id(const Deposit* msg) {
  return *msg->_impl_.brokerage_id_;
}
const ::Price&
Deposit::_Internal::price(const Deposit* msg) {
  return *msg->_impl_.price_;
}
void Deposit::clear_brokerage_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
}
void Deposit::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
Deposit::Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Deposit)
}
Deposit::Deposit(const Deposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deposit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_brokerage_id()) {
    _this->_impl_.brokerage_id_ = new ::BrokerageId(*from._impl_.brokerage_id_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::Price(*from._impl_.price_);
  }
  // @@protoc_insertion_point(copy_constructor:Deposit)
}

inline void Deposit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Deposit::~Deposit() {
  // @@protoc_insertion_point(destructor:Deposit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deposit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.brokerage_id_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void Deposit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:Deposit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deposit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BrokerageId brokerage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Price price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Deposit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Deposit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brokerage_id(this),
        _Internal::brokerage_id(this).GetCachedSize(), target, stream);
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Deposit)
  return target;
}

size_t Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Deposit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_);
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deposit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deposit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deposit::GetClassData() const { return &_class_data_; }


void Deposit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deposit*>(&to_msg);
  auto& from = static_cast<const Deposit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Deposit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brokerage_id()) {
    _this->_internal_mutable_brokerage_id()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::Price::MergeFrom(
        from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deposit::CopyFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deposit::IsInitialized() const {
  return true;
}

void Deposit::InternalSwap(Deposit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deposit, _impl_.price_)
      + sizeof(Deposit::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(Deposit, _impl_.brokerage_id_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_id_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deposit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_getter, &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once,
      file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto[1]);
}

// ===================================================================

class UpdateAccount::_Internal {
 public:
  static const ::Header& header(const UpdateAccount* msg);
  static const ::Withdraw& withdraw(const UpdateAccount* msg);
  static const ::Deposit& deposit(const UpdateAccount* msg);
};

const ::Header&
UpdateAccount::_Internal::header(const UpdateAccount* msg) {
  return *msg->_impl_.header_;
}
const ::Withdraw&
UpdateAccount::_Internal::withdraw(const UpdateAccount* msg) {
  return *msg->_impl_.payload_.withdraw_;
}
const ::Deposit&
UpdateAccount::_Internal::deposit(const UpdateAccount* msg) {
  return *msg->_impl_.payload_.deposit_;
}
void UpdateAccount::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void UpdateAccount::set_allocated_withdraw(::Withdraw* withdraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (withdraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(withdraw);
    if (message_arena != submessage_arena) {
      withdraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdraw, submessage_arena);
    }
    set_has_withdraw();
    _impl_.payload_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_set_allocated:UpdateAccount.withdraw)
}
void UpdateAccount::set_allocated_deposit(::Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deposit);
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    set_has_deposit();
    _impl_.payload_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_set_allocated:UpdateAccount.deposit)
}
UpdateAccount::UpdateAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UpdateAccount)
}
UpdateAccount::UpdateAccount(const UpdateAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Header(*from._impl_.header_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kWithdraw: {
      _this->_internal_mutable_withdraw()->::Withdraw::MergeFrom(
          from._internal_withdraw());
      break;
    }
    case kDeposit: {
      _this->_internal_mutable_deposit()->::Deposit::MergeFrom(
          from._internal_deposit());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:UpdateAccount)
}

inline void UpdateAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

UpdateAccount::~UpdateAccount() {
  // @@protoc_insertion_point(destructor:UpdateAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_payload()) {
    clear_payload();
  }
}

void UpdateAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateAccount::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:UpdateAccount)
  switch (payload_case()) {
    case kWithdraw: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.withdraw_;
      }
      break;
    }
    case kDeposit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.deposit_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void UpdateAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Withdraw withdraw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_withdraw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Deposit deposit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .Withdraw withdraw = 2;
  if (_internal_has_withdraw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::withdraw(this),
        _Internal::withdraw(this).GetCachedSize(), target, stream);
  }

  // .Deposit deposit = 3;
  if (_internal_has_deposit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deposit(this),
        _Internal::deposit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateAccount)
  return target;
}

size_t UpdateAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (payload_case()) {
    // .Withdraw withdraw = 2;
    case kWithdraw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.withdraw_);
      break;
    }
    // .Deposit deposit = 3;
    case kDeposit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.deposit_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateAccount::GetClassData() const { return &_class_data_; }


void UpdateAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateAccount*>(&to_msg);
  auto& from = static_cast<const UpdateAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UpdateAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Header::MergeFrom(
        from._internal_header());
  }
  switch (from.payload_case()) {
    case kWithdraw: {
      _this->_internal_mutable_withdraw()->::Withdraw::MergeFrom(
          from._internal_withdraw());
      break;
    }
    case kDeposit: {
      _this->_internal_mutable_deposit()->::Deposit::MergeFrom(
          from._internal_deposit());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateAccount::CopyFrom(const UpdateAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAccount::IsInitialized() const {
  return true;
}

void UpdateAccount::InternalSwap(UpdateAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_getter, &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once,
      file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto[2]);
}

// ===================================================================

class Ack::_Internal {
 public:
};

Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:Ack)
}

inline void Ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:Ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Ack.ResponseType response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::Ack_ResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Ack.ResponseType response = 1;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Ack.ResponseType response = 1;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ack::GetClassData() const { return &_class_data_; }


void Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_response() != 0) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_getter, &descriptor_table_bankServer_2fbrokerage_5fto_5fbank_2eproto_once,
      file_level_metadata_bankServer_2fbrokerage_5fto_5fbank_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Withdraw*
Arena::CreateMaybeMessage< ::Withdraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Withdraw >(arena);
}
template<> PROTOBUF_NOINLINE ::Deposit*
Arena::CreateMaybeMessage< ::Deposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateAccount*
Arena::CreateMaybeMessage< ::UpdateAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::Ack*
Arena::CreateMaybeMessage< ::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
