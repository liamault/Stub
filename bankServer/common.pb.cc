// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankServer/common.proto

#include "bankServer/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Price::Price(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dollars_)*/0u
  , /*decltype(_impl_.cents_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceDefaultTypeInternal() {}
  union {
    Price _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceDefaultTypeInternal _Price_default_instance_;
PROTOBUF_CONSTEXPR BrokerageId::BrokerageId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brokerage_)*/0u
  , /*decltype(_impl_.trader_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BrokerageIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrokerageIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrokerageIdDefaultTypeInternal() {}
  union {
    BrokerageId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrokerageIdDefaultTypeInternal _BrokerageId_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.magic_)*/0
  , /*decltype(_impl_.serial_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR BuySell::BuySell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stock_ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.brokerage_id_)*/nullptr
  , /*decltype(_impl_.quantity_)*/0u
  , /*decltype(_impl_.transaction_id_)*/0u
  , /*decltype(_impl_.tip_flag_)*/false
  , /*decltype(_impl_.hour_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuySellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuySellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuySellDefaultTypeInternal() {}
  union {
    BuySell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuySellDefaultTypeInternal _BuySell_default_instance_;
static ::_pb::Metadata file_level_metadata_bankServer_2fcommon_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bankServer_2fcommon_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bankServer_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_bankServer_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Price, _impl_.dollars_),
  PROTOBUF_FIELD_OFFSET(::Price, _impl_.cents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrokerageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BrokerageId, _impl_.brokerage_),
  PROTOBUF_FIELD_OFFSET(::BrokerageId, _impl_.trader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Header, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::Header, _impl_.magic_),
  PROTOBUF_FIELD_OFFSET(::Header, _impl_.serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuySell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.quantity_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.stock_ticker_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.transaction_id_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.tip_flag_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.hour_),
  PROTOBUF_FIELD_OFFSET(::BuySell, _impl_.day_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Price)},
  { 8, -1, -1, sizeof(::BrokerageId)},
  { 16, -1, -1, sizeof(::Header)},
  { 25, -1, -1, sizeof(::BuySell)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Price_default_instance_._instance,
  &::_BrokerageId_default_instance_._instance,
  &::_Header_default_instance_._instance,
  &::_BuySell_default_instance_._instance,
};

const char descriptor_table_protodef_bankServer_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027bankServer/common.proto\"\'\n\005Price\022\017\n\007do"
  "llars\030\001 \001(\r\022\r\n\005cents\030\002 \001(\r\"0\n\013BrokerageI"
  "d\022\021\n\tbrokerage\030\001 \001(\r\022\016\n\006trader\030\002 \001(\r\"@\n\006"
  "Header\022\017\n\007version\030\001 \001(\r\022\025\n\005magic\030\002 \001(\0162\006"
  ".Magic\022\016\n\006serial\030\003 \001(\r\"\261\001\n\007BuySell\022\020\n\010qu"
  "antity\030\001 \001(\r\022\025\n\005price\030\002 \001(\0132\006.Price\022\024\n\014s"
  "tock_ticker\030\003 \001(\t\022\"\n\014brokerage_id\030\004 \001(\0132"
  "\014.BrokerageId\022\026\n\016transaction_id\030\005 \001(\r\022\020\n"
  "\010tip_flag\030\006 \001(\010\022\014\n\004hour\030\007 \001(\r\022\013\n\003day\030\010 \001"
  "(\r*D\n\005Magic\022\016\n\nREGULATORY\020\000\022\022\n\016STOCK_EXC"
  "HANGE\020\001\022\010\n\004BANK\020\002\022\r\n\tBROKERAGE\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_bankServer_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bankServer_2fcommon_2eproto = {
    false, false, 440, descriptor_table_protodef_bankServer_2fcommon_2eproto,
    "bankServer/common.proto",
    &descriptor_table_bankServer_2fcommon_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_bankServer_2fcommon_2eproto::offsets,
    file_level_metadata_bankServer_2fcommon_2eproto, file_level_enum_descriptors_bankServer_2fcommon_2eproto,
    file_level_service_descriptors_bankServer_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bankServer_2fcommon_2eproto_getter() {
  return &descriptor_table_bankServer_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bankServer_2fcommon_2eproto(&descriptor_table_bankServer_2fcommon_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Magic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bankServer_2fcommon_2eproto);
  return file_level_enum_descriptors_bankServer_2fcommon_2eproto[0];
}
bool Magic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Price::_Internal {
 public:
};

Price::Price(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Price)
}
Price::Price(const Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Price* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dollars_){}
    , decltype(_impl_.cents_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dollars_, &from._impl_.dollars_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cents_) -
    reinterpret_cast<char*>(&_impl_.dollars_)) + sizeof(_impl_.cents_));
  // @@protoc_insertion_point(copy_constructor:Price)
}

inline void Price::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dollars_){0u}
    , decltype(_impl_.cents_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:Price)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Price::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Price::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:Price)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dollars_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cents_) -
      reinterpret_cast<char*>(&_impl_.dollars_)) + sizeof(_impl_.cents_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Price::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 dollars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dollars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Price::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Price)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dollars = 1;
  if (this->_internal_dollars() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dollars(), target);
  }

  // uint32 cents = 2;
  if (this->_internal_cents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Price)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dollars = 1;
  if (this->_internal_dollars() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dollars());
  }

  // uint32 cents = 2;
  if (this->_internal_cents() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cents());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Price::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Price::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Price::GetClassData() const { return &_class_data_; }


void Price::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Price*>(&to_msg);
  auto& from = static_cast<const Price&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Price)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dollars() != 0) {
    _this->_internal_set_dollars(from._internal_dollars());
  }
  if (from._internal_cents() != 0) {
    _this->_internal_set_cents(from._internal_cents());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::InternalSwap(Price* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Price, _impl_.cents_)
      + sizeof(Price::_impl_.cents_)
      - PROTOBUF_FIELD_OFFSET(Price, _impl_.dollars_)>(
          reinterpret_cast<char*>(&_impl_.dollars_),
          reinterpret_cast<char*>(&other->_impl_.dollars_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Price::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fcommon_2eproto_getter, &descriptor_table_bankServer_2fcommon_2eproto_once,
      file_level_metadata_bankServer_2fcommon_2eproto[0]);
}

// ===================================================================

class BrokerageId::_Internal {
 public:
};

BrokerageId::BrokerageId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BrokerageId)
}
BrokerageId::BrokerageId(const BrokerageId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BrokerageId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_){}
    , decltype(_impl_.trader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brokerage_, &from._impl_.brokerage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trader_) -
    reinterpret_cast<char*>(&_impl_.brokerage_)) + sizeof(_impl_.trader_));
  // @@protoc_insertion_point(copy_constructor:BrokerageId)
}

inline void BrokerageId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_){0u}
    , decltype(_impl_.trader_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BrokerageId::~BrokerageId() {
  // @@protoc_insertion_point(destructor:BrokerageId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BrokerageId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BrokerageId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BrokerageId::Clear() {
// @@protoc_insertion_point(message_clear_start:BrokerageId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brokerage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trader_) -
      reinterpret_cast<char*>(&_impl_.brokerage_)) + sizeof(_impl_.trader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrokerageId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 brokerage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.brokerage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 trader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.trader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BrokerageId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrokerageId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brokerage = 1;
  if (this->_internal_brokerage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_brokerage(), target);
  }

  // uint32 trader = 2;
  if (this->_internal_trader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrokerageId)
  return target;
}

size_t BrokerageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrokerageId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 brokerage = 1;
  if (this->_internal_brokerage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_brokerage());
  }

  // uint32 trader = 2;
  if (this->_internal_trader() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trader());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BrokerageId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BrokerageId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BrokerageId::GetClassData() const { return &_class_data_; }


void BrokerageId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BrokerageId*>(&to_msg);
  auto& from = static_cast<const BrokerageId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BrokerageId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_brokerage() != 0) {
    _this->_internal_set_brokerage(from._internal_brokerage());
  }
  if (from._internal_trader() != 0) {
    _this->_internal_set_trader(from._internal_trader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BrokerageId::CopyFrom(const BrokerageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrokerageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageId::IsInitialized() const {
  return true;
}

void BrokerageId::InternalSwap(BrokerageId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BrokerageId, _impl_.trader_)
      + sizeof(BrokerageId::_impl_.trader_)
      - PROTOBUF_FIELD_OFFSET(BrokerageId, _impl_.brokerage_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BrokerageId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fcommon_2eproto_getter, &descriptor_table_bankServer_2fcommon_2eproto_once,
      file_level_metadata_bankServer_2fcommon_2eproto[1]);
}

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.magic_){}
    , decltype(_impl_.serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serial_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.serial_));
  // @@protoc_insertion_point(copy_constructor:Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){0u}
    , decltype(_impl_.magic_){0}
    , decltype(_impl_.serial_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serial_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.serial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Magic magic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_magic(static_cast<::Magic>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .Magic magic = 2;
  if (this->_internal_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_magic(), target);
  }

  // uint32 serial = 3;
  if (this->_internal_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // .Magic magic = 2;
  if (this->_internal_magic() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_magic());
  }

  // uint32 serial = 3;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_magic() != 0) {
    _this->_internal_set_magic(from._internal_magic());
  }
  if (from._internal_serial() != 0) {
    _this->_internal_set_serial(from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.serial_)
      + sizeof(Header::_impl_.serial_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fcommon_2eproto_getter, &descriptor_table_bankServer_2fcommon_2eproto_once,
      file_level_metadata_bankServer_2fcommon_2eproto[2]);
}

// ===================================================================

class BuySell::_Internal {
 public:
  static const ::Price& price(const BuySell* msg);
  static const ::BrokerageId& brokerage_id(const BuySell* msg);
};

const ::Price&
BuySell::_Internal::price(const BuySell* msg) {
  return *msg->_impl_.price_;
}
const ::BrokerageId&
BuySell::_Internal::brokerage_id(const BuySell* msg) {
  return *msg->_impl_.brokerage_id_;
}
BuySell::BuySell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BuySell)
}
BuySell::BuySell(const BuySell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuySell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stock_ticker_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_.transaction_id_){}
    , decltype(_impl_.tip_flag_){}
    , decltype(_impl_.hour_){}
    , decltype(_impl_.day_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stock_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stock_ticker().empty()) {
    _this->_impl_.stock_ticker_.Set(from._internal_stock_ticker(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::Price(*from._impl_.price_);
  }
  if (from._internal_has_brokerage_id()) {
    _this->_impl_.brokerage_id_ = new ::BrokerageId(*from._impl_.brokerage_id_);
  }
  ::memcpy(&_impl_.quantity_, &from._impl_.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.day_) -
    reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.day_));
  // @@protoc_insertion_point(copy_constructor:BuySell)
}

inline void BuySell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stock_ticker_){}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.quantity_){0u}
    , decltype(_impl_.transaction_id_){0u}
    , decltype(_impl_.tip_flag_){false}
    , decltype(_impl_.hour_){0u}
    , decltype(_impl_.day_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stock_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuySell::~BuySell() {
  // @@protoc_insertion_point(destructor:BuySell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuySell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stock_ticker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.brokerage_id_;
}

void BuySell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuySell::Clear() {
// @@protoc_insertion_point(message_clear_start:BuySell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stock_ticker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
  ::memset(&_impl_.quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.day_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuySell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 quantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Price price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stock_ticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stock_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BuySell.stock_ticker"));
        } else
          goto handle_unusual;
        continue;
      // .BrokerageId brokerage_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool tip_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tip_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 day = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuySell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuySell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 quantity = 1;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quantity(), target);
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // string stock_ticker = 3;
  if (!this->_internal_stock_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stock_ticker().data(), static_cast<int>(this->_internal_stock_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuySell.stock_ticker");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stock_ticker(), target);
  }

  // .BrokerageId brokerage_id = 4;
  if (this->_internal_has_brokerage_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::brokerage_id(this),
        _Internal::brokerage_id(this).GetCachedSize(), target, stream);
  }

  // uint32 transaction_id = 5;
  if (this->_internal_transaction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transaction_id(), target);
  }

  // bool tip_flag = 6;
  if (this->_internal_tip_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_tip_flag(), target);
  }

  // uint32 hour = 7;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hour(), target);
  }

  // uint32 day = 8;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuySell)
  return target;
}

size_t BuySell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuySell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stock_ticker = 3;
  if (!this->_internal_stock_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stock_ticker());
  }

  // .Price price = 2;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .BrokerageId brokerage_id = 4;
  if (this->_internal_has_brokerage_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_);
  }

  // uint32 quantity = 1;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
  }

  // uint32 transaction_id = 5;
  if (this->_internal_transaction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_id());
  }

  // bool tip_flag = 6;
  if (this->_internal_tip_flag() != 0) {
    total_size += 1 + 1;
  }

  // uint32 hour = 7;
  if (this->_internal_hour() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hour());
  }

  // uint32 day = 8;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuySell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuySell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuySell::GetClassData() const { return &_class_data_; }


void BuySell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuySell*>(&to_msg);
  auto& from = static_cast<const BuySell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BuySell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stock_ticker().empty()) {
    _this->_internal_set_stock_ticker(from._internal_stock_ticker());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_brokerage_id()) {
    _this->_internal_mutable_brokerage_id()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_transaction_id() != 0) {
    _this->_internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_tip_flag() != 0) {
    _this->_internal_set_tip_flag(from._internal_tip_flag());
  }
  if (from._internal_hour() != 0) {
    _this->_internal_set_hour(from._internal_hour());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuySell::CopyFrom(const BuySell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuySell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySell::IsInitialized() const {
  return true;
}

void BuySell::InternalSwap(BuySell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stock_ticker_, lhs_arena,
      &other->_impl_.stock_ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuySell, _impl_.day_)
      + sizeof(BuySell::_impl_.day_)
      - PROTOBUF_FIELD_OFFSET(BuySell, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuySell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bankServer_2fcommon_2eproto_getter, &descriptor_table_bankServer_2fcommon_2eproto_once,
      file_level_metadata_bankServer_2fcommon_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Price*
Arena::CreateMaybeMessage< ::Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Price >(arena);
}
template<> PROTOBUF_NOINLINE ::BrokerageId*
Arena::CreateMaybeMessage< ::BrokerageId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BrokerageId >(arena);
}
template<> PROTOBUF_NOINLINE ::Header*
Arena::CreateMaybeMessage< ::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::BuySell*
Arena::CreateMaybeMessage< ::BuySell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuySell >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
