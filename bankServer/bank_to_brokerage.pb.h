// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank_to_brokerage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bank_5fto_5fbrokerage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bank_5fto_5fbrokerage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bank_5fto_5fbrokerage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bank_5fto_5fbrokerage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bank_5fto_5fbrokerage_2eproto;
namespace bank_to_brokerage {
class Deposit;
struct DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class EndOfDayResponse;
struct EndOfDayResponseDefaultTypeInternal;
extern EndOfDayResponseDefaultTypeInternal _EndOfDayResponse_default_instance_;
class EndOfDaySummaryRequest;
struct EndOfDaySummaryRequestDefaultTypeInternal;
extern EndOfDaySummaryRequestDefaultTypeInternal _EndOfDaySummaryRequest_default_instance_;
class EndOfDaySummaryRequest_Transaction;
struct EndOfDaySummaryRequest_TransactionDefaultTypeInternal;
extern EndOfDaySummaryRequest_TransactionDefaultTypeInternal _EndOfDaySummaryRequest_Transaction_default_instance_;
class Update_BrokerageAccount_Rep;
struct Update_BrokerageAccount_RepDefaultTypeInternal;
extern Update_BrokerageAccount_RepDefaultTypeInternal _Update_BrokerageAccount_Rep_default_instance_;
class Update_BrokerageAccount_Req;
struct Update_BrokerageAccount_ReqDefaultTypeInternal;
extern Update_BrokerageAccount_ReqDefaultTypeInternal _Update_BrokerageAccount_Req_default_instance_;
class Withdraw;
struct WithdrawDefaultTypeInternal;
extern WithdrawDefaultTypeInternal _Withdraw_default_instance_;
}  // namespace bank_to_brokerage
PROTOBUF_NAMESPACE_OPEN
template<> ::bank_to_brokerage::Deposit* Arena::CreateMaybeMessage<::bank_to_brokerage::Deposit>(Arena*);
template<> ::bank_to_brokerage::EndOfDayResponse* Arena::CreateMaybeMessage<::bank_to_brokerage::EndOfDayResponse>(Arena*);
template<> ::bank_to_brokerage::EndOfDaySummaryRequest* Arena::CreateMaybeMessage<::bank_to_brokerage::EndOfDaySummaryRequest>(Arena*);
template<> ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* Arena::CreateMaybeMessage<::bank_to_brokerage::EndOfDaySummaryRequest_Transaction>(Arena*);
template<> ::bank_to_brokerage::Update_BrokerageAccount_Rep* Arena::CreateMaybeMessage<::bank_to_brokerage::Update_BrokerageAccount_Rep>(Arena*);
template<> ::bank_to_brokerage::Update_BrokerageAccount_Req* Arena::CreateMaybeMessage<::bank_to_brokerage::Update_BrokerageAccount_Req>(Arena*);
template<> ::bank_to_brokerage::Withdraw* Arena::CreateMaybeMessage<::bank_to_brokerage::Withdraw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bank_to_brokerage {

enum EndOfDaySummaryRequest_Operation : int {
  EndOfDaySummaryRequest_Operation_DEPOSIT = 0,
  EndOfDaySummaryRequest_Operation_WITHDRAW = 1,
  EndOfDaySummaryRequest_Operation_EndOfDaySummaryRequest_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EndOfDaySummaryRequest_Operation_EndOfDaySummaryRequest_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EndOfDaySummaryRequest_Operation_IsValid(int value);
constexpr EndOfDaySummaryRequest_Operation EndOfDaySummaryRequest_Operation_Operation_MIN = EndOfDaySummaryRequest_Operation_DEPOSIT;
constexpr EndOfDaySummaryRequest_Operation EndOfDaySummaryRequest_Operation_Operation_MAX = EndOfDaySummaryRequest_Operation_WITHDRAW;
constexpr int EndOfDaySummaryRequest_Operation_Operation_ARRAYSIZE = EndOfDaySummaryRequest_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndOfDaySummaryRequest_Operation_descriptor();
template<typename T>
inline const std::string& EndOfDaySummaryRequest_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EndOfDaySummaryRequest_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EndOfDaySummaryRequest_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EndOfDaySummaryRequest_Operation_descriptor(), enum_t_value);
}
inline bool EndOfDaySummaryRequest_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EndOfDaySummaryRequest_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EndOfDaySummaryRequest_Operation>(
    EndOfDaySummaryRequest_Operation_descriptor(), name, value);
}
enum EndOfDayResponse_Status : int {
  EndOfDayResponse_Status_SUCCESS = 0,
  EndOfDayResponse_Status_RETRANSMIT = 1,
  EndOfDayResponse_Status_EndOfDayResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EndOfDayResponse_Status_EndOfDayResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EndOfDayResponse_Status_IsValid(int value);
constexpr EndOfDayResponse_Status EndOfDayResponse_Status_Status_MIN = EndOfDayResponse_Status_SUCCESS;
constexpr EndOfDayResponse_Status EndOfDayResponse_Status_Status_MAX = EndOfDayResponse_Status_RETRANSMIT;
constexpr int EndOfDayResponse_Status_Status_ARRAYSIZE = EndOfDayResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndOfDayResponse_Status_descriptor();
template<typename T>
inline const std::string& EndOfDayResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EndOfDayResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EndOfDayResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EndOfDayResponse_Status_descriptor(), enum_t_value);
}
inline bool EndOfDayResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EndOfDayResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EndOfDayResponse_Status>(
    EndOfDayResponse_Status_descriptor(), name, value);
}
enum Update_BrokerageAccount_Rep_ResponseType : int {
  Update_BrokerageAccount_Rep_ResponseType_INVALID = 0,
  Update_BrokerageAccount_Rep_ResponseType_MALFORMED_MESSAGE = 1,
  Update_BrokerageAccount_Rep_ResponseType_SUCCESS = 4,
  Update_BrokerageAccount_Rep_ResponseType_Update_BrokerageAccount_Rep_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Update_BrokerageAccount_Rep_ResponseType_Update_BrokerageAccount_Rep_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Update_BrokerageAccount_Rep_ResponseType_IsValid(int value);
constexpr Update_BrokerageAccount_Rep_ResponseType Update_BrokerageAccount_Rep_ResponseType_ResponseType_MIN = Update_BrokerageAccount_Rep_ResponseType_INVALID;
constexpr Update_BrokerageAccount_Rep_ResponseType Update_BrokerageAccount_Rep_ResponseType_ResponseType_MAX = Update_BrokerageAccount_Rep_ResponseType_SUCCESS;
constexpr int Update_BrokerageAccount_Rep_ResponseType_ResponseType_ARRAYSIZE = Update_BrokerageAccount_Rep_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_BrokerageAccount_Rep_ResponseType_descriptor();
template<typename T>
inline const std::string& Update_BrokerageAccount_Rep_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Update_BrokerageAccount_Rep_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Update_BrokerageAccount_Rep_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Update_BrokerageAccount_Rep_ResponseType_descriptor(), enum_t_value);
}
inline bool Update_BrokerageAccount_Rep_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Update_BrokerageAccount_Rep_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Update_BrokerageAccount_Rep_ResponseType>(
    Update_BrokerageAccount_Rep_ResponseType_descriptor(), name, value);
}
// ===================================================================

class EndOfDaySummaryRequest_Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.EndOfDaySummaryRequest.Transaction) */ {
 public:
  inline EndOfDaySummaryRequest_Transaction() : EndOfDaySummaryRequest_Transaction(nullptr) {}
  ~EndOfDaySummaryRequest_Transaction() override;
  explicit PROTOBUF_CONSTEXPR EndOfDaySummaryRequest_Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndOfDaySummaryRequest_Transaction(const EndOfDaySummaryRequest_Transaction& from);
  EndOfDaySummaryRequest_Transaction(EndOfDaySummaryRequest_Transaction&& from) noexcept
    : EndOfDaySummaryRequest_Transaction() {
    *this = ::std::move(from);
  }

  inline EndOfDaySummaryRequest_Transaction& operator=(const EndOfDaySummaryRequest_Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndOfDaySummaryRequest_Transaction& operator=(EndOfDaySummaryRequest_Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndOfDaySummaryRequest_Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndOfDaySummaryRequest_Transaction* internal_default_instance() {
    return reinterpret_cast<const EndOfDaySummaryRequest_Transaction*>(
               &_EndOfDaySummaryRequest_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EndOfDaySummaryRequest_Transaction& a, EndOfDaySummaryRequest_Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(EndOfDaySummaryRequest_Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndOfDaySummaryRequest_Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndOfDaySummaryRequest_Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndOfDaySummaryRequest_Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndOfDaySummaryRequest_Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndOfDaySummaryRequest_Transaction& from) {
    EndOfDaySummaryRequest_Transaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndOfDaySummaryRequest_Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.EndOfDaySummaryRequest.Transaction";
  }
  protected:
  explicit EndOfDaySummaryRequest_Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kOperationFieldNumber = 1,
    kComponentFieldNumber = 3,
  };
  // .Price amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::Price& amount() const;
  PROTOBUF_NODISCARD ::Price* release_amount();
  ::Price* mutable_amount();
  void set_allocated_amount(::Price* amount);
  private:
  const ::Price& _internal_amount() const;
  ::Price* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::Price* amount);
  ::Price* unsafe_arena_release_amount();

  // .bank_to_brokerage.EndOfDaySummaryRequest.Operation operation = 1;
  void clear_operation();
  ::bank_to_brokerage::EndOfDaySummaryRequest_Operation operation() const;
  void set_operation(::bank_to_brokerage::EndOfDaySummaryRequest_Operation value);
  private:
  ::bank_to_brokerage::EndOfDaySummaryRequest_Operation _internal_operation() const;
  void _internal_set_operation(::bank_to_brokerage::EndOfDaySummaryRequest_Operation value);
  public:

  // .Magic component = 3;
  void clear_component();
  ::Magic component() const;
  void set_component(::Magic value);
  private:
  ::Magic _internal_component() const;
  void _internal_set_component(::Magic value);
  public:

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.EndOfDaySummaryRequest.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Price* amount_;
    int operation_;
    int component_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class EndOfDaySummaryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.EndOfDaySummaryRequest) */ {
 public:
  inline EndOfDaySummaryRequest() : EndOfDaySummaryRequest(nullptr) {}
  ~EndOfDaySummaryRequest() override;
  explicit PROTOBUF_CONSTEXPR EndOfDaySummaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndOfDaySummaryRequest(const EndOfDaySummaryRequest& from);
  EndOfDaySummaryRequest(EndOfDaySummaryRequest&& from) noexcept
    : EndOfDaySummaryRequest() {
    *this = ::std::move(from);
  }

  inline EndOfDaySummaryRequest& operator=(const EndOfDaySummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndOfDaySummaryRequest& operator=(EndOfDaySummaryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndOfDaySummaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndOfDaySummaryRequest* internal_default_instance() {
    return reinterpret_cast<const EndOfDaySummaryRequest*>(
               &_EndOfDaySummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EndOfDaySummaryRequest& a, EndOfDaySummaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndOfDaySummaryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndOfDaySummaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndOfDaySummaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndOfDaySummaryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndOfDaySummaryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndOfDaySummaryRequest& from) {
    EndOfDaySummaryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndOfDaySummaryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.EndOfDaySummaryRequest";
  }
  protected:
  explicit EndOfDaySummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EndOfDaySummaryRequest_Transaction Transaction;

  typedef EndOfDaySummaryRequest_Operation Operation;
  static constexpr Operation DEPOSIT =
    EndOfDaySummaryRequest_Operation_DEPOSIT;
  static constexpr Operation WITHDRAW =
    EndOfDaySummaryRequest_Operation_WITHDRAW;
  static inline bool Operation_IsValid(int value) {
    return EndOfDaySummaryRequest_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    EndOfDaySummaryRequest_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    EndOfDaySummaryRequest_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    EndOfDaySummaryRequest_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return EndOfDaySummaryRequest_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return EndOfDaySummaryRequest_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return EndOfDaySummaryRequest_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bank_to_brokerage.EndOfDaySummaryRequest.Transaction transactions = 2;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction >*
      mutable_transactions();
  private:
  const ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction& _internal_transactions(int index) const;
  ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* _internal_add_transactions();
  public:
  const ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction& transactions(int index) const;
  ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction >&
      transactions() const;

  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.EndOfDaySummaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction > transactions_;
    ::Header* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class EndOfDayResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.EndOfDayResponse) */ {
 public:
  inline EndOfDayResponse() : EndOfDayResponse(nullptr) {}
  ~EndOfDayResponse() override;
  explicit PROTOBUF_CONSTEXPR EndOfDayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndOfDayResponse(const EndOfDayResponse& from);
  EndOfDayResponse(EndOfDayResponse&& from) noexcept
    : EndOfDayResponse() {
    *this = ::std::move(from);
  }

  inline EndOfDayResponse& operator=(const EndOfDayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndOfDayResponse& operator=(EndOfDayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndOfDayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndOfDayResponse* internal_default_instance() {
    return reinterpret_cast<const EndOfDayResponse*>(
               &_EndOfDayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndOfDayResponse& a, EndOfDayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EndOfDayResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndOfDayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndOfDayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndOfDayResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndOfDayResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndOfDayResponse& from) {
    EndOfDayResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndOfDayResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.EndOfDayResponse";
  }
  protected:
  explicit EndOfDayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EndOfDayResponse_Status Status;
  static constexpr Status SUCCESS =
    EndOfDayResponse_Status_SUCCESS;
  static constexpr Status RETRANSMIT =
    EndOfDayResponse_Status_RETRANSMIT;
  static inline bool Status_IsValid(int value) {
    return EndOfDayResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    EndOfDayResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    EndOfDayResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    EndOfDayResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return EndOfDayResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return EndOfDayResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return EndOfDayResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .bank_to_brokerage.EndOfDayResponse.Status status = 2;
  void clear_status();
  ::bank_to_brokerage::EndOfDayResponse_Status status() const;
  void set_status(::bank_to_brokerage::EndOfDayResponse_Status value);
  private:
  ::bank_to_brokerage::EndOfDayResponse_Status _internal_status() const;
  void _internal_set_status(::bank_to_brokerage::EndOfDayResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.EndOfDayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class Deposit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  ~Deposit() override;
  explicit PROTOBUF_CONSTEXPR Deposit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deposit(const Deposit& from);
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Deposit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Deposit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Deposit& from) {
    Deposit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.Deposit";
  }
  protected:
  explicit Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kBrokerageIdFieldNumber = 2,
  };
  // .Price price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Price& price() const;
  PROTOBUF_NODISCARD ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);
  private:
  const ::Price& _internal_price() const;
  ::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Price* price);
  ::Price* unsafe_arena_release_price();

  // .BrokerageId brokerage_id = 2;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Price* price_;
    ::BrokerageId* brokerage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class Withdraw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.Withdraw) */ {
 public:
  inline Withdraw() : Withdraw(nullptr) {}
  ~Withdraw() override;
  explicit PROTOBUF_CONSTEXPR Withdraw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Withdraw(const Withdraw& from);
  Withdraw(Withdraw&& from) noexcept
    : Withdraw() {
    *this = ::std::move(from);
  }

  inline Withdraw& operator=(const Withdraw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Withdraw& operator=(Withdraw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Withdraw& default_instance() {
    return *internal_default_instance();
  }
  static inline const Withdraw* internal_default_instance() {
    return reinterpret_cast<const Withdraw*>(
               &_Withdraw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Withdraw& a, Withdraw& b) {
    a.Swap(&b);
  }
  inline void Swap(Withdraw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Withdraw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Withdraw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Withdraw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Withdraw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Withdraw& from) {
    Withdraw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Withdraw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.Withdraw";
  }
  protected:
  explicit Withdraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kBrokerageIdFieldNumber = 2,
  };
  // .Price price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Price& price() const;
  PROTOBUF_NODISCARD ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);
  private:
  const ::Price& _internal_price() const;
  ::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Price* price);
  ::Price* unsafe_arena_release_price();

  // uint32 brokerage_id = 2;
  void clear_brokerage_id();
  uint32_t brokerage_id() const;
  void set_brokerage_id(uint32_t value);
  private:
  uint32_t _internal_brokerage_id() const;
  void _internal_set_brokerage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.Withdraw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Price* price_;
    uint32_t brokerage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class Update_BrokerageAccount_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.Update_BrokerageAccount_Req) */ {
 public:
  inline Update_BrokerageAccount_Req() : Update_BrokerageAccount_Req(nullptr) {}
  ~Update_BrokerageAccount_Req() override;
  explicit PROTOBUF_CONSTEXPR Update_BrokerageAccount_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Update_BrokerageAccount_Req(const Update_BrokerageAccount_Req& from);
  Update_BrokerageAccount_Req(Update_BrokerageAccount_Req&& from) noexcept
    : Update_BrokerageAccount_Req() {
    *this = ::std::move(from);
  }

  inline Update_BrokerageAccount_Req& operator=(const Update_BrokerageAccount_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update_BrokerageAccount_Req& operator=(Update_BrokerageAccount_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Update_BrokerageAccount_Req& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kDeposit = 2,
    kWithdraw = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Update_BrokerageAccount_Req* internal_default_instance() {
    return reinterpret_cast<const Update_BrokerageAccount_Req*>(
               &_Update_BrokerageAccount_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Update_BrokerageAccount_Req& a, Update_BrokerageAccount_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Update_BrokerageAccount_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update_BrokerageAccount_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Update_BrokerageAccount_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Update_BrokerageAccount_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Update_BrokerageAccount_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Update_BrokerageAccount_Req& from) {
    Update_BrokerageAccount_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update_BrokerageAccount_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.Update_BrokerageAccount_Req";
  }
  protected:
  explicit Update_BrokerageAccount_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDepositFieldNumber = 2,
    kWithdrawFieldNumber = 3,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .bank_to_brokerage.Deposit deposit = 2;
  bool has_deposit() const;
  private:
  bool _internal_has_deposit() const;
  public:
  void clear_deposit();
  const ::bank_to_brokerage::Deposit& deposit() const;
  PROTOBUF_NODISCARD ::bank_to_brokerage::Deposit* release_deposit();
  ::bank_to_brokerage::Deposit* mutable_deposit();
  void set_allocated_deposit(::bank_to_brokerage::Deposit* deposit);
  private:
  const ::bank_to_brokerage::Deposit& _internal_deposit() const;
  ::bank_to_brokerage::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::bank_to_brokerage::Deposit* deposit);
  ::bank_to_brokerage::Deposit* unsafe_arena_release_deposit();

  // .bank_to_brokerage.Withdraw withdraw = 3;
  bool has_withdraw() const;
  private:
  bool _internal_has_withdraw() const;
  public:
  void clear_withdraw();
  const ::bank_to_brokerage::Withdraw& withdraw() const;
  PROTOBUF_NODISCARD ::bank_to_brokerage::Withdraw* release_withdraw();
  ::bank_to_brokerage::Withdraw* mutable_withdraw();
  void set_allocated_withdraw(::bank_to_brokerage::Withdraw* withdraw);
  private:
  const ::bank_to_brokerage::Withdraw& _internal_withdraw() const;
  ::bank_to_brokerage::Withdraw* _internal_mutable_withdraw();
  public:
  void unsafe_arena_set_allocated_withdraw(
      ::bank_to_brokerage::Withdraw* withdraw);
  ::bank_to_brokerage::Withdraw* unsafe_arena_release_withdraw();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:bank_to_brokerage.Update_BrokerageAccount_Req)
 private:
  class _Internal;
  void set_has_deposit();
  void set_has_withdraw();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bank_to_brokerage::Deposit* deposit_;
      ::bank_to_brokerage::Withdraw* withdraw_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// -------------------------------------------------------------------

class Update_BrokerageAccount_Rep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank_to_brokerage.Update_BrokerageAccount_Rep) */ {
 public:
  inline Update_BrokerageAccount_Rep() : Update_BrokerageAccount_Rep(nullptr) {}
  ~Update_BrokerageAccount_Rep() override;
  explicit PROTOBUF_CONSTEXPR Update_BrokerageAccount_Rep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Update_BrokerageAccount_Rep(const Update_BrokerageAccount_Rep& from);
  Update_BrokerageAccount_Rep(Update_BrokerageAccount_Rep&& from) noexcept
    : Update_BrokerageAccount_Rep() {
    *this = ::std::move(from);
  }

  inline Update_BrokerageAccount_Rep& operator=(const Update_BrokerageAccount_Rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update_BrokerageAccount_Rep& operator=(Update_BrokerageAccount_Rep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Update_BrokerageAccount_Rep& default_instance() {
    return *internal_default_instance();
  }
  static inline const Update_BrokerageAccount_Rep* internal_default_instance() {
    return reinterpret_cast<const Update_BrokerageAccount_Rep*>(
               &_Update_BrokerageAccount_Rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Update_BrokerageAccount_Rep& a, Update_BrokerageAccount_Rep& b) {
    a.Swap(&b);
  }
  inline void Swap(Update_BrokerageAccount_Rep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update_BrokerageAccount_Rep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Update_BrokerageAccount_Rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Update_BrokerageAccount_Rep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Update_BrokerageAccount_Rep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Update_BrokerageAccount_Rep& from) {
    Update_BrokerageAccount_Rep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update_BrokerageAccount_Rep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank_to_brokerage.Update_BrokerageAccount_Rep";
  }
  protected:
  explicit Update_BrokerageAccount_Rep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Update_BrokerageAccount_Rep_ResponseType ResponseType;
  static constexpr ResponseType INVALID =
    Update_BrokerageAccount_Rep_ResponseType_INVALID;
  static constexpr ResponseType MALFORMED_MESSAGE =
    Update_BrokerageAccount_Rep_ResponseType_MALFORMED_MESSAGE;
  static constexpr ResponseType SUCCESS =
    Update_BrokerageAccount_Rep_ResponseType_SUCCESS;
  static inline bool ResponseType_IsValid(int value) {
    return Update_BrokerageAccount_Rep_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    Update_BrokerageAccount_Rep_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    Update_BrokerageAccount_Rep_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    Update_BrokerageAccount_Rep_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return Update_BrokerageAccount_Rep_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return Update_BrokerageAccount_Rep_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return Update_BrokerageAccount_Rep_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBrokerageIdFieldNumber = 3,
    kResponseFieldNumber = 4,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .BrokerageId brokerage_id = 3;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // .bank_to_brokerage.Update_BrokerageAccount_Rep.ResponseType response = 4;
  void clear_response();
  ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType response() const;
  void set_response(::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType value);
  private:
  ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType _internal_response() const;
  void _internal_set_response(::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:bank_to_brokerage.Update_BrokerageAccount_Rep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    ::BrokerageId* brokerage_id_;
    int response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bank_5fto_5fbrokerage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EndOfDaySummaryRequest_Transaction

// .bank_to_brokerage.EndOfDaySummaryRequest.Operation operation = 1;
inline void EndOfDaySummaryRequest_Transaction::clear_operation() {
  _impl_.operation_ = 0;
}
inline ::bank_to_brokerage::EndOfDaySummaryRequest_Operation EndOfDaySummaryRequest_Transaction::_internal_operation() const {
  return static_cast< ::bank_to_brokerage::EndOfDaySummaryRequest_Operation >(_impl_.operation_);
}
inline ::bank_to_brokerage::EndOfDaySummaryRequest_Operation EndOfDaySummaryRequest_Transaction::operation() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.operation)
  return _internal_operation();
}
inline void EndOfDaySummaryRequest_Transaction::_internal_set_operation(::bank_to_brokerage::EndOfDaySummaryRequest_Operation value) {
  
  _impl_.operation_ = value;
}
inline void EndOfDaySummaryRequest_Transaction::set_operation(::bank_to_brokerage::EndOfDaySummaryRequest_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.operation)
}

// .Price amount = 2;
inline bool EndOfDaySummaryRequest_Transaction::_internal_has_amount() const {
  return this != internal_default_instance() && _impl_.amount_ != nullptr;
}
inline bool EndOfDaySummaryRequest_Transaction::has_amount() const {
  return _internal_has_amount();
}
inline const ::Price& EndOfDaySummaryRequest_Transaction::_internal_amount() const {
  const ::Price* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& EndOfDaySummaryRequest_Transaction::amount() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.amount)
  return _internal_amount();
}
inline void EndOfDaySummaryRequest_Transaction::unsafe_arena_set_allocated_amount(
    ::Price* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.amount)
}
inline ::Price* EndOfDaySummaryRequest_Transaction::release_amount() {
  
  ::Price* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* EndOfDaySummaryRequest_Transaction::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.amount)
  
  ::Price* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::Price* EndOfDaySummaryRequest_Transaction::_internal_mutable_amount() {
  
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::Price* EndOfDaySummaryRequest_Transaction::mutable_amount() {
  ::Price* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.amount)
  return _msg;
}
inline void EndOfDaySummaryRequest_Transaction::set_allocated_amount(::Price* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.amount)
}

// .Magic component = 3;
inline void EndOfDaySummaryRequest_Transaction::clear_component() {
  _impl_.component_ = 0;
}
inline ::Magic EndOfDaySummaryRequest_Transaction::_internal_component() const {
  return static_cast< ::Magic >(_impl_.component_);
}
inline ::Magic EndOfDaySummaryRequest_Transaction::component() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.component)
  return _internal_component();
}
inline void EndOfDaySummaryRequest_Transaction::_internal_set_component(::Magic value) {
  
  _impl_.component_ = value;
}
inline void EndOfDaySummaryRequest_Transaction::set_component(::Magic value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:bank_to_brokerage.EndOfDaySummaryRequest.Transaction.component)
}

// -------------------------------------------------------------------

// EndOfDaySummaryRequest

// .Header header = 1;
inline bool EndOfDaySummaryRequest::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool EndOfDaySummaryRequest::has_header() const {
  return _internal_has_header();
}
inline const ::Header& EndOfDaySummaryRequest::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& EndOfDaySummaryRequest::header() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDaySummaryRequest.header)
  return _internal_header();
}
inline void EndOfDaySummaryRequest::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.EndOfDaySummaryRequest.header)
}
inline ::Header* EndOfDaySummaryRequest::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* EndOfDaySummaryRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.EndOfDaySummaryRequest.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* EndOfDaySummaryRequest::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* EndOfDaySummaryRequest::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.EndOfDaySummaryRequest.header)
  return _msg;
}
inline void EndOfDaySummaryRequest::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.EndOfDaySummaryRequest.header)
}

// repeated .bank_to_brokerage.EndOfDaySummaryRequest.Transaction transactions = 2;
inline int EndOfDaySummaryRequest::_internal_transactions_size() const {
  return _impl_.transactions_.size();
}
inline int EndOfDaySummaryRequest::transactions_size() const {
  return _internal_transactions_size();
}
inline void EndOfDaySummaryRequest::clear_transactions() {
  _impl_.transactions_.Clear();
}
inline ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* EndOfDaySummaryRequest::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.EndOfDaySummaryRequest.transactions)
  return _impl_.transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction >*
EndOfDaySummaryRequest::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:bank_to_brokerage.EndOfDaySummaryRequest.transactions)
  return &_impl_.transactions_;
}
inline const ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction& EndOfDaySummaryRequest::_internal_transactions(int index) const {
  return _impl_.transactions_.Get(index);
}
inline const ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction& EndOfDaySummaryRequest::transactions(int index) const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDaySummaryRequest.transactions)
  return _internal_transactions(index);
}
inline ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* EndOfDaySummaryRequest::_internal_add_transactions() {
  return _impl_.transactions_.Add();
}
inline ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* EndOfDaySummaryRequest::add_transactions() {
  ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:bank_to_brokerage.EndOfDaySummaryRequest.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank_to_brokerage::EndOfDaySummaryRequest_Transaction >&
EndOfDaySummaryRequest::transactions() const {
  // @@protoc_insertion_point(field_list:bank_to_brokerage.EndOfDaySummaryRequest.transactions)
  return _impl_.transactions_;
}

// -------------------------------------------------------------------

// EndOfDayResponse

// .Header header = 1;
inline bool EndOfDayResponse::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool EndOfDayResponse::has_header() const {
  return _internal_has_header();
}
inline const ::Header& EndOfDayResponse::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& EndOfDayResponse::header() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDayResponse.header)
  return _internal_header();
}
inline void EndOfDayResponse::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.EndOfDayResponse.header)
}
inline ::Header* EndOfDayResponse::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* EndOfDayResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.EndOfDayResponse.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* EndOfDayResponse::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* EndOfDayResponse::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.EndOfDayResponse.header)
  return _msg;
}
inline void EndOfDayResponse::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.EndOfDayResponse.header)
}

// .bank_to_brokerage.EndOfDayResponse.Status status = 2;
inline void EndOfDayResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::bank_to_brokerage::EndOfDayResponse_Status EndOfDayResponse::_internal_status() const {
  return static_cast< ::bank_to_brokerage::EndOfDayResponse_Status >(_impl_.status_);
}
inline ::bank_to_brokerage::EndOfDayResponse_Status EndOfDayResponse::status() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.EndOfDayResponse.status)
  return _internal_status();
}
inline void EndOfDayResponse::_internal_set_status(::bank_to_brokerage::EndOfDayResponse_Status value) {
  
  _impl_.status_ = value;
}
inline void EndOfDayResponse::set_status(::bank_to_brokerage::EndOfDayResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bank_to_brokerage.EndOfDayResponse.status)
}

// -------------------------------------------------------------------

// Deposit

// .Price price = 1;
inline bool Deposit::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool Deposit::has_price() const {
  return _internal_has_price();
}
inline const ::Price& Deposit::_internal_price() const {
  const ::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& Deposit::price() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Deposit.price)
  return _internal_price();
}
inline void Deposit::unsafe_arena_set_allocated_price(
    ::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Deposit.price)
}
inline ::Price* Deposit::release_price() {
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* Deposit::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Deposit.price)
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::Price* Deposit::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::Price* Deposit::mutable_price() {
  ::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Deposit.price)
  return _msg;
}
inline void Deposit::set_allocated_price(::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Deposit.price)
}

// .BrokerageId brokerage_id = 2;
inline bool Deposit::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Deposit::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Deposit::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Deposit::brokerage_id() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Deposit.brokerage_id)
  return _internal_brokerage_id();
}
inline void Deposit::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Deposit.brokerage_id)
}
inline ::BrokerageId* Deposit::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Deposit::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Deposit.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Deposit::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Deposit::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Deposit.brokerage_id)
  return _msg;
}
inline void Deposit::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Deposit.brokerage_id)
}

// -------------------------------------------------------------------

// Withdraw

// .Price price = 1;
inline bool Withdraw::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool Withdraw::has_price() const {
  return _internal_has_price();
}
inline const ::Price& Withdraw::_internal_price() const {
  const ::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& Withdraw::price() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Withdraw.price)
  return _internal_price();
}
inline void Withdraw::unsafe_arena_set_allocated_price(
    ::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Withdraw.price)
}
inline ::Price* Withdraw::release_price() {
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* Withdraw::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Withdraw.price)
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::Price* Withdraw::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::Price* Withdraw::mutable_price() {
  ::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Withdraw.price)
  return _msg;
}
inline void Withdraw::set_allocated_price(::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Withdraw.price)
}

// uint32 brokerage_id = 2;
inline void Withdraw::clear_brokerage_id() {
  _impl_.brokerage_id_ = 0u;
}
inline uint32_t Withdraw::_internal_brokerage_id() const {
  return _impl_.brokerage_id_;
}
inline uint32_t Withdraw::brokerage_id() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Withdraw.brokerage_id)
  return _internal_brokerage_id();
}
inline void Withdraw::_internal_set_brokerage_id(uint32_t value) {
  
  _impl_.brokerage_id_ = value;
}
inline void Withdraw::set_brokerage_id(uint32_t value) {
  _internal_set_brokerage_id(value);
  // @@protoc_insertion_point(field_set:bank_to_brokerage.Withdraw.brokerage_id)
}

// -------------------------------------------------------------------

// Update_BrokerageAccount_Req

// .Header header = 1;
inline bool Update_BrokerageAccount_Req::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Update_BrokerageAccount_Req::has_header() const {
  return _internal_has_header();
}
inline const ::Header& Update_BrokerageAccount_Req::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& Update_BrokerageAccount_Req::header() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Req.header)
  return _internal_header();
}
inline void Update_BrokerageAccount_Req::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Req.header)
}
inline ::Header* Update_BrokerageAccount_Req::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* Update_BrokerageAccount_Req::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Update_BrokerageAccount_Req.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* Update_BrokerageAccount_Req::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* Update_BrokerageAccount_Req::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Update_BrokerageAccount_Req.header)
  return _msg;
}
inline void Update_BrokerageAccount_Req::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Req.header)
}

// .bank_to_brokerage.Deposit deposit = 2;
inline bool Update_BrokerageAccount_Req::_internal_has_deposit() const {
  return payload_case() == kDeposit;
}
inline bool Update_BrokerageAccount_Req::has_deposit() const {
  return _internal_has_deposit();
}
inline void Update_BrokerageAccount_Req::set_has_deposit() {
  _impl_._oneof_case_[0] = kDeposit;
}
inline void Update_BrokerageAccount_Req::clear_deposit() {
  if (_internal_has_deposit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.deposit_;
    }
    clear_has_payload();
  }
}
inline ::bank_to_brokerage::Deposit* Update_BrokerageAccount_Req::release_deposit() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Update_BrokerageAccount_Req.deposit)
  if (_internal_has_deposit()) {
    clear_has_payload();
    ::bank_to_brokerage::Deposit* temp = _impl_.payload_.deposit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bank_to_brokerage::Deposit& Update_BrokerageAccount_Req::_internal_deposit() const {
  return _internal_has_deposit()
      ? *_impl_.payload_.deposit_
      : reinterpret_cast< ::bank_to_brokerage::Deposit&>(::bank_to_brokerage::_Deposit_default_instance_);
}
inline const ::bank_to_brokerage::Deposit& Update_BrokerageAccount_Req::deposit() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Req.deposit)
  return _internal_deposit();
}
inline ::bank_to_brokerage::Deposit* Update_BrokerageAccount_Req::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bank_to_brokerage.Update_BrokerageAccount_Req.deposit)
  if (_internal_has_deposit()) {
    clear_has_payload();
    ::bank_to_brokerage::Deposit* temp = _impl_.payload_.deposit_;
    _impl_.payload_.deposit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Update_BrokerageAccount_Req::unsafe_arena_set_allocated_deposit(::bank_to_brokerage::Deposit* deposit) {
  clear_payload();
  if (deposit) {
    set_has_deposit();
    _impl_.payload_.deposit_ = deposit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Req.deposit)
}
inline ::bank_to_brokerage::Deposit* Update_BrokerageAccount_Req::_internal_mutable_deposit() {
  if (!_internal_has_deposit()) {
    clear_payload();
    set_has_deposit();
    _impl_.payload_.deposit_ = CreateMaybeMessage< ::bank_to_brokerage::Deposit >(GetArenaForAllocation());
  }
  return _impl_.payload_.deposit_;
}
inline ::bank_to_brokerage::Deposit* Update_BrokerageAccount_Req::mutable_deposit() {
  ::bank_to_brokerage::Deposit* _msg = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Update_BrokerageAccount_Req.deposit)
  return _msg;
}

// .bank_to_brokerage.Withdraw withdraw = 3;
inline bool Update_BrokerageAccount_Req::_internal_has_withdraw() const {
  return payload_case() == kWithdraw;
}
inline bool Update_BrokerageAccount_Req::has_withdraw() const {
  return _internal_has_withdraw();
}
inline void Update_BrokerageAccount_Req::set_has_withdraw() {
  _impl_._oneof_case_[0] = kWithdraw;
}
inline void Update_BrokerageAccount_Req::clear_withdraw() {
  if (_internal_has_withdraw()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.withdraw_;
    }
    clear_has_payload();
  }
}
inline ::bank_to_brokerage::Withdraw* Update_BrokerageAccount_Req::release_withdraw() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Update_BrokerageAccount_Req.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_payload();
    ::bank_to_brokerage::Withdraw* temp = _impl_.payload_.withdraw_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bank_to_brokerage::Withdraw& Update_BrokerageAccount_Req::_internal_withdraw() const {
  return _internal_has_withdraw()
      ? *_impl_.payload_.withdraw_
      : reinterpret_cast< ::bank_to_brokerage::Withdraw&>(::bank_to_brokerage::_Withdraw_default_instance_);
}
inline const ::bank_to_brokerage::Withdraw& Update_BrokerageAccount_Req::withdraw() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Req.withdraw)
  return _internal_withdraw();
}
inline ::bank_to_brokerage::Withdraw* Update_BrokerageAccount_Req::unsafe_arena_release_withdraw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bank_to_brokerage.Update_BrokerageAccount_Req.withdraw)
  if (_internal_has_withdraw()) {
    clear_has_payload();
    ::bank_to_brokerage::Withdraw* temp = _impl_.payload_.withdraw_;
    _impl_.payload_.withdraw_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Update_BrokerageAccount_Req::unsafe_arena_set_allocated_withdraw(::bank_to_brokerage::Withdraw* withdraw) {
  clear_payload();
  if (withdraw) {
    set_has_withdraw();
    _impl_.payload_.withdraw_ = withdraw;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Req.withdraw)
}
inline ::bank_to_brokerage::Withdraw* Update_BrokerageAccount_Req::_internal_mutable_withdraw() {
  if (!_internal_has_withdraw()) {
    clear_payload();
    set_has_withdraw();
    _impl_.payload_.withdraw_ = CreateMaybeMessage< ::bank_to_brokerage::Withdraw >(GetArenaForAllocation());
  }
  return _impl_.payload_.withdraw_;
}
inline ::bank_to_brokerage::Withdraw* Update_BrokerageAccount_Req::mutable_withdraw() {
  ::bank_to_brokerage::Withdraw* _msg = _internal_mutable_withdraw();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Update_BrokerageAccount_Req.withdraw)
  return _msg;
}

inline bool Update_BrokerageAccount_Req::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Update_BrokerageAccount_Req::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Update_BrokerageAccount_Req::PayloadCase Update_BrokerageAccount_Req::payload_case() const {
  return Update_BrokerageAccount_Req::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Update_BrokerageAccount_Rep

// .Header header = 1;
inline bool Update_BrokerageAccount_Rep::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Update_BrokerageAccount_Rep::has_header() const {
  return _internal_has_header();
}
inline const ::Header& Update_BrokerageAccount_Rep::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& Update_BrokerageAccount_Rep::header() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Rep.header)
  return _internal_header();
}
inline void Update_BrokerageAccount_Rep::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Rep.header)
}
inline ::Header* Update_BrokerageAccount_Rep::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* Update_BrokerageAccount_Rep::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Update_BrokerageAccount_Rep.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* Update_BrokerageAccount_Rep::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* Update_BrokerageAccount_Rep::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Update_BrokerageAccount_Rep.header)
  return _msg;
}
inline void Update_BrokerageAccount_Rep::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Rep.header)
}

// .BrokerageId brokerage_id = 3;
inline bool Update_BrokerageAccount_Rep::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Update_BrokerageAccount_Rep::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Update_BrokerageAccount_Rep::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Update_BrokerageAccount_Rep::brokerage_id() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Rep.brokerage_id)
  return _internal_brokerage_id();
}
inline void Update_BrokerageAccount_Rep::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Rep.brokerage_id)
}
inline ::BrokerageId* Update_BrokerageAccount_Rep::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Update_BrokerageAccount_Rep::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:bank_to_brokerage.Update_BrokerageAccount_Rep.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Update_BrokerageAccount_Rep::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Update_BrokerageAccount_Rep::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:bank_to_brokerage.Update_BrokerageAccount_Rep.brokerage_id)
  return _msg;
}
inline void Update_BrokerageAccount_Rep::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:bank_to_brokerage.Update_BrokerageAccount_Rep.brokerage_id)
}

// .bank_to_brokerage.Update_BrokerageAccount_Rep.ResponseType response = 4;
inline void Update_BrokerageAccount_Rep::clear_response() {
  _impl_.response_ = 0;
}
inline ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType Update_BrokerageAccount_Rep::_internal_response() const {
  return static_cast< ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType >(_impl_.response_);
}
inline ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType Update_BrokerageAccount_Rep::response() const {
  // @@protoc_insertion_point(field_get:bank_to_brokerage.Update_BrokerageAccount_Rep.response)
  return _internal_response();
}
inline void Update_BrokerageAccount_Rep::_internal_set_response(::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType value) {
  
  _impl_.response_ = value;
}
inline void Update_BrokerageAccount_Rep::set_response(::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:bank_to_brokerage.Update_BrokerageAccount_Rep.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bank_to_brokerage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bank_to_brokerage::EndOfDaySummaryRequest_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank_to_brokerage::EndOfDaySummaryRequest_Operation>() {
  return ::bank_to_brokerage::EndOfDaySummaryRequest_Operation_descriptor();
}
template <> struct is_proto_enum< ::bank_to_brokerage::EndOfDayResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank_to_brokerage::EndOfDayResponse_Status>() {
  return ::bank_to_brokerage::EndOfDayResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType>() {
  return ::bank_to_brokerage::Update_BrokerageAccount_Rep_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bank_5fto_5fbrokerage_2eproto
