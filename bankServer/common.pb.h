// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bankServer/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bankServer_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bankServer_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bankServer_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bankServer_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bankServer_2fcommon_2eproto;
class BrokerageId;
struct BrokerageIdDefaultTypeInternal;
extern BrokerageIdDefaultTypeInternal _BrokerageId_default_instance_;
class BuySell;
struct BuySellDefaultTypeInternal;
extern BuySellDefaultTypeInternal _BuySell_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Price;
struct PriceDefaultTypeInternal;
extern PriceDefaultTypeInternal _Price_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BrokerageId* Arena::CreateMaybeMessage<::BrokerageId>(Arena*);
template<> ::BuySell* Arena::CreateMaybeMessage<::BuySell>(Arena*);
template<> ::Header* Arena::CreateMaybeMessage<::Header>(Arena*);
template<> ::Price* Arena::CreateMaybeMessage<::Price>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Magic : int {
  REGULATORY = 0,
  STOCK_EXCHANGE = 1,
  BANK = 2,
  BROKERAGE = 3,
  Magic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Magic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Magic_IsValid(int value);
constexpr Magic Magic_MIN = REGULATORY;
constexpr Magic Magic_MAX = BROKERAGE;
constexpr int Magic_ARRAYSIZE = Magic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Magic_descriptor();
template<typename T>
inline const std::string& Magic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Magic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Magic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Magic_descriptor(), enum_t_value);
}
inline bool Magic_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Magic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Magic>(
    Magic_descriptor(), name, value);
}
// ===================================================================

class Price final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Price) */ {
 public:
  inline Price() : Price(nullptr) {}
  ~Price() override;
  explicit PROTOBUF_CONSTEXPR Price(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Price(const Price& from);
  Price(Price&& from) noexcept
    : Price() {
    *this = ::std::move(from);
  }

  inline Price& operator=(const Price& from) {
    CopyFrom(from);
    return *this;
  }
  inline Price& operator=(Price&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Price& default_instance() {
    return *internal_default_instance();
  }
  static inline const Price* internal_default_instance() {
    return reinterpret_cast<const Price*>(
               &_Price_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Price& a, Price& b) {
    a.Swap(&b);
  }
  inline void Swap(Price* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Price* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Price* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Price>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Price& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Price& from) {
    Price::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Price* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Price";
  }
  protected:
  explicit Price(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDollarsFieldNumber = 1,
    kCentsFieldNumber = 2,
  };
  // uint32 dollars = 1;
  void clear_dollars();
  uint32_t dollars() const;
  void set_dollars(uint32_t value);
  private:
  uint32_t _internal_dollars() const;
  void _internal_set_dollars(uint32_t value);
  public:

  // uint32 cents = 2;
  void clear_cents();
  uint32_t cents() const;
  void set_cents(uint32_t value);
  private:
  uint32_t _internal_cents() const;
  void _internal_set_cents(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Price)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t dollars_;
    uint32_t cents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BrokerageId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BrokerageId) */ {
 public:
  inline BrokerageId() : BrokerageId(nullptr) {}
  ~BrokerageId() override;
  explicit PROTOBUF_CONSTEXPR BrokerageId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrokerageId(const BrokerageId& from);
  BrokerageId(BrokerageId&& from) noexcept
    : BrokerageId() {
    *this = ::std::move(from);
  }

  inline BrokerageId& operator=(const BrokerageId& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrokerageId& operator=(BrokerageId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrokerageId& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrokerageId* internal_default_instance() {
    return reinterpret_cast<const BrokerageId*>(
               &_BrokerageId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrokerageId& a, BrokerageId& b) {
    a.Swap(&b);
  }
  inline void Swap(BrokerageId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrokerageId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrokerageId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrokerageId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrokerageId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrokerageId& from) {
    BrokerageId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerageId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BrokerageId";
  }
  protected:
  explicit BrokerageId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerageFieldNumber = 1,
    kTraderFieldNumber = 2,
  };
  // uint32 brokerage = 1;
  void clear_brokerage();
  uint32_t brokerage() const;
  void set_brokerage(uint32_t value);
  private:
  uint32_t _internal_brokerage() const;
  void _internal_set_brokerage(uint32_t value);
  public:

  // uint32 trader = 2;
  void clear_trader();
  uint32_t trader() const;
  void set_trader(uint32_t value);
  private:
  uint32_t _internal_trader() const;
  void _internal_set_trader(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BrokerageId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t brokerage_;
    uint32_t trader_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMagicFieldNumber = 2,
    kSerialFieldNumber = 3,
  };
  // uint32 version = 1;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // .Magic magic = 2;
  void clear_magic();
  ::Magic magic() const;
  void set_magic(::Magic value);
  private:
  ::Magic _internal_magic() const;
  void _internal_set_magic(::Magic value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  uint32_t serial() const;
  void set_serial(uint32_t value);
  private:
  uint32_t _internal_serial() const;
  void _internal_set_serial(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t version_;
    int magic_;
    uint32_t serial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BuySell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuySell) */ {
 public:
  inline BuySell() : BuySell(nullptr) {}
  ~BuySell() override;
  explicit PROTOBUF_CONSTEXPR BuySell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuySell(const BuySell& from);
  BuySell(BuySell&& from) noexcept
    : BuySell() {
    *this = ::std::move(from);
  }

  inline BuySell& operator=(const BuySell& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuySell& operator=(BuySell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuySell& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuySell* internal_default_instance() {
    return reinterpret_cast<const BuySell*>(
               &_BuySell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuySell& a, BuySell& b) {
    a.Swap(&b);
  }
  inline void Swap(BuySell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuySell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuySell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuySell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuySell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuySell& from) {
    BuySell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuySell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuySell";
  }
  protected:
  explicit BuySell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockTickerFieldNumber = 3,
    kPriceFieldNumber = 2,
    kBrokerageIdFieldNumber = 4,
    kQuantityFieldNumber = 1,
    kTransactionIdFieldNumber = 5,
    kTipFlagFieldNumber = 6,
    kHourFieldNumber = 7,
    kDayFieldNumber = 8,
  };
  // string stock_ticker = 3;
  void clear_stock_ticker();
  const std::string& stock_ticker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stock_ticker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stock_ticker();
  PROTOBUF_NODISCARD std::string* release_stock_ticker();
  void set_allocated_stock_ticker(std::string* stock_ticker);
  private:
  const std::string& _internal_stock_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_ticker(const std::string& value);
  std::string* _internal_mutable_stock_ticker();
  public:

  // .Price price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::Price& price() const;
  PROTOBUF_NODISCARD ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);
  private:
  const ::Price& _internal_price() const;
  ::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::Price* price);
  ::Price* unsafe_arena_release_price();

  // .BrokerageId brokerage_id = 4;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // uint32 quantity = 1;
  void clear_quantity();
  uint32_t quantity() const;
  void set_quantity(uint32_t value);
  private:
  uint32_t _internal_quantity() const;
  void _internal_set_quantity(uint32_t value);
  public:

  // uint32 transaction_id = 5;
  void clear_transaction_id();
  uint32_t transaction_id() const;
  void set_transaction_id(uint32_t value);
  private:
  uint32_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint32_t value);
  public:

  // bool tip_flag = 6;
  void clear_tip_flag();
  bool tip_flag() const;
  void set_tip_flag(bool value);
  private:
  bool _internal_tip_flag() const;
  void _internal_set_tip_flag(bool value);
  public:

  // uint32 hour = 7;
  void clear_hour();
  uint32_t hour() const;
  void set_hour(uint32_t value);
  private:
  uint32_t _internal_hour() const;
  void _internal_set_hour(uint32_t value);
  public:

  // uint32 day = 8;
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BuySell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_ticker_;
    ::Price* price_;
    ::BrokerageId* brokerage_id_;
    uint32_t quantity_;
    uint32_t transaction_id_;
    bool tip_flag_;
    uint32_t hour_;
    uint32_t day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bankServer_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Price

// uint32 dollars = 1;
inline void Price::clear_dollars() {
  _impl_.dollars_ = 0u;
}
inline uint32_t Price::_internal_dollars() const {
  return _impl_.dollars_;
}
inline uint32_t Price::dollars() const {
  // @@protoc_insertion_point(field_get:Price.dollars)
  return _internal_dollars();
}
inline void Price::_internal_set_dollars(uint32_t value) {
  
  _impl_.dollars_ = value;
}
inline void Price::set_dollars(uint32_t value) {
  _internal_set_dollars(value);
  // @@protoc_insertion_point(field_set:Price.dollars)
}

// uint32 cents = 2;
inline void Price::clear_cents() {
  _impl_.cents_ = 0u;
}
inline uint32_t Price::_internal_cents() const {
  return _impl_.cents_;
}
inline uint32_t Price::cents() const {
  // @@protoc_insertion_point(field_get:Price.cents)
  return _internal_cents();
}
inline void Price::_internal_set_cents(uint32_t value) {
  
  _impl_.cents_ = value;
}
inline void Price::set_cents(uint32_t value) {
  _internal_set_cents(value);
  // @@protoc_insertion_point(field_set:Price.cents)
}

// -------------------------------------------------------------------

// BrokerageId

// uint32 brokerage = 1;
inline void BrokerageId::clear_brokerage() {
  _impl_.brokerage_ = 0u;
}
inline uint32_t BrokerageId::_internal_brokerage() const {
  return _impl_.brokerage_;
}
inline uint32_t BrokerageId::brokerage() const {
  // @@protoc_insertion_point(field_get:BrokerageId.brokerage)
  return _internal_brokerage();
}
inline void BrokerageId::_internal_set_brokerage(uint32_t value) {
  
  _impl_.brokerage_ = value;
}
inline void BrokerageId::set_brokerage(uint32_t value) {
  _internal_set_brokerage(value);
  // @@protoc_insertion_point(field_set:BrokerageId.brokerage)
}

// uint32 trader = 2;
inline void BrokerageId::clear_trader() {
  _impl_.trader_ = 0u;
}
inline uint32_t BrokerageId::_internal_trader() const {
  return _impl_.trader_;
}
inline uint32_t BrokerageId::trader() const {
  // @@protoc_insertion_point(field_get:BrokerageId.trader)
  return _internal_trader();
}
inline void BrokerageId::_internal_set_trader(uint32_t value) {
  
  _impl_.trader_ = value;
}
inline void BrokerageId::set_trader(uint32_t value) {
  _internal_set_trader(value);
  // @@protoc_insertion_point(field_set:BrokerageId.trader)
}

// -------------------------------------------------------------------

// Header

// uint32 version = 1;
inline void Header::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t Header::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t Header::version() const {
  // @@protoc_insertion_point(field_get:Header.version)
  return _internal_version();
}
inline void Header::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void Header::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Header.version)
}

// .Magic magic = 2;
inline void Header::clear_magic() {
  _impl_.magic_ = 0;
}
inline ::Magic Header::_internal_magic() const {
  return static_cast< ::Magic >(_impl_.magic_);
}
inline ::Magic Header::magic() const {
  // @@protoc_insertion_point(field_get:Header.magic)
  return _internal_magic();
}
inline void Header::_internal_set_magic(::Magic value) {
  
  _impl_.magic_ = value;
}
inline void Header::set_magic(::Magic value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:Header.magic)
}

// uint32 serial = 3;
inline void Header::clear_serial() {
  _impl_.serial_ = 0u;
}
inline uint32_t Header::_internal_serial() const {
  return _impl_.serial_;
}
inline uint32_t Header::serial() const {
  // @@protoc_insertion_point(field_get:Header.serial)
  return _internal_serial();
}
inline void Header::_internal_set_serial(uint32_t value) {
  
  _impl_.serial_ = value;
}
inline void Header::set_serial(uint32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:Header.serial)
}

// -------------------------------------------------------------------

// BuySell

// uint32 quantity = 1;
inline void BuySell::clear_quantity() {
  _impl_.quantity_ = 0u;
}
inline uint32_t BuySell::_internal_quantity() const {
  return _impl_.quantity_;
}
inline uint32_t BuySell::quantity() const {
  // @@protoc_insertion_point(field_get:BuySell.quantity)
  return _internal_quantity();
}
inline void BuySell::_internal_set_quantity(uint32_t value) {
  
  _impl_.quantity_ = value;
}
inline void BuySell::set_quantity(uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:BuySell.quantity)
}

// .Price price = 2;
inline bool BuySell::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool BuySell::has_price() const {
  return _internal_has_price();
}
inline void BuySell::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
inline const ::Price& BuySell::_internal_price() const {
  const ::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::Price&>(
      ::_Price_default_instance_);
}
inline const ::Price& BuySell::price() const {
  // @@protoc_insertion_point(field_get:BuySell.price)
  return _internal_price();
}
inline void BuySell::unsafe_arena_set_allocated_price(
    ::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuySell.price)
}
inline ::Price* BuySell::release_price() {
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Price* BuySell::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:BuySell.price)
  
  ::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::Price* BuySell::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::Price* BuySell::mutable_price() {
  ::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:BuySell.price)
  return _msg;
}
inline void BuySell::set_allocated_price(::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:BuySell.price)
}

// string stock_ticker = 3;
inline void BuySell::clear_stock_ticker() {
  _impl_.stock_ticker_.ClearToEmpty();
}
inline const std::string& BuySell::stock_ticker() const {
  // @@protoc_insertion_point(field_get:BuySell.stock_ticker)
  return _internal_stock_ticker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuySell::set_stock_ticker(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stock_ticker_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BuySell.stock_ticker)
}
inline std::string* BuySell::mutable_stock_ticker() {
  std::string* _s = _internal_mutable_stock_ticker();
  // @@protoc_insertion_point(field_mutable:BuySell.stock_ticker)
  return _s;
}
inline const std::string& BuySell::_internal_stock_ticker() const {
  return _impl_.stock_ticker_.Get();
}
inline void BuySell::_internal_set_stock_ticker(const std::string& value) {
  
  _impl_.stock_ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* BuySell::_internal_mutable_stock_ticker() {
  
  return _impl_.stock_ticker_.Mutable(GetArenaForAllocation());
}
inline std::string* BuySell::release_stock_ticker() {
  // @@protoc_insertion_point(field_release:BuySell.stock_ticker)
  return _impl_.stock_ticker_.Release();
}
inline void BuySell::set_allocated_stock_ticker(std::string* stock_ticker) {
  if (stock_ticker != nullptr) {
    
  } else {
    
  }
  _impl_.stock_ticker_.SetAllocated(stock_ticker, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stock_ticker_.IsDefault()) {
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BuySell.stock_ticker)
}

// .BrokerageId brokerage_id = 4;
inline bool BuySell::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool BuySell::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline void BuySell::clear_brokerage_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
}
inline const ::BrokerageId& BuySell::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& BuySell::brokerage_id() const {
  // @@protoc_insertion_point(field_get:BuySell.brokerage_id)
  return _internal_brokerage_id();
}
inline void BuySell::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuySell.brokerage_id)
}
inline ::BrokerageId* BuySell::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* BuySell::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:BuySell.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* BuySell::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* BuySell::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:BuySell.brokerage_id)
  return _msg;
}
inline void BuySell::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.brokerage_id_;
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(brokerage_id);
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:BuySell.brokerage_id)
}

// uint32 transaction_id = 5;
inline void BuySell::clear_transaction_id() {
  _impl_.transaction_id_ = 0u;
}
inline uint32_t BuySell::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint32_t BuySell::transaction_id() const {
  // @@protoc_insertion_point(field_get:BuySell.transaction_id)
  return _internal_transaction_id();
}
inline void BuySell::_internal_set_transaction_id(uint32_t value) {
  
  _impl_.transaction_id_ = value;
}
inline void BuySell::set_transaction_id(uint32_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:BuySell.transaction_id)
}

// bool tip_flag = 6;
inline void BuySell::clear_tip_flag() {
  _impl_.tip_flag_ = false;
}
inline bool BuySell::_internal_tip_flag() const {
  return _impl_.tip_flag_;
}
inline bool BuySell::tip_flag() const {
  // @@protoc_insertion_point(field_get:BuySell.tip_flag)
  return _internal_tip_flag();
}
inline void BuySell::_internal_set_tip_flag(bool value) {
  
  _impl_.tip_flag_ = value;
}
inline void BuySell::set_tip_flag(bool value) {
  _internal_set_tip_flag(value);
  // @@protoc_insertion_point(field_set:BuySell.tip_flag)
}

// uint32 hour = 7;
inline void BuySell::clear_hour() {
  _impl_.hour_ = 0u;
}
inline uint32_t BuySell::_internal_hour() const {
  return _impl_.hour_;
}
inline uint32_t BuySell::hour() const {
  // @@protoc_insertion_point(field_get:BuySell.hour)
  return _internal_hour();
}
inline void BuySell::_internal_set_hour(uint32_t value) {
  
  _impl_.hour_ = value;
}
inline void BuySell::set_hour(uint32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:BuySell.hour)
}

// uint32 day = 8;
inline void BuySell::clear_day() {
  _impl_.day_ = 0u;
}
inline uint32_t BuySell::_internal_day() const {
  return _impl_.day_;
}
inline uint32_t BuySell::day() const {
  // @@protoc_insertion_point(field_get:BuySell.day)
  return _internal_day();
}
inline void BuySell::_internal_set_day(uint32_t value) {
  
  _impl_.day_ = value;
}
inline void BuySell::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:BuySell.day)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Magic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Magic>() {
  return ::Magic_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bankServer_2fcommon_2eproto
