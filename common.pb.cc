// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BrokerageId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Price;
}  // namespace protobuf_common_2eproto
class PriceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Price>
      _instance;
} _Price_default_instance_;
class BrokerageIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrokerageId>
      _instance;
} _BrokerageId_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class BuySellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuySell>
      _instance;
} _BuySell_default_instance_;
namespace protobuf_common_2eproto {
static void InitDefaultsPrice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Price_default_instance_;
    new (ptr) ::Price();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Price::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Price =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPrice}, {}};

static void InitDefaultsBrokerageId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BrokerageId_default_instance_;
    new (ptr) ::BrokerageId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrokerageId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BrokerageId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrokerageId}, {}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Header_default_instance_;
    new (ptr) ::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader}, {}};

static void InitDefaultsBuySell() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuySell_default_instance_;
    new (ptr) ::BuySell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuySell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BuySell =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBuySell}, {
      &protobuf_common_2eproto::scc_info_Price.base,
      &protobuf_common_2eproto::scc_info_BrokerageId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Price.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrokerageId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuySell.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Price, dollars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Price, cents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BrokerageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BrokerageId, brokerage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BrokerageId, trader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Header, magic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Header, serial_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, stock_ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, brokerage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, tip_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::BuySell, day_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Price)},
  { 7, -1, sizeof(::BrokerageId)},
  { 14, -1, sizeof(::Header)},
  { 22, -1, sizeof(::BuySell)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Price_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BrokerageId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_BuySell_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014common.proto\"\'\n\005Price\022\017\n\007dollars\030\001 \001(\r"
      "\022\r\n\005cents\030\002 \001(\r\"0\n\013BrokerageId\022\021\n\tbroker"
      "age\030\001 \001(\r\022\016\n\006trader\030\002 \001(\r\"@\n\006Header\022\017\n\007v"
      "ersion\030\001 \001(\r\022\025\n\005magic\030\002 \001(\0162\006.Magic\022\016\n\006s"
      "erial\030\003 \001(\r\"\261\001\n\007BuySell\022\020\n\010quantity\030\001 \001("
      "\r\022\025\n\005price\030\002 \001(\0132\006.Price\022\024\n\014stock_ticker"
      "\030\003 \001(\t\022\"\n\014brokerage_id\030\004 \001(\0132\014.Brokerage"
      "Id\022\026\n\016transaction_id\030\005 \001(\r\022\020\n\010tip_flag\030\006"
      " \001(\010\022\014\n\004hour\030\007 \001(\r\022\013\n\003day\030\010 \001(\r*D\n\005Magic"
      "\022\016\n\nREGULATORY\020\000\022\022\n\016STOCK_EXCHANGE\020\001\022\010\n\004"
      "BANK\020\002\022\r\n\tBROKERAGE\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_2eproto
const ::google::protobuf::EnumDescriptor* Magic_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[0];
}
bool Magic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Price::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Price::kDollarsFieldNumber;
const int Price::kCentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Price::Price()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_Price.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Price)
}
Price::Price(const Price& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dollars_, &from.dollars_,
    static_cast<size_t>(reinterpret_cast<char*>(&cents_) -
    reinterpret_cast<char*>(&dollars_)) + sizeof(cents_));
  // @@protoc_insertion_point(copy_constructor:Price)
}

void Price::SharedCtor() {
  ::memset(&dollars_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cents_) -
      reinterpret_cast<char*>(&dollars_)) + sizeof(cents_));
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:Price)
  SharedDtor();
}

void Price::SharedDtor() {
}

void Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Price::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Price& Price::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_Price.base);
  return *internal_default_instance();
}


void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dollars_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cents_) -
      reinterpret_cast<char*>(&dollars_)) + sizeof(cents_));
  _internal_metadata_.Clear();
}

bool Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Price)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dollars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dollars_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Price)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Price)
  return false;
#undef DO_
}

void Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dollars = 1;
  if (this->dollars() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dollars(), output);
  }

  // uint32 cents = 2;
  if (this->cents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cents(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Price)
}

::google::protobuf::uint8* Price::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Price)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dollars = 1;
  if (this->dollars() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dollars(), target);
  }

  // uint32 cents = 2;
  if (this->cents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cents(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Price)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dollars = 1;
  if (this->dollars() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dollars());
  }

  // uint32 cents = 2;
  if (this->cents() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cents());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Price::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Price)
  GOOGLE_DCHECK_NE(&from, this);
  const Price* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Price>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Price)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Price)
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dollars() != 0) {
    set_dollars(from.dollars());
  }
  if (from.cents() != 0) {
    set_cents(from.cents());
  }
}

void Price::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::Swap(Price* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Price::InternalSwap(Price* other) {
  using std::swap;
  swap(dollars_, other->dollars_);
  swap(cents_, other->cents_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Price::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BrokerageId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrokerageId::kBrokerageFieldNumber;
const int BrokerageId::kTraderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrokerageId::BrokerageId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_BrokerageId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrokerageId)
}
BrokerageId::BrokerageId(const BrokerageId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brokerage_, &from.brokerage_,
    static_cast<size_t>(reinterpret_cast<char*>(&trader_) -
    reinterpret_cast<char*>(&brokerage_)) + sizeof(trader_));
  // @@protoc_insertion_point(copy_constructor:BrokerageId)
}

void BrokerageId::SharedCtor() {
  ::memset(&brokerage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trader_) -
      reinterpret_cast<char*>(&brokerage_)) + sizeof(trader_));
}

BrokerageId::~BrokerageId() {
  // @@protoc_insertion_point(destructor:BrokerageId)
  SharedDtor();
}

void BrokerageId::SharedDtor() {
}

void BrokerageId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BrokerageId::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrokerageId& BrokerageId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_BrokerageId.base);
  return *internal_default_instance();
}


void BrokerageId::Clear() {
// @@protoc_insertion_point(message_clear_start:BrokerageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brokerage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trader_) -
      reinterpret_cast<char*>(&brokerage_)) + sizeof(trader_));
  _internal_metadata_.Clear();
}

bool BrokerageId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrokerageId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 brokerage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brokerage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrokerageId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrokerageId)
  return false;
#undef DO_
}

void BrokerageId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrokerageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brokerage = 1;
  if (this->brokerage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->brokerage(), output);
  }

  // uint32 trader = 2;
  if (this->trader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trader(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BrokerageId)
}

::google::protobuf::uint8* BrokerageId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BrokerageId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brokerage = 1;
  if (this->brokerage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->brokerage(), target);
  }

  // uint32 trader = 2;
  if (this->trader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trader(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrokerageId)
  return target;
}

size_t BrokerageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrokerageId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 brokerage = 1;
  if (this->brokerage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brokerage());
  }

  // uint32 trader = 2;
  if (this->trader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trader());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrokerageId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrokerageId)
  GOOGLE_DCHECK_NE(&from, this);
  const BrokerageId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrokerageId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrokerageId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrokerageId)
    MergeFrom(*source);
  }
}

void BrokerageId::MergeFrom(const BrokerageId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrokerageId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brokerage() != 0) {
    set_brokerage(from.brokerage());
  }
  if (from.trader() != 0) {
    set_trader(from.trader());
  }
}

void BrokerageId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrokerageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrokerageId::CopyFrom(const BrokerageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrokerageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrokerageId::IsInitialized() const {
  return true;
}

void BrokerageId::Swap(BrokerageId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrokerageId::InternalSwap(BrokerageId* other) {
  using std::swap;
  swap(brokerage_, other->brokerage_);
  swap(trader_, other->trader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BrokerageId::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kMagicFieldNumber;
const int Header::kSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&version_)) + sizeof(serial_));
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&version_)) + sizeof(serial_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&version_)) + sizeof(serial_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Magic magic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_magic(static_cast< ::Magic >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 serial = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // .Magic magic = 2;
  if (this->magic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->magic(), output);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serial(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // .Magic magic = 2;
  if (this->magic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->magic(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serial(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // .Magic magic = 2;
  if (this->magic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->magic());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serial());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(magic_, other->magic_);
  swap(serial_, other->serial_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuySell::InitAsDefaultInstance() {
  ::_BuySell_default_instance_._instance.get_mutable()->price_ = const_cast< ::Price*>(
      ::Price::internal_default_instance());
  ::_BuySell_default_instance_._instance.get_mutable()->brokerage_id_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuySell::kQuantityFieldNumber;
const int BuySell::kPriceFieldNumber;
const int BuySell::kStockTickerFieldNumber;
const int BuySell::kBrokerageIdFieldNumber;
const int BuySell::kTransactionIdFieldNumber;
const int BuySell::kTipFlagFieldNumber;
const int BuySell::kHourFieldNumber;
const int BuySell::kDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuySell::BuySell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_BuySell.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuySell)
}
BuySell::BuySell(const BuySell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stock_ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stock_ticker().size() > 0) {
    stock_ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_ticker_);
  }
  if (from.has_price()) {
    price_ = new ::Price(*from.price_);
  } else {
    price_ = NULL;
  }
  if (from.has_brokerage_id()) {
    brokerage_id_ = new ::BrokerageId(*from.brokerage_id_);
  } else {
    brokerage_id_ = NULL;
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:BuySell)
}

void BuySell::SharedCtor() {
  stock_ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&price_)) + sizeof(day_));
}

BuySell::~BuySell() {
  // @@protoc_insertion_point(destructor:BuySell)
  SharedDtor();
}

void BuySell::SharedDtor() {
  stock_ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete brokerage_id_;
}

void BuySell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BuySell::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuySell& BuySell::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_BuySell.base);
  return *internal_default_instance();
}


void BuySell::Clear() {
// @@protoc_insertion_point(message_clear_start:BuySell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stock_ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && price_ != NULL) {
    delete price_;
  }
  price_ = NULL;
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

bool BuySell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BuySell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 quantity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Price price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stock_ticker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "BuySell.stock_ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BrokerageId brokerage_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transaction_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tip_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tip_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hour = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BuySell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BuySell)
  return false;
#undef DO_
}

void BuySell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BuySell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 quantity = 1;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quantity(), output);
  }

  // .Price price = 2;
  if (this->has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_price(), output);
  }

  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BuySell.stock_ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stock_ticker(), output);
  }

  // .BrokerageId brokerage_id = 4;
  if (this->has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_brokerage_id(), output);
  }

  // uint32 transaction_id = 5;
  if (this->transaction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->transaction_id(), output);
  }

  // bool tip_flag = 6;
  if (this->tip_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tip_flag(), output);
  }

  // uint32 hour = 7;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hour(), output);
  }

  // uint32 day = 8;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->day(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:BuySell)
}

::google::protobuf::uint8* BuySell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BuySell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 quantity = 1;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quantity(), target);
  }

  // .Price price = 2;
  if (this->has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_price(), deterministic, target);
  }

  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "BuySell.stock_ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_ticker(), target);
  }

  // .BrokerageId brokerage_id = 4;
  if (this->has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_brokerage_id(), deterministic, target);
  }

  // uint32 transaction_id = 5;
  if (this->transaction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->transaction_id(), target);
  }

  // bool tip_flag = 6;
  if (this->tip_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tip_flag(), target);
  }

  // uint32 hour = 7;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hour(), target);
  }

  // uint32 day = 8;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->day(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuySell)
  return target;
}

size_t BuySell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuySell)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_ticker());
  }

  // .Price price = 2;
  if (this->has_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .BrokerageId brokerage_id = 4;
  if (this->has_brokerage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_);
  }

  // uint32 quantity = 1;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quantity());
  }

  // uint32 transaction_id = 5;
  if (this->transaction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transaction_id());
  }

  // bool tip_flag = 6;
  if (this->tip_flag() != 0) {
    total_size += 1 + 1;
  }

  // uint32 hour = 7;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 day = 8;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuySell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuySell)
  GOOGLE_DCHECK_NE(&from, this);
  const BuySell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuySell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuySell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuySell)
    MergeFrom(*source);
  }
}

void BuySell::MergeFrom(const BuySell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuySell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stock_ticker().size() > 0) {

    stock_ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_ticker_);
  }
  if (from.has_price()) {
    mutable_price()->::Price::MergeFrom(from.price());
  }
  if (from.has_brokerage_id()) {
    mutable_brokerage_id()->::BrokerageId::MergeFrom(from.brokerage_id());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.transaction_id() != 0) {
    set_transaction_id(from.transaction_id());
  }
  if (from.tip_flag() != 0) {
    set_tip_flag(from.tip_flag());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
}

void BuySell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuySell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuySell::CopyFrom(const BuySell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuySell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySell::IsInitialized() const {
  return true;
}

void BuySell::Swap(BuySell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuySell::InternalSwap(BuySell* other) {
  using std::swap;
  stock_ticker_.Swap(&other->stock_ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(brokerage_id_, other->brokerage_id_);
  swap(quantity_, other->quantity_);
  swap(transaction_id_, other->transaction_id_);
  swap(tip_flag_, other->tip_flag_);
  swap(hour_, other->hour_);
  swap(day_, other->day_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BuySell::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Price* Arena::CreateMaybeMessage< ::Price >(Arena* arena) {
  return Arena::CreateInternal< ::Price >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BrokerageId* Arena::CreateMaybeMessage< ::BrokerageId >(Arena* arena) {
  return Arena::CreateInternal< ::BrokerageId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Header* Arena::CreateMaybeMessage< ::Header >(Arena* arena) {
  return Arena::CreateInternal< ::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::BuySell* Arena::CreateMaybeMessage< ::BuySell >(Arena* arena) {
  return Arena::CreateInternal< ::BuySell >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
