// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_exchange.proto

#include "stock_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace stock_exchange {
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_)*/{}
  , /*decltype(_impl_.sells_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.brokerage_id_)*/nullptr
  , /*decltype(_impl_.transaction_id_)*/0u
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR BuySpec::BuySpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brokerage_id_)*/0u
  , /*decltype(_impl_.transaction_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuySpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuySpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuySpecDefaultTypeInternal() {}
  union {
    BuySpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuySpecDefaultTypeInternal _BuySpec_default_instance_;
PROTOBUF_CONSTEXPR Cancel::Cancel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brokerage_id_)*/0u
  , /*decltype(_impl_.transaction_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelDefaultTypeInternal() {}
  union {
    Cancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelDefaultTypeInternal _Cancel_default_instance_;
PROTOBUF_CONSTEXPR Query::Query(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stock_ticker_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.brokerage_id_)*/nullptr
  , /*decltype(_impl_.brokerage_id_look_)*/nullptr
  , /*decltype(_impl_.buy_or_sell_)*/0
  , /*decltype(_impl_.filters_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDefaultTypeInternal() {}
  union {
    Query _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace stock_exchange
static ::_pb::Metadata file_level_metadata_stock_5fexchange_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_stock_5fexchange_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stock_5fexchange_2eproto = nullptr;

const uint32_t TableStruct_stock_5fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Packet, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Packet, _impl_.header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Packet, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.transaction_id_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.buys_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Response, _impl_.sells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::BuySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::BuySpec, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::BuySpec, _impl_.transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Cancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Cancel, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Cancel, _impl_.transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _impl_.brokerage_id_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _impl_.brokerage_id_look_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _impl_.stock_ticker_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _impl_.buy_or_sell_),
  PROTOBUF_FIELD_OFFSET(::stock_exchange::Query, _impl_.filters_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::stock_exchange::Packet)},
  { 13, -1, -1, sizeof(::stock_exchange::Response)},
  { 25, -1, -1, sizeof(::stock_exchange::BuySpec)},
  { 33, -1, -1, sizeof(::stock_exchange::Cancel)},
  { 41, -1, -1, sizeof(::stock_exchange::Query)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::stock_exchange::_Packet_default_instance_._instance,
  &::stock_exchange::_Response_default_instance_._instance,
  &::stock_exchange::_BuySpec_default_instance_._instance,
  &::stock_exchange::_Cancel_default_instance_._instance,
  &::stock_exchange::_Query_default_instance_._instance,
};

const char descriptor_table_protodef_stock_5fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024stock_exchange.proto\022\016stock_exchange\032\014"
  "common.proto\"\336\001\n\006Packet\022\027\n\006header\030\001 \001(\0132"
  "\007.Header\022\027\n\003buy\030\002 \001(\0132\010.BuySellH\000\022\030\n\004sel"
  "l\030\003 \001(\0132\010.BuySellH\000\022+\n\010buy_spec\030\004 \001(\0132\027."
  "stock_exchange.BuySpecH\000\022&\n\005query\030\005 \001(\0132"
  "\025.stock_exchange.QueryH\000\022(\n\006cancel\030\006 \001(\013"
  "2\026.stock_exchange.CancelH\000B\t\n\007payload\"\324\002"
  "\n\010Response\022\027\n\006header\030\001 \001(\0132\007.Header\022\026\n\016t"
  "ransaction_id\030\002 \001(\r\022\"\n\014brokerage_id\030\003 \001("
  "\0132\014.BrokerageId\0227\n\010response\030\004 \001(\0162%.stoc"
  "k_exchange.Response.ResponseType\022\026\n\004buys"
  "\030\005 \003(\0132\010.BuySell\022\027\n\005sells\030\006 \003(\0132\010.BuySel"
  "l\"\210\001\n\014ResponseType\022\013\n\007INVALID\020\000\022\025\n\021MALFO"
  "RMED_MESSAGE\020\001\022\032\n\026INVALID_TRANSACTION_ID"
  "\020\002\022\030\n\024INVALID_BROKERAGE_ID\020\003\022\021\n\rINVALID_"
  "PRICE\020\004\022\013\n\007SUCCESS\020\005\"7\n\007BuySpec\022\024\n\014broke"
  "rage_id\030\001 \001(\r\022\026\n\016transaction_id\030\002 \001(\r\"6\n"
  "\006Cancel\022\024\n\014brokerage_id\030\001 \001(\r\022\026\n\016transac"
  "tion_id\030\002 \001(\r\"\342\001\n\005Query\022\"\n\014brokerage_id\030"
  "\001 \001(\0132\014.BrokerageId\022\'\n\021brokerage_id_look"
  "\030\002 \001(\0132\014.BrokerageId\022\024\n\014stock_ticker\030\003 \001"
  "(\t\0224\n\013buy_or_sell\030\004 \001(\0162\037.stock_exchange"
  ".Query.BuyOrSell\022\017\n\007filters\030\005 \001(\r\"/\n\tBuy"
  "OrSell\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001\022\017\n\013BUY_OR_SELL"
  "\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_stock_5fexchange_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_stock_5fexchange_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stock_5fexchange_2eproto = {
    false, false, 970, descriptor_table_protodef_stock_5fexchange_2eproto,
    "stock_exchange.proto",
    &descriptor_table_stock_5fexchange_2eproto_once, descriptor_table_stock_5fexchange_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_stock_5fexchange_2eproto::offsets,
    file_level_metadata_stock_5fexchange_2eproto, file_level_enum_descriptors_stock_5fexchange_2eproto,
    file_level_service_descriptors_stock_5fexchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stock_5fexchange_2eproto_getter() {
  return &descriptor_table_stock_5fexchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stock_5fexchange_2eproto(&descriptor_table_stock_5fexchange_2eproto);
namespace stock_exchange {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fexchange_2eproto);
  return file_level_enum_descriptors_stock_5fexchange_2eproto[0];
}
bool Response_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Response_ResponseType Response::INVALID;
constexpr Response_ResponseType Response::MALFORMED_MESSAGE;
constexpr Response_ResponseType Response::INVALID_TRANSACTION_ID;
constexpr Response_ResponseType Response::INVALID_BROKERAGE_ID;
constexpr Response_ResponseType Response::INVALID_PRICE;
constexpr Response_ResponseType Response::SUCCESS;
constexpr Response_ResponseType Response::ResponseType_MIN;
constexpr Response_ResponseType Response::ResponseType_MAX;
constexpr int Response::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Query_BuyOrSell_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stock_5fexchange_2eproto);
  return file_level_enum_descriptors_stock_5fexchange_2eproto[1];
}
bool Query_BuyOrSell_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Query_BuyOrSell Query::BUY;
constexpr Query_BuyOrSell Query::SELL;
constexpr Query_BuyOrSell Query::BUY_OR_SELL;
constexpr Query_BuyOrSell Query::BuyOrSell_MIN;
constexpr Query_BuyOrSell Query::BuyOrSell_MAX;
constexpr int Query::BuyOrSell_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Packet::_Internal {
 public:
  static const ::Header& header(const Packet* msg);
  static const ::BuySell& buy(const Packet* msg);
  static const ::BuySell& sell(const Packet* msg);
  static const ::stock_exchange::BuySpec& buy_spec(const Packet* msg);
  static const ::stock_exchange::Query& query(const Packet* msg);
  static const ::stock_exchange::Cancel& cancel(const Packet* msg);
};

const ::Header&
Packet::_Internal::header(const Packet* msg) {
  return *msg->_impl_.header_;
}
const ::BuySell&
Packet::_Internal::buy(const Packet* msg) {
  return *msg->_impl_.payload_.buy_;
}
const ::BuySell&
Packet::_Internal::sell(const Packet* msg) {
  return *msg->_impl_.payload_.sell_;
}
const ::stock_exchange::BuySpec&
Packet::_Internal::buy_spec(const Packet* msg) {
  return *msg->_impl_.payload_.buy_spec_;
}
const ::stock_exchange::Query&
Packet::_Internal::query(const Packet* msg) {
  return *msg->_impl_.payload_.query_;
}
const ::stock_exchange::Cancel&
Packet::_Internal::cancel(const Packet* msg) {
  return *msg->_impl_.payload_.cancel_;
}
void Packet::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void Packet::set_allocated_buy(::BuySell* buy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (buy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buy));
    if (message_arena != submessage_arena) {
      buy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buy, submessage_arena);
    }
    set_has_buy();
    _impl_.payload_.buy_ = buy;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.buy)
}
void Packet::clear_buy() {
  if (_internal_has_buy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.buy_;
    }
    clear_has_payload();
  }
}
void Packet::set_allocated_sell(::BuySell* sell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (sell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sell));
    if (message_arena != submessage_arena) {
      sell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sell, submessage_arena);
    }
    set_has_sell();
    _impl_.payload_.sell_ = sell;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.sell)
}
void Packet::clear_sell() {
  if (_internal_has_sell()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.sell_;
    }
    clear_has_payload();
  }
}
void Packet::set_allocated_buy_spec(::stock_exchange::BuySpec* buy_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (buy_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buy_spec);
    if (message_arena != submessage_arena) {
      buy_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buy_spec, submessage_arena);
    }
    set_has_buy_spec();
    _impl_.payload_.buy_spec_ = buy_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.buy_spec)
}
void Packet::set_allocated_query(::stock_exchange::Query* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.payload_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.query)
}
void Packet::set_allocated_cancel(::stock_exchange::Cancel* cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancel);
    if (message_arena != submessage_arena) {
      cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel, submessage_arena);
    }
    set_has_cancel();
    _impl_.payload_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.cancel)
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stock_exchange.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Header(*from._impl_.header_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kBuy: {
      _this->_internal_mutable_buy()->::BuySell::MergeFrom(
          from._internal_buy());
      break;
    }
    case kSell: {
      _this->_internal_mutable_sell()->::BuySell::MergeFrom(
          from._internal_sell());
      break;
    }
    case kBuySpec: {
      _this->_internal_mutable_buy_spec()->::stock_exchange::BuySpec::MergeFrom(
          from._internal_buy_spec());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::stock_exchange::Query::MergeFrom(
          from._internal_query());
      break;
    }
    case kCancel: {
      _this->_internal_mutable_cancel()->::stock_exchange::Cancel::MergeFrom(
          from._internal_cancel());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Packet)
}

inline void Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.header_){nullptr}
    , decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:stock_exchange.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_payload()) {
    clear_payload();
  }
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:stock_exchange.Packet)
  switch (payload_case()) {
    case kBuy: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.buy_;
      }
      break;
    }
    case kSell: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.sell_;
      }
      break;
    }
    case kBuySpec: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.buy_spec_;
      }
      break;
    }
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.query_;
      }
      break;
    }
    case kCancel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.cancel_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BuySell buy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BuySell sell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_exchange.BuySpec buy_spec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buy_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_exchange.Query query = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_exchange.Cancel cancel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .BuySell buy = 2;
  if (_internal_has_buy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::buy(this),
        _Internal::buy(this).GetCachedSize(), target, stream);
  }

  // .BuySell sell = 3;
  if (_internal_has_sell()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sell(this),
        _Internal::sell(this).GetCachedSize(), target, stream);
  }

  // .stock_exchange.BuySpec buy_spec = 4;
  if (_internal_has_buy_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::buy_spec(this),
        _Internal::buy_spec(this).GetCachedSize(), target, stream);
  }

  // .stock_exchange.Query query = 5;
  if (_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // .stock_exchange.Cancel cancel = 6;
  if (_internal_has_cancel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cancel(this),
        _Internal::cancel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Packet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  switch (payload_case()) {
    // .BuySell buy = 2;
    case kBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.buy_);
      break;
    }
    // .BuySell sell = 3;
    case kSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.sell_);
      break;
    }
    // .stock_exchange.BuySpec buy_spec = 4;
    case kBuySpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.buy_spec_);
      break;
    }
    // .stock_exchange.Query query = 5;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.query_);
      break;
    }
    // .stock_exchange.Cancel cancel = 6;
    case kCancel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.cancel_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Header::MergeFrom(
        from._internal_header());
  }
  switch (from.payload_case()) {
    case kBuy: {
      _this->_internal_mutable_buy()->::BuySell::MergeFrom(
          from._internal_buy());
      break;
    }
    case kSell: {
      _this->_internal_mutable_sell()->::BuySell::MergeFrom(
          from._internal_sell());
      break;
    }
    case kBuySpec: {
      _this->_internal_mutable_buy_spec()->::stock_exchange::BuySpec::MergeFrom(
          from._internal_buy_spec());
      break;
    }
    case kQuery: {
      _this->_internal_mutable_query()->::stock_exchange::Query::MergeFrom(
          from._internal_query());
      break;
    }
    case kCancel: {
      _this->_internal_mutable_cancel()->::stock_exchange::Cancel::MergeFrom(
          from._internal_cancel());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.header_, other->_impl_.header_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stock_5fexchange_2eproto_getter, &descriptor_table_stock_5fexchange_2eproto_once,
      file_level_metadata_stock_5fexchange_2eproto[0]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::Header& header(const Response* msg);
  static const ::BrokerageId& brokerage_id(const Response* msg);
};

const ::Header&
Response::_Internal::header(const Response* msg) {
  return *msg->_impl_.header_;
}
const ::BrokerageId&
Response::_Internal::brokerage_id(const Response* msg) {
  return *msg->_impl_.brokerage_id_;
}
void Response::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
void Response::clear_brokerage_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
}
void Response::clear_buys() {
  _impl_.buys_.Clear();
}
void Response::clear_sells() {
  _impl_.sells_.Clear();
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stock_exchange.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){from._impl_.buys_}
    , decltype(_impl_.sells_){from._impl_.sells_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.transaction_id_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::Header(*from._impl_.header_);
  }
  if (from._internal_has_brokerage_id()) {
    _this->_impl_.brokerage_id_ = new ::BrokerageId(*from._impl_.brokerage_id_);
  }
  ::memcpy(&_impl_.transaction_id_, &from._impl_.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_) -
    reinterpret_cast<char*>(&_impl_.transaction_id_)) + sizeof(_impl_.response_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){arena}
    , decltype(_impl_.sells_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.transaction_id_){0u}
    , decltype(_impl_.response_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:stock_exchange.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buys_.~RepeatedPtrField();
  _impl_.sells_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.brokerage_id_;
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buys_.Clear();
  _impl_.sells_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
  ::memset(&_impl_.transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.response_) -
      reinterpret_cast<char*>(&_impl_.transaction_id_)) + sizeof(_impl_.response_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BrokerageId brokerage_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stock_exchange.Response.ResponseType response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response(static_cast<::stock_exchange::Response_ResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .BuySell buys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .BuySell sells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_transaction_id(), target);
  }

  // .BrokerageId brokerage_id = 3;
  if (this->_internal_has_brokerage_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::brokerage_id(this),
        _Internal::brokerage_id(this).GetCachedSize(), target, stream);
  }

  // .stock_exchange.Response.ResponseType response = 4;
  if (this->_internal_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_response(), target);
  }

  // repeated .BuySell buys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .BuySell sells = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BuySell buys = 5;
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->_impl_.buys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BuySell sells = 6;
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->_impl_.sells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // .BrokerageId brokerage_id = 3;
  if (this->_internal_has_brokerage_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_);
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_id());
  }

  // .stock_exchange.Response.ResponseType response = 4;
  if (this->_internal_response() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buys_.MergeFrom(from._impl_.buys_);
  _this->_impl_.sells_.MergeFrom(from._impl_.sells_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::Header::MergeFrom(
        from._internal_header());
  }
  if (from._internal_has_brokerage_id()) {
    _this->_internal_mutable_brokerage_id()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id());
  }
  if (from._internal_transaction_id() != 0) {
    _this->_internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_response() != 0) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buys_.InternalSwap(&other->_impl_.buys_);
  _impl_.sells_.InternalSwap(&other->_impl_.sells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, _impl_.response_)
      + sizeof(Response::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(Response, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stock_5fexchange_2eproto_getter, &descriptor_table_stock_5fexchange_2eproto_once,
      file_level_metadata_stock_5fexchange_2eproto[1]);
}

// ===================================================================

class BuySpec::_Internal {
 public:
};

BuySpec::BuySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stock_exchange.BuySpec)
}
BuySpec::BuySpec(const BuySpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuySpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){}
    , decltype(_impl_.transaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brokerage_id_, &from._impl_.brokerage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transaction_id_) -
    reinterpret_cast<char*>(&_impl_.brokerage_id_)) + sizeof(_impl_.transaction_id_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.BuySpec)
}

inline void BuySpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){0u}
    , decltype(_impl_.transaction_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BuySpec::~BuySpec() {
  // @@protoc_insertion_point(destructor:stock_exchange.BuySpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuySpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BuySpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.BuySpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brokerage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transaction_id_) -
      reinterpret_cast<char*>(&_impl_.brokerage_id_)) + sizeof(_impl_.transaction_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuySpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 brokerage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.brokerage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuySpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.BuySpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brokerage_id = 1;
  if (this->_internal_brokerage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_brokerage_id(), target);
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.BuySpec)
  return target;
}

size_t BuySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.BuySpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 brokerage_id = 1;
  if (this->_internal_brokerage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_brokerage_id());
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuySpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuySpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuySpec::GetClassData() const { return &_class_data_; }


void BuySpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuySpec*>(&to_msg);
  auto& from = static_cast<const BuySpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.BuySpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_brokerage_id() != 0) {
    _this->_internal_set_brokerage_id(from._internal_brokerage_id());
  }
  if (from._internal_transaction_id() != 0) {
    _this->_internal_set_transaction_id(from._internal_transaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuySpec::CopyFrom(const BuySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.BuySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySpec::IsInitialized() const {
  return true;
}

void BuySpec::InternalSwap(BuySpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuySpec, _impl_.transaction_id_)
      + sizeof(BuySpec::_impl_.transaction_id_)
      - PROTOBUF_FIELD_OFFSET(BuySpec, _impl_.brokerage_id_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_id_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuySpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stock_5fexchange_2eproto_getter, &descriptor_table_stock_5fexchange_2eproto_once,
      file_level_metadata_stock_5fexchange_2eproto[2]);
}

// ===================================================================

class Cancel::_Internal {
 public:
};

Cancel::Cancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stock_exchange.Cancel)
}
Cancel::Cancel(const Cancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cancel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){}
    , decltype(_impl_.transaction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.brokerage_id_, &from._impl_.brokerage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transaction_id_) -
    reinterpret_cast<char*>(&_impl_.brokerage_id_)) + sizeof(_impl_.transaction_id_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Cancel)
}

inline void Cancel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brokerage_id_){0u}
    , decltype(_impl_.transaction_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Cancel::~Cancel() {
  // @@protoc_insertion_point(destructor:stock_exchange.Cancel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cancel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Cancel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.brokerage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transaction_id_) -
      reinterpret_cast<char*>(&_impl_.brokerage_id_)) + sizeof(_impl_.transaction_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cancel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 brokerage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.brokerage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cancel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Cancel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brokerage_id = 1;
  if (this->_internal_brokerage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_brokerage_id(), target);
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Cancel)
  return target;
}

size_t Cancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Cancel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 brokerage_id = 1;
  if (this->_internal_brokerage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_brokerage_id());
  }

  // uint32 transaction_id = 2;
  if (this->_internal_transaction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transaction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cancel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cancel::GetClassData() const { return &_class_data_; }


void Cancel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cancel*>(&to_msg);
  auto& from = static_cast<const Cancel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Cancel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_brokerage_id() != 0) {
    _this->_internal_set_brokerage_id(from._internal_brokerage_id());
  }
  if (from._internal_transaction_id() != 0) {
    _this->_internal_set_transaction_id(from._internal_transaction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cancel::CopyFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel::IsInitialized() const {
  return true;
}

void Cancel::InternalSwap(Cancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cancel, _impl_.transaction_id_)
      + sizeof(Cancel::_impl_.transaction_id_)
      - PROTOBUF_FIELD_OFFSET(Cancel, _impl_.brokerage_id_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_id_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cancel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stock_5fexchange_2eproto_getter, &descriptor_table_stock_5fexchange_2eproto_once,
      file_level_metadata_stock_5fexchange_2eproto[3]);
}

// ===================================================================

class Query::_Internal {
 public:
  static const ::BrokerageId& brokerage_id(const Query* msg);
  static const ::BrokerageId& brokerage_id_look(const Query* msg);
};

const ::BrokerageId&
Query::_Internal::brokerage_id(const Query* msg) {
  return *msg->_impl_.brokerage_id_;
}
const ::BrokerageId&
Query::_Internal::brokerage_id_look(const Query* msg) {
  return *msg->_impl_.brokerage_id_look_;
}
void Query::clear_brokerage_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
}
void Query::clear_brokerage_id_look() {
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_look_ != nullptr) {
    delete _impl_.brokerage_id_look_;
  }
  _impl_.brokerage_id_look_ = nullptr;
}
Query::Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stock_exchange.Query)
}
Query::Query(const Query& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Query* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stock_ticker_){}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.brokerage_id_look_){nullptr}
    , decltype(_impl_.buy_or_sell_){}
    , decltype(_impl_.filters_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stock_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stock_ticker().empty()) {
    _this->_impl_.stock_ticker_.Set(from._internal_stock_ticker(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_brokerage_id()) {
    _this->_impl_.brokerage_id_ = new ::BrokerageId(*from._impl_.brokerage_id_);
  }
  if (from._internal_has_brokerage_id_look()) {
    _this->_impl_.brokerage_id_look_ = new ::BrokerageId(*from._impl_.brokerage_id_look_);
  }
  ::memcpy(&_impl_.buy_or_sell_, &from._impl_.buy_or_sell_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.filters_) -
    reinterpret_cast<char*>(&_impl_.buy_or_sell_)) + sizeof(_impl_.filters_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Query)
}

inline void Query::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stock_ticker_){}
    , decltype(_impl_.brokerage_id_){nullptr}
    , decltype(_impl_.brokerage_id_look_){nullptr}
    , decltype(_impl_.buy_or_sell_){0}
    , decltype(_impl_.filters_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stock_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:stock_exchange.Query)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Query::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stock_ticker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.brokerage_id_;
  if (this != internal_default_instance()) delete _impl_.brokerage_id_look_;
}

void Query::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Query)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stock_ticker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_ != nullptr) {
    delete _impl_.brokerage_id_;
  }
  _impl_.brokerage_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.brokerage_id_look_ != nullptr) {
    delete _impl_.brokerage_id_look_;
  }
  _impl_.brokerage_id_look_ = nullptr;
  ::memset(&_impl_.buy_or_sell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.filters_) -
      reinterpret_cast<char*>(&_impl_.buy_or_sell_)) + sizeof(_impl_.filters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Query::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BrokerageId brokerage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BrokerageId brokerage_id_look = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brokerage_id_look(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stock_ticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stock_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "stock_exchange.Query.stock_ticker"));
        } else
          goto handle_unusual;
        continue;
      // .stock_exchange.Query.BuyOrSell buy_or_sell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_buy_or_sell(static_cast<::stock_exchange::Query_BuyOrSell>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 filters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.filters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Query::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Query)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::brokerage_id(this),
        _Internal::brokerage_id(this).GetCachedSize(), target, stream);
  }

  // .BrokerageId brokerage_id_look = 2;
  if (this->_internal_has_brokerage_id_look()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::brokerage_id_look(this),
        _Internal::brokerage_id_look(this).GetCachedSize(), target, stream);
  }

  // string stock_ticker = 3;
  if (!this->_internal_stock_ticker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stock_ticker().data(), static_cast<int>(this->_internal_stock_ticker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stock_exchange.Query.stock_ticker");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stock_ticker(), target);
  }

  // .stock_exchange.Query.BuyOrSell buy_or_sell = 4;
  if (this->_internal_buy_or_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_buy_or_sell(), target);
  }

  // uint32 filters = 5;
  if (this->_internal_filters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_filters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Query)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stock_ticker = 3;
  if (!this->_internal_stock_ticker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stock_ticker());
  }

  // .BrokerageId brokerage_id = 1;
  if (this->_internal_has_brokerage_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_);
  }

  // .BrokerageId brokerage_id_look = 2;
  if (this->_internal_has_brokerage_id_look()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.brokerage_id_look_);
  }

  // .stock_exchange.Query.BuyOrSell buy_or_sell = 4;
  if (this->_internal_buy_or_sell() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_buy_or_sell());
  }

  // uint32 filters = 5;
  if (this->_internal_filters() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_filters());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Query::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Query::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Query::GetClassData() const { return &_class_data_; }


void Query::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Query*>(&to_msg);
  auto& from = static_cast<const Query&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Query)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stock_ticker().empty()) {
    _this->_internal_set_stock_ticker(from._internal_stock_ticker());
  }
  if (from._internal_has_brokerage_id()) {
    _this->_internal_mutable_brokerage_id()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id());
  }
  if (from._internal_has_brokerage_id_look()) {
    _this->_internal_mutable_brokerage_id_look()->::BrokerageId::MergeFrom(
        from._internal_brokerage_id_look());
  }
  if (from._internal_buy_or_sell() != 0) {
    _this->_internal_set_buy_or_sell(from._internal_buy_or_sell());
  }
  if (from._internal_filters() != 0) {
    _this->_internal_set_filters(from._internal_filters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::InternalSwap(Query* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stock_ticker_, lhs_arena,
      &other->_impl_.stock_ticker_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Query, _impl_.filters_)
      + sizeof(Query::_impl_.filters_)
      - PROTOBUF_FIELD_OFFSET(Query, _impl_.brokerage_id_)>(
          reinterpret_cast<char*>(&_impl_.brokerage_id_),
          reinterpret_cast<char*>(&other->_impl_.brokerage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Query::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stock_5fexchange_2eproto_getter, &descriptor_table_stock_5fexchange_2eproto_once,
      file_level_metadata_stock_5fexchange_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stock_exchange
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stock_exchange::Packet*
Arena::CreateMaybeMessage< ::stock_exchange::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_exchange::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_exchange::Response*
Arena::CreateMaybeMessage< ::stock_exchange::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_exchange::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_exchange::BuySpec*
Arena::CreateMaybeMessage< ::stock_exchange::BuySpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_exchange::BuySpec >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_exchange::Cancel*
Arena::CreateMaybeMessage< ::stock_exchange::Cancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_exchange::Cancel >(arena);
}
template<> PROTOBUF_NOINLINE ::stock_exchange::Query*
Arena::CreateMaybeMessage< ::stock_exchange::Query >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stock_exchange::Query >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
