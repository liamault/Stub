// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_exchange.proto

#include "stock_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BrokerageId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BuySell;
}  // namespace protobuf_common_2eproto
namespace protobuf_stock_5fexchange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stock_5fexchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BuySpec;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stock_5fexchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Cancel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stock_5fexchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Query;
}  // namespace protobuf_stock_5fexchange_2eproto
namespace stock_exchange {
class PacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Packet>
      _instance;
  const ::BuySell* buy_;
  const ::BuySell* sell_;
  const ::stock_exchange::BuySpec* buy_spec_;
  const ::stock_exchange::Query* query_;
  const ::stock_exchange::Cancel* cancel_;
} _Packet_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
} _Response_default_instance_;
class BuySpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuySpec>
      _instance;
} _BuySpec_default_instance_;
class CancelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cancel>
      _instance;
} _Cancel_default_instance_;
class QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Query>
      _instance;
} _Query_default_instance_;
}  // namespace stock_exchange
namespace protobuf_stock_5fexchange_2eproto {
static void InitDefaultsPacket() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_exchange::_Packet_default_instance_;
    new (ptr) ::stock_exchange::Packet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_exchange::Packet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Packet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPacket}, {
      &protobuf_common_2eproto::scc_info_Header.base,
      &protobuf_common_2eproto::scc_info_BuySell.base,
      &protobuf_stock_5fexchange_2eproto::scc_info_BuySpec.base,
      &protobuf_stock_5fexchange_2eproto::scc_info_Query.base,
      &protobuf_stock_5fexchange_2eproto::scc_info_Cancel.base,}};

static void InitDefaultsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_exchange::_Response_default_instance_;
    new (ptr) ::stock_exchange::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_exchange::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResponse}, {
      &protobuf_common_2eproto::scc_info_Header.base,
      &protobuf_common_2eproto::scc_info_BrokerageId.base,
      &protobuf_common_2eproto::scc_info_BuySell.base,}};

static void InitDefaultsBuySpec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_exchange::_BuySpec_default_instance_;
    new (ptr) ::stock_exchange::BuySpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_exchange::BuySpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BuySpec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBuySpec}, {
      &protobuf_common_2eproto::scc_info_BrokerageId.base,}};

static void InitDefaultsCancel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_exchange::_Cancel_default_instance_;
    new (ptr) ::stock_exchange::Cancel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_exchange::Cancel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Cancel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCancel}, {
      &protobuf_common_2eproto::scc_info_BrokerageId.base,}};

static void InitDefaultsQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stock_exchange::_Query_default_instance_;
    new (ptr) ::stock_exchange::Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stock_exchange::Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQuery}, {
      &protobuf_common_2eproto::scc_info_BrokerageId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Packet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuySpec.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cancel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Query.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Packet, header_),
  offsetof(::stock_exchange::PacketDefaultTypeInternal, buy_),
  offsetof(::stock_exchange::PacketDefaultTypeInternal, sell_),
  offsetof(::stock_exchange::PacketDefaultTypeInternal, buy_spec_),
  offsetof(::stock_exchange::PacketDefaultTypeInternal, query_),
  offsetof(::stock_exchange::PacketDefaultTypeInternal, cancel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Packet, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, brokerage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, buys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Response, sells_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::BuySpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::BuySpec, brokerage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::BuySpec, transaction_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Cancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Cancel, brokerage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Cancel, transaction_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, brokerage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, brokerage_id_look_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, stock_ticker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, buy_or_sell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::stock_exchange::Query, filters_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stock_exchange::Packet)},
  { 12, -1, sizeof(::stock_exchange::Response)},
  { 23, -1, sizeof(::stock_exchange::BuySpec)},
  { 30, -1, sizeof(::stock_exchange::Cancel)},
  { 37, -1, sizeof(::stock_exchange::Query)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::stock_exchange::_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stock_exchange::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stock_exchange::_BuySpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stock_exchange::_Cancel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::stock_exchange::_Query_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "stock_exchange.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024stock_exchange.proto\022\016stock_exchange\032\014"
      "common.proto\"\336\001\n\006Packet\022\027\n\006header\030\001 \001(\0132"
      "\007.Header\022\027\n\003buy\030\002 \001(\0132\010.BuySellH\000\022\030\n\004sel"
      "l\030\003 \001(\0132\010.BuySellH\000\022+\n\010buy_spec\030\004 \001(\0132\027."
      "stock_exchange.BuySpecH\000\022&\n\005query\030\005 \001(\0132"
      "\025.stock_exchange.QueryH\000\022(\n\006cancel\030\006 \001(\013"
      "2\026.stock_exchange.CancelH\000B\t\n\007payload\"\225\003"
      "\n\010Response\022\027\n\006header\030\001 \001(\0132\007.Header\022\026\n\016t"
      "ransaction_id\030\002 \001(\r\022\"\n\014brokerage_id\030\003 \001("
      "\0132\014.BrokerageId\0227\n\010response\030\004 \001(\0162%.stoc"
      "k_exchange.Response.ResponseType\022\026\n\004buys"
      "\030\005 \003(\0132\010.BuySell\022\027\n\005sells\030\006 \003(\0132\010.BuySel"
      "l\"\311\001\n\014ResponseType\022\013\n\007INVALID\020\000\022\025\n\021MALFO"
      "RMED_MESSAGE\020\001\022\032\n\026INVALID_TRANSACTION_ID"
      "\020\002\022\030\n\024INVALID_BROKERAGE_ID\020\003\022\021\n\rINVALID_"
      "PRICE\020\004\022\013\n\007SUCCESS\020\005\022&\n\"WITHDRAW_FAILED_"
      "NOT_ENOUGH_BALANCE\020\006\022\027\n\023NO_MATCHING_REQU"
      "EST\020\007\"E\n\007BuySpec\022\"\n\014brokerage_id\030\001 \001(\0132\014"
      ".BrokerageId\022\026\n\016transaction_id\030\002 \001(\r\"D\n\006"
      "Cancel\022\"\n\014brokerage_id\030\001 \001(\0132\014.Brokerage"
      "Id\022\026\n\016transaction_id\030\002 \001(\r\"\253\001\n\005Query\022\"\n\014"
      "brokerage_id\030\001 \001(\0132\014.BrokerageId\022\'\n\021brok"
      "erage_id_look\030\002 \001(\0132\014.BrokerageId\022\024\n\014sto"
      "ck_ticker\030\003 \001(\t\022.\n\013buy_or_sell\030\004 \001(\0162\031.s"
      "tock_exchange.BuyOrSell\022\017\n\007filters\030\005 \001(\r"
      "*\036\n\tBuyOrSell\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1040);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stock_exchange.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_stock_5fexchange_2eproto
namespace stock_exchange {
const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor() {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stock_5fexchange_2eproto::file_level_enum_descriptors[0];
}
bool Response_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_ResponseType Response::INVALID;
const Response_ResponseType Response::MALFORMED_MESSAGE;
const Response_ResponseType Response::INVALID_TRANSACTION_ID;
const Response_ResponseType Response::INVALID_BROKERAGE_ID;
const Response_ResponseType Response::INVALID_PRICE;
const Response_ResponseType Response::SUCCESS;
const Response_ResponseType Response::WITHDRAW_FAILED_NOT_ENOUGH_BALANCE;
const Response_ResponseType Response::NO_MATCHING_REQUEST;
const Response_ResponseType Response::ResponseType_MIN;
const Response_ResponseType Response::ResponseType_MAX;
const int Response::ResponseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BuyOrSell_descriptor() {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stock_5fexchange_2eproto::file_level_enum_descriptors[1];
}
bool BuyOrSell_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::stock_exchange::_Packet_default_instance_._instance.get_mutable()->header_ = const_cast< ::Header*>(
      ::Header::internal_default_instance());
  ::stock_exchange::_Packet_default_instance_.buy_ = const_cast< ::BuySell*>(
      ::BuySell::internal_default_instance());
  ::stock_exchange::_Packet_default_instance_.sell_ = const_cast< ::BuySell*>(
      ::BuySell::internal_default_instance());
  ::stock_exchange::_Packet_default_instance_.buy_spec_ = const_cast< ::stock_exchange::BuySpec*>(
      ::stock_exchange::BuySpec::internal_default_instance());
  ::stock_exchange::_Packet_default_instance_.query_ = const_cast< ::stock_exchange::Query*>(
      ::stock_exchange::Query::internal_default_instance());
  ::stock_exchange::_Packet_default_instance_.cancel_ = const_cast< ::stock_exchange::Cancel*>(
      ::stock_exchange::Cancel::internal_default_instance());
}
void Packet::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Packet::set_allocated_buy(::BuySell* buy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (buy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      buy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, buy, submessage_arena);
    }
    set_has_buy();
    payload_.buy_ = buy;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.buy)
}
void Packet::clear_buy() {
  if (has_buy()) {
    delete payload_.buy_;
    clear_has_payload();
  }
}
void Packet::set_allocated_sell(::BuySell* sell) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (sell) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sell = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sell, submessage_arena);
    }
    set_has_sell();
    payload_.sell_ = sell;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.sell)
}
void Packet::clear_sell() {
  if (has_sell()) {
    delete payload_.sell_;
    clear_has_payload();
  }
}
void Packet::set_allocated_buy_spec(::stock_exchange::BuySpec* buy_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (buy_spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      buy_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, buy_spec, submessage_arena);
    }
    set_has_buy_spec();
    payload_.buy_spec_ = buy_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.buy_spec)
}
void Packet::set_allocated_query(::stock_exchange::Query* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    payload_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.query)
}
void Packet::set_allocated_cancel(::stock_exchange::Cancel* cancel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (cancel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cancel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cancel, submessage_arena);
    }
    set_has_cancel();
    payload_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.cancel)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kHeaderFieldNumber;
const int Packet::kBuyFieldNumber;
const int Packet::kSellFieldNumber;
const int Packet::kBuySpecFieldNumber;
const int Packet::kQueryFieldNumber;
const int Packet::kCancelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stock_5fexchange_2eproto::scc_info_Packet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_exchange.Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kBuy: {
      mutable_buy()->::BuySell::MergeFrom(from.buy());
      break;
    }
    case kSell: {
      mutable_sell()->::BuySell::MergeFrom(from.sell());
      break;
    }
    case kBuySpec: {
      mutable_buy_spec()->::stock_exchange::BuySpec::MergeFrom(from.buy_spec());
      break;
    }
    case kQuery: {
      mutable_query()->::stock_exchange::Query::MergeFrom(from.query());
      break;
    }
    case kCancel: {
      mutable_cancel()->::stock_exchange::Cancel::MergeFrom(from.cancel());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Packet)
}

void Packet::SharedCtor() {
  header_ = NULL;
  clear_has_payload();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:stock_exchange.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (has_payload()) {
    clear_payload();
  }
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  ::protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stock_5fexchange_2eproto::scc_info_Packet.base);
  return *internal_default_instance();
}


void Packet::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:stock_exchange.Packet)
  switch (payload_case()) {
    case kBuy: {
      delete payload_.buy_;
      break;
    }
    case kSell: {
      delete payload_.sell_;
      break;
    }
    case kBuySpec: {
      delete payload_.buy_spec_;
      break;
    }
    case kQuery: {
      delete payload_.query_;
      break;
    }
    case kCancel: {
      delete payload_.cancel_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  clear_payload();
  _internal_metadata_.Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_exchange.Packet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BuySell buy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BuySell sell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stock_exchange.BuySpec buy_spec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_buy_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stock_exchange.Query query = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stock_exchange.Cancel cancel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cancel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_exchange.Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_exchange.Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_exchange.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .BuySell buy = 2;
  if (has_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_buy(), output);
  }

  // .BuySell sell = 3;
  if (has_sell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sell(), output);
  }

  // .stock_exchange.BuySpec buy_spec = 4;
  if (has_buy_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_buy_spec(), output);
  }

  // .stock_exchange.Query query = 5;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_query(), output);
  }

  // .stock_exchange.Cancel cancel = 6;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_cancel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_exchange.Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .BuySell buy = 2;
  if (has_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_buy(), deterministic, target);
  }

  // .BuySell sell = 3;
  if (has_sell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sell(), deterministic, target);
  }

  // .stock_exchange.BuySpec buy_spec = 4;
  if (has_buy_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_buy_spec(), deterministic, target);
  }

  // .stock_exchange.Query query = 5;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_query(), deterministic, target);
  }

  // .stock_exchange.Cancel cancel = 6;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_cancel(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Packet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (payload_case()) {
    // .BuySell buy = 2;
    case kBuy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.buy_);
      break;
    }
    // .BuySell sell = 3;
    case kSell: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.sell_);
      break;
    }
    // .stock_exchange.BuySpec buy_spec = 4;
    case kBuySpec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.buy_spec_);
      break;
    }
    // .stock_exchange.Query query = 5;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.query_);
      break;
    }
    // .stock_exchange.Cancel cancel = 6;
    case kCancel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payload_.cancel_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_exchange.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_exchange.Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_exchange.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Header::MergeFrom(from.header());
  }
  switch (from.payload_case()) {
    case kBuy: {
      mutable_buy()->::BuySell::MergeFrom(from.buy());
      break;
    }
    case kSell: {
      mutable_sell()->::BuySell::MergeFrom(from.sell());
      break;
    }
    case kBuySpec: {
      mutable_buy_spec()->::stock_exchange::BuySpec::MergeFrom(from.buy_spec());
      break;
    }
    case kQuery: {
      mutable_query()->::stock_exchange::Query::MergeFrom(from.query());
      break;
    }
    case kCancel: {
      mutable_cancel()->::stock_exchange::Cancel::MergeFrom(from.cancel());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_exchange.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::stock_exchange::_Response_default_instance_._instance.get_mutable()->header_ = const_cast< ::Header*>(
      ::Header::internal_default_instance());
  ::stock_exchange::_Response_default_instance_._instance.get_mutable()->brokerage_id_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
void Response::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void Response::clear_brokerage_id() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
}
void Response::clear_buys() {
  buys_.Clear();
}
void Response::clear_sells() {
  sells_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kHeaderFieldNumber;
const int Response::kTransactionIdFieldNumber;
const int Response::kBrokerageIdFieldNumber;
const int Response::kResponseFieldNumber;
const int Response::kBuysFieldNumber;
const int Response::kSellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stock_5fexchange_2eproto::scc_info_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_exchange.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buys_(from.buys_),
      sells_(from.sells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_brokerage_id()) {
    brokerage_id_ = new ::BrokerageId(*from.brokerage_id_);
  } else {
    brokerage_id_ = NULL;
  }
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Response)
}

void Response::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&header_)) + sizeof(response_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:stock_exchange.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete brokerage_id_;
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stock_5fexchange_2eproto::scc_info_Response.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buys_.Clear();
  sells_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(response_));
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_exchange.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BrokerageId brokerage_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stock_exchange.Response.ResponseType response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response(static_cast< ::stock_exchange::Response_ResponseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BuySell buys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .BuySell sells = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_exchange.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_exchange.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_exchange.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transaction_id(), output);
  }

  // .BrokerageId brokerage_id = 3;
  if (this->has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_brokerage_id(), output);
  }

  // .stock_exchange.Response.ResponseType response = 4;
  if (this->response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->response(), output);
  }

  // repeated .BuySell buys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->buys(static_cast<int>(i)),
      output);
  }

  // repeated .BuySell sells = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->sells(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_exchange.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transaction_id(), target);
  }

  // .BrokerageId brokerage_id = 3;
  if (this->has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_brokerage_id(), deterministic, target);
  }

  // .stock_exchange.Response.ResponseType response = 4;
  if (this->response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->response(), target);
  }

  // repeated .BuySell buys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->buys(static_cast<int>(i)), deterministic, target);
  }

  // repeated .BuySell sells = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->sells(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .BuySell buys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->buys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buys(static_cast<int>(i)));
    }
  }

  // repeated .BuySell sells = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sells(static_cast<int>(i)));
    }
  }

  // .Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .BrokerageId brokerage_id = 3;
  if (this->has_brokerage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transaction_id());
  }

  // .stock_exchange.Response.ResponseType response = 4;
  if (this->response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_exchange.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_exchange.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_exchange.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buys_.MergeFrom(from.buys_);
  sells_.MergeFrom(from.sells_);
  if (from.has_header()) {
    mutable_header()->::Header::MergeFrom(from.header());
  }
  if (from.has_brokerage_id()) {
    mutable_brokerage_id()->::BrokerageId::MergeFrom(from.brokerage_id());
  }
  if (from.transaction_id() != 0) {
    set_transaction_id(from.transaction_id());
  }
  if (from.response() != 0) {
    set_response(from.response());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_exchange.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  CastToBase(&buys_)->InternalSwap(CastToBase(&other->buys_));
  CastToBase(&sells_)->InternalSwap(CastToBase(&other->sells_));
  swap(header_, other->header_);
  swap(brokerage_id_, other->brokerage_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuySpec::InitAsDefaultInstance() {
  ::stock_exchange::_BuySpec_default_instance_._instance.get_mutable()->brokerage_id_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
void BuySpec::clear_brokerage_id() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuySpec::kBrokerageIdFieldNumber;
const int BuySpec::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuySpec::BuySpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stock_5fexchange_2eproto::scc_info_BuySpec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_exchange.BuySpec)
}
BuySpec::BuySpec(const BuySpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_brokerage_id()) {
    brokerage_id_ = new ::BrokerageId(*from.brokerage_id_);
  } else {
    brokerage_id_ = NULL;
  }
  transaction_id_ = from.transaction_id_;
  // @@protoc_insertion_point(copy_constructor:stock_exchange.BuySpec)
}

void BuySpec::SharedCtor() {
  ::memset(&brokerage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&brokerage_id_)) + sizeof(transaction_id_));
}

BuySpec::~BuySpec() {
  // @@protoc_insertion_point(destructor:stock_exchange.BuySpec)
  SharedDtor();
}

void BuySpec::SharedDtor() {
  if (this != internal_default_instance()) delete brokerage_id_;
}

void BuySpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BuySpec::descriptor() {
  ::protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuySpec& BuySpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stock_5fexchange_2eproto::scc_info_BuySpec.base);
  return *internal_default_instance();
}


void BuySpec::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.BuySpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
  transaction_id_ = 0u;
  _internal_metadata_.Clear();
}

bool BuySpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_exchange.BuySpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BrokerageId brokerage_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_exchange.BuySpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_exchange.BuySpec)
  return false;
#undef DO_
}

void BuySpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_exchange.BuySpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_brokerage_id(), output);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transaction_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_exchange.BuySpec)
}

::google::protobuf::uint8* BuySpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.BuySpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_brokerage_id(), deterministic, target);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transaction_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.BuySpec)
  return target;
}

size_t BuySpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.BuySpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuySpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_exchange.BuySpec)
  GOOGLE_DCHECK_NE(&from, this);
  const BuySpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuySpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_exchange.BuySpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_exchange.BuySpec)
    MergeFrom(*source);
  }
}

void BuySpec::MergeFrom(const BuySpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.BuySpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_brokerage_id()) {
    mutable_brokerage_id()->::BrokerageId::MergeFrom(from.brokerage_id());
  }
  if (from.transaction_id() != 0) {
    set_transaction_id(from.transaction_id());
  }
}

void BuySpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_exchange.BuySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuySpec::CopyFrom(const BuySpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.BuySpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySpec::IsInitialized() const {
  return true;
}

void BuySpec::Swap(BuySpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuySpec::InternalSwap(BuySpec* other) {
  using std::swap;
  swap(brokerage_id_, other->brokerage_id_);
  swap(transaction_id_, other->transaction_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BuySpec::GetMetadata() const {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cancel::InitAsDefaultInstance() {
  ::stock_exchange::_Cancel_default_instance_._instance.get_mutable()->brokerage_id_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
void Cancel::clear_brokerage_id() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cancel::kBrokerageIdFieldNumber;
const int Cancel::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cancel::Cancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stock_5fexchange_2eproto::scc_info_Cancel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_exchange.Cancel)
}
Cancel::Cancel(const Cancel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_brokerage_id()) {
    brokerage_id_ = new ::BrokerageId(*from.brokerage_id_);
  } else {
    brokerage_id_ = NULL;
  }
  transaction_id_ = from.transaction_id_;
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Cancel)
}

void Cancel::SharedCtor() {
  ::memset(&brokerage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) -
      reinterpret_cast<char*>(&brokerage_id_)) + sizeof(transaction_id_));
}

Cancel::~Cancel() {
  // @@protoc_insertion_point(destructor:stock_exchange.Cancel)
  SharedDtor();
}

void Cancel::SharedDtor() {
  if (this != internal_default_instance()) delete brokerage_id_;
}

void Cancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cancel::descriptor() {
  ::protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cancel& Cancel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stock_5fexchange_2eproto::scc_info_Cancel.base);
  return *internal_default_instance();
}


void Cancel::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Cancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
  transaction_id_ = 0u;
  _internal_metadata_.Clear();
}

bool Cancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_exchange.Cancel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BrokerageId brokerage_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_exchange.Cancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_exchange.Cancel)
  return false;
#undef DO_
}

void Cancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_exchange.Cancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_brokerage_id(), output);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transaction_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_exchange.Cancel)
}

::google::protobuf::uint8* Cancel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Cancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_brokerage_id(), deterministic, target);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transaction_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Cancel)
  return target;
}

size_t Cancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Cancel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_);
  }

  // uint32 transaction_id = 2;
  if (this->transaction_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_exchange.Cancel)
  GOOGLE_DCHECK_NE(&from, this);
  const Cancel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cancel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_exchange.Cancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_exchange.Cancel)
    MergeFrom(*source);
  }
}

void Cancel::MergeFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Cancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_brokerage_id()) {
    mutable_brokerage_id()->::BrokerageId::MergeFrom(from.brokerage_id());
  }
  if (from.transaction_id() != 0) {
    set_transaction_id(from.transaction_id());
  }
}

void Cancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_exchange.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cancel::CopyFrom(const Cancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Cancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cancel::IsInitialized() const {
  return true;
}

void Cancel::Swap(Cancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cancel::InternalSwap(Cancel* other) {
  using std::swap;
  swap(brokerage_id_, other->brokerage_id_);
  swap(transaction_id_, other->transaction_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cancel::GetMetadata() const {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Query::InitAsDefaultInstance() {
  ::stock_exchange::_Query_default_instance_._instance.get_mutable()->brokerage_id_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
  ::stock_exchange::_Query_default_instance_._instance.get_mutable()->brokerage_id_look_ = const_cast< ::BrokerageId*>(
      ::BrokerageId::internal_default_instance());
}
void Query::clear_brokerage_id() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
}
void Query::clear_brokerage_id_look() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_look_ != NULL) {
    delete brokerage_id_look_;
  }
  brokerage_id_look_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kBrokerageIdFieldNumber;
const int Query::kBrokerageIdLookFieldNumber;
const int Query::kStockTickerFieldNumber;
const int Query::kBuyOrSellFieldNumber;
const int Query::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stock_5fexchange_2eproto::scc_info_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:stock_exchange.Query)
}
Query::Query(const Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stock_ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stock_ticker().size() > 0) {
    stock_ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_ticker_);
  }
  if (from.has_brokerage_id()) {
    brokerage_id_ = new ::BrokerageId(*from.brokerage_id_);
  } else {
    brokerage_id_ = NULL;
  }
  if (from.has_brokerage_id_look()) {
    brokerage_id_look_ = new ::BrokerageId(*from.brokerage_id_look_);
  } else {
    brokerage_id_look_ = NULL;
  }
  ::memcpy(&buy_or_sell_, &from.buy_or_sell_,
    static_cast<size_t>(reinterpret_cast<char*>(&filters_) -
    reinterpret_cast<char*>(&buy_or_sell_)) + sizeof(filters_));
  // @@protoc_insertion_point(copy_constructor:stock_exchange.Query)
}

void Query::SharedCtor() {
  stock_ticker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&brokerage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filters_) -
      reinterpret_cast<char*>(&brokerage_id_)) + sizeof(filters_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:stock_exchange.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  stock_ticker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete brokerage_id_;
  if (this != internal_default_instance()) delete brokerage_id_look_;
}

void Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  ::protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Query& Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stock_5fexchange_2eproto::scc_info_Query.base);
  return *internal_default_instance();
}


void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:stock_exchange.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stock_ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && brokerage_id_look_ != NULL) {
    delete brokerage_id_look_;
  }
  brokerage_id_look_ = NULL;
  ::memset(&buy_or_sell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filters_) -
      reinterpret_cast<char*>(&buy_or_sell_)) + sizeof(filters_));
  _internal_metadata_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stock_exchange.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BrokerageId brokerage_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BrokerageId brokerage_id_look = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brokerage_id_look()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stock_ticker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_ticker()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stock_exchange.Query.stock_ticker"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stock_exchange.BuyOrSell buy_or_sell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_buy_or_sell(static_cast< ::stock_exchange::BuyOrSell >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 filters = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stock_exchange.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stock_exchange.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stock_exchange.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_brokerage_id(), output);
  }

  // .BrokerageId brokerage_id_look = 2;
  if (this->has_brokerage_id_look()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_brokerage_id_look(), output);
  }

  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_exchange.Query.stock_ticker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stock_ticker(), output);
  }

  // .stock_exchange.BuyOrSell buy_or_sell = 4;
  if (this->buy_or_sell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->buy_or_sell(), output);
  }

  // uint32 filters = 5;
  if (this->filters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filters(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:stock_exchange.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:stock_exchange.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_brokerage_id(), deterministic, target);
  }

  // .BrokerageId brokerage_id_look = 2;
  if (this->has_brokerage_id_look()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_brokerage_id_look(), deterministic, target);
  }

  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stock_ticker().data(), static_cast<int>(this->stock_ticker().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stock_exchange.Query.stock_ticker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_ticker(), target);
  }

  // .stock_exchange.BuyOrSell buy_or_sell = 4;
  if (this->buy_or_sell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->buy_or_sell(), target);
  }

  // uint32 filters = 5;
  if (this->filters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filters(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stock_exchange.Query)
  return target;
}

size_t Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stock_exchange.Query)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string stock_ticker = 3;
  if (this->stock_ticker().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stock_ticker());
  }

  // .BrokerageId brokerage_id = 1;
  if (this->has_brokerage_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_);
  }

  // .BrokerageId brokerage_id_look = 2;
  if (this->has_brokerage_id_look()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *brokerage_id_look_);
  }

  // .stock_exchange.BuyOrSell buy_or_sell = 4;
  if (this->buy_or_sell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_or_sell());
  }

  // uint32 filters = 5;
  if (this->filters() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->filters());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stock_exchange.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stock_exchange.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stock_exchange.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stock_exchange.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stock_ticker().size() > 0) {

    stock_ticker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_ticker_);
  }
  if (from.has_brokerage_id()) {
    mutable_brokerage_id()->::BrokerageId::MergeFrom(from.brokerage_id());
  }
  if (from.has_brokerage_id_look()) {
    mutable_brokerage_id_look()->::BrokerageId::MergeFrom(from.brokerage_id_look());
  }
  if (from.buy_or_sell() != 0) {
    set_buy_or_sell(from.buy_or_sell());
  }
  if (from.filters() != 0) {
    set_filters(from.filters());
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stock_exchange.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stock_exchange.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  using std::swap;
  stock_ticker_.Swap(&other->stock_ticker_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(brokerage_id_, other->brokerage_id_);
  swap(brokerage_id_look_, other->brokerage_id_look_);
  swap(buy_or_sell_, other->buy_or_sell_);
  swap(filters_, other->filters_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_stock_5fexchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_stock_5fexchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stock_exchange
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::stock_exchange::Packet* Arena::CreateMaybeMessage< ::stock_exchange::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::stock_exchange::Packet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::stock_exchange::Response* Arena::CreateMaybeMessage< ::stock_exchange::Response >(Arena* arena) {
  return Arena::CreateInternal< ::stock_exchange::Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::stock_exchange::BuySpec* Arena::CreateMaybeMessage< ::stock_exchange::BuySpec >(Arena* arena) {
  return Arena::CreateInternal< ::stock_exchange::BuySpec >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::stock_exchange::Cancel* Arena::CreateMaybeMessage< ::stock_exchange::Cancel >(Arena* arena) {
  return Arena::CreateInternal< ::stock_exchange::Cancel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::stock_exchange::Query* Arena::CreateMaybeMessage< ::stock_exchange::Query >(Arena* arena) {
  return Arena::CreateInternal< ::stock_exchange::Query >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
