// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
class BrokerageId;
class BrokerageIdDefaultTypeInternal;
extern BrokerageIdDefaultTypeInternal _BrokerageId_default_instance_;
class BuySell;
class BuySellDefaultTypeInternal;
extern BuySellDefaultTypeInternal _BuySell_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Price;
class PriceDefaultTypeInternal;
extern PriceDefaultTypeInternal _Price_default_instance_;
namespace google {
namespace protobuf {
template<> ::BrokerageId* Arena::CreateMaybeMessage<::BrokerageId>(Arena*);
template<> ::BuySell* Arena::CreateMaybeMessage<::BuySell>(Arena*);
template<> ::Header* Arena::CreateMaybeMessage<::Header>(Arena*);
template<> ::Price* Arena::CreateMaybeMessage<::Price>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Magic {
  REGULATORY = 0,
  STOCK_EXCHANGE = 1,
  BANK = 2,
  BROKERAGE = 3,
  Magic_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Magic_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Magic_IsValid(int value);
const Magic Magic_MIN = REGULATORY;
const Magic Magic_MAX = BROKERAGE;
const int Magic_ARRAYSIZE = Magic_MAX + 1;

const ::google::protobuf::EnumDescriptor* Magic_descriptor();
inline const ::std::string& Magic_Name(Magic value) {
  return ::google::protobuf::internal::NameOfEnum(
    Magic_descriptor(), value);
}
inline bool Magic_Parse(
    const ::std::string& name, Magic* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Magic>(
    Magic_descriptor(), name, value);
}
// ===================================================================

class Price : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Price) */ {
 public:
  Price();
  virtual ~Price();

  Price(const Price& from);

  inline Price& operator=(const Price& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Price(Price&& from) noexcept
    : Price() {
    *this = ::std::move(from);
  }

  inline Price& operator=(Price&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Price& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Price* internal_default_instance() {
    return reinterpret_cast<const Price*>(
               &_Price_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Price* other);
  friend void swap(Price& a, Price& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Price* New() const final {
    return CreateMaybeMessage<Price>(NULL);
  }

  Price* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Price>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Price& from);
  void MergeFrom(const Price& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Price* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dollars = 1;
  void clear_dollars();
  static const int kDollarsFieldNumber = 1;
  ::google::protobuf::uint32 dollars() const;
  void set_dollars(::google::protobuf::uint32 value);

  // uint32 cents = 2;
  void clear_cents();
  static const int kCentsFieldNumber = 2;
  ::google::protobuf::uint32 cents() const;
  void set_cents(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Price)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dollars_;
  ::google::protobuf::uint32 cents_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrokerageId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrokerageId) */ {
 public:
  BrokerageId();
  virtual ~BrokerageId();

  BrokerageId(const BrokerageId& from);

  inline BrokerageId& operator=(const BrokerageId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrokerageId(BrokerageId&& from) noexcept
    : BrokerageId() {
    *this = ::std::move(from);
  }

  inline BrokerageId& operator=(BrokerageId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrokerageId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrokerageId* internal_default_instance() {
    return reinterpret_cast<const BrokerageId*>(
               &_BrokerageId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BrokerageId* other);
  friend void swap(BrokerageId& a, BrokerageId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrokerageId* New() const final {
    return CreateMaybeMessage<BrokerageId>(NULL);
  }

  BrokerageId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrokerageId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrokerageId& from);
  void MergeFrom(const BrokerageId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerageId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 brokerage = 1;
  void clear_brokerage();
  static const int kBrokerageFieldNumber = 1;
  ::google::protobuf::uint32 brokerage() const;
  void set_brokerage(::google::protobuf::uint32 value);

  // uint32 trader = 2;
  void clear_trader();
  static const int kTraderFieldNumber = 2;
  ::google::protobuf::uint32 trader() const;
  void set_trader(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BrokerageId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 brokerage_;
  ::google::protobuf::uint32 trader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // .Magic magic = 2;
  void clear_magic();
  static const int kMagicFieldNumber = 2;
  ::Magic magic() const;
  void set_magic(::Magic value);

  // uint32 serial = 3;
  void clear_serial();
  static const int kSerialFieldNumber = 3;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 version_;
  int magic_;
  ::google::protobuf::uint32 serial_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuySell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BuySell) */ {
 public:
  BuySell();
  virtual ~BuySell();

  BuySell(const BuySell& from);

  inline BuySell& operator=(const BuySell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuySell(BuySell&& from) noexcept
    : BuySell() {
    *this = ::std::move(from);
  }

  inline BuySell& operator=(BuySell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuySell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuySell* internal_default_instance() {
    return reinterpret_cast<const BuySell*>(
               &_BuySell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BuySell* other);
  friend void swap(BuySell& a, BuySell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuySell* New() const final {
    return CreateMaybeMessage<BuySell>(NULL);
  }

  BuySell* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuySell>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuySell& from);
  void MergeFrom(const BuySell& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuySell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stock_ticker = 3;
  void clear_stock_ticker();
  static const int kStockTickerFieldNumber = 3;
  const ::std::string& stock_ticker() const;
  void set_stock_ticker(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_ticker(::std::string&& value);
  #endif
  void set_stock_ticker(const char* value);
  void set_stock_ticker(const char* value, size_t size);
  ::std::string* mutable_stock_ticker();
  ::std::string* release_stock_ticker();
  void set_allocated_stock_ticker(::std::string* stock_ticker);

  // .Price price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  private:
  const ::Price& _internal_price() const;
  public:
  const ::Price& price() const;
  ::Price* release_price();
  ::Price* mutable_price();
  void set_allocated_price(::Price* price);

  // .BrokerageId brokerage_id = 4;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 4;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // uint32 quantity = 1;
  void clear_quantity();
  static const int kQuantityFieldNumber = 1;
  ::google::protobuf::uint32 quantity() const;
  void set_quantity(::google::protobuf::uint32 value);

  // uint32 transaction_id = 5;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 5;
  ::google::protobuf::uint32 transaction_id() const;
  void set_transaction_id(::google::protobuf::uint32 value);

  // bool tip_flag = 6;
  void clear_tip_flag();
  static const int kTipFlagFieldNumber = 6;
  bool tip_flag() const;
  void set_tip_flag(bool value);

  // uint32 hour = 7;
  void clear_hour();
  static const int kHourFieldNumber = 7;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 day = 8;
  void clear_day();
  static const int kDayFieldNumber = 8;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BuySell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stock_ticker_;
  ::Price* price_;
  ::BrokerageId* brokerage_id_;
  ::google::protobuf::uint32 quantity_;
  ::google::protobuf::uint32 transaction_id_;
  bool tip_flag_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Price

// uint32 dollars = 1;
inline void Price::clear_dollars() {
  dollars_ = 0u;
}
inline ::google::protobuf::uint32 Price::dollars() const {
  // @@protoc_insertion_point(field_get:Price.dollars)
  return dollars_;
}
inline void Price::set_dollars(::google::protobuf::uint32 value) {
  
  dollars_ = value;
  // @@protoc_insertion_point(field_set:Price.dollars)
}

// uint32 cents = 2;
inline void Price::clear_cents() {
  cents_ = 0u;
}
inline ::google::protobuf::uint32 Price::cents() const {
  // @@protoc_insertion_point(field_get:Price.cents)
  return cents_;
}
inline void Price::set_cents(::google::protobuf::uint32 value) {
  
  cents_ = value;
  // @@protoc_insertion_point(field_set:Price.cents)
}

// -------------------------------------------------------------------

// BrokerageId

// uint32 brokerage = 1;
inline void BrokerageId::clear_brokerage() {
  brokerage_ = 0u;
}
inline ::google::protobuf::uint32 BrokerageId::brokerage() const {
  // @@protoc_insertion_point(field_get:BrokerageId.brokerage)
  return brokerage_;
}
inline void BrokerageId::set_brokerage(::google::protobuf::uint32 value) {
  
  brokerage_ = value;
  // @@protoc_insertion_point(field_set:BrokerageId.brokerage)
}

// uint32 trader = 2;
inline void BrokerageId::clear_trader() {
  trader_ = 0u;
}
inline ::google::protobuf::uint32 BrokerageId::trader() const {
  // @@protoc_insertion_point(field_get:BrokerageId.trader)
  return trader_;
}
inline void BrokerageId::set_trader(::google::protobuf::uint32 value) {
  
  trader_ = value;
  // @@protoc_insertion_point(field_set:BrokerageId.trader)
}

// -------------------------------------------------------------------

// Header

// uint32 version = 1;
inline void Header::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:Header.version)
  return version_;
}
inline void Header::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Header.version)
}

// .Magic magic = 2;
inline void Header::clear_magic() {
  magic_ = 0;
}
inline ::Magic Header::magic() const {
  // @@protoc_insertion_point(field_get:Header.magic)
  return static_cast< ::Magic >(magic_);
}
inline void Header::set_magic(::Magic value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:Header.magic)
}

// uint32 serial = 3;
inline void Header::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 Header::serial() const {
  // @@protoc_insertion_point(field_get:Header.serial)
  return serial_;
}
inline void Header::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:Header.serial)
}

// -------------------------------------------------------------------

// BuySell

// uint32 quantity = 1;
inline void BuySell::clear_quantity() {
  quantity_ = 0u;
}
inline ::google::protobuf::uint32 BuySell::quantity() const {
  // @@protoc_insertion_point(field_get:BuySell.quantity)
  return quantity_;
}
inline void BuySell::set_quantity(::google::protobuf::uint32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:BuySell.quantity)
}

// .Price price = 2;
inline bool BuySell::has_price() const {
  return this != internal_default_instance() && price_ != NULL;
}
inline void BuySell::clear_price() {
  if (GetArenaNoVirtual() == NULL && price_ != NULL) {
    delete price_;
  }
  price_ = NULL;
}
inline const ::Price& BuySell::_internal_price() const {
  return *price_;
}
inline const ::Price& BuySell::price() const {
  const ::Price* p = price_;
  // @@protoc_insertion_point(field_get:BuySell.price)
  return p != NULL ? *p : *reinterpret_cast<const ::Price*>(
      &::_Price_default_instance_);
}
inline ::Price* BuySell::release_price() {
  // @@protoc_insertion_point(field_release:BuySell.price)
  
  ::Price* temp = price_;
  price_ = NULL;
  return temp;
}
inline ::Price* BuySell::mutable_price() {
  
  if (price_ == NULL) {
    auto* p = CreateMaybeMessage<::Price>(GetArenaNoVirtual());
    price_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BuySell.price)
  return price_;
}
inline void BuySell::set_allocated_price(::Price* price) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete price_;
  }
  if (price) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      price = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:BuySell.price)
}

// string stock_ticker = 3;
inline void BuySell::clear_stock_ticker() {
  stock_ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuySell::stock_ticker() const {
  // @@protoc_insertion_point(field_get:BuySell.stock_ticker)
  return stock_ticker_.GetNoArena();
}
inline void BuySell::set_stock_ticker(const ::std::string& value) {
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BuySell.stock_ticker)
}
#if LANG_CXX11
inline void BuySell::set_stock_ticker(::std::string&& value) {
  
  stock_ticker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BuySell.stock_ticker)
}
#endif
inline void BuySell::set_stock_ticker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BuySell.stock_ticker)
}
inline void BuySell::set_stock_ticker(const char* value, size_t size) {
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BuySell.stock_ticker)
}
inline ::std::string* BuySell::mutable_stock_ticker() {
  
  // @@protoc_insertion_point(field_mutable:BuySell.stock_ticker)
  return stock_ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuySell::release_stock_ticker() {
  // @@protoc_insertion_point(field_release:BuySell.stock_ticker)
  
  return stock_ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuySell::set_allocated_stock_ticker(::std::string* stock_ticker) {
  if (stock_ticker != NULL) {
    
  } else {
    
  }
  stock_ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_ticker);
  // @@protoc_insertion_point(field_set_allocated:BuySell.stock_ticker)
}

// .BrokerageId brokerage_id = 4;
inline bool BuySell::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline void BuySell::clear_brokerage_id() {
  if (GetArenaNoVirtual() == NULL && brokerage_id_ != NULL) {
    delete brokerage_id_;
  }
  brokerage_id_ = NULL;
}
inline const ::BrokerageId& BuySell::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& BuySell::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:BuySell.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* BuySell::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:BuySell.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* BuySell::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BuySell.brokerage_id)
  return brokerage_id_;
}
inline void BuySell::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete brokerage_id_;
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:BuySell.brokerage_id)
}

// uint32 transaction_id = 5;
inline void BuySell::clear_transaction_id() {
  transaction_id_ = 0u;
}
inline ::google::protobuf::uint32 BuySell::transaction_id() const {
  // @@protoc_insertion_point(field_get:BuySell.transaction_id)
  return transaction_id_;
}
inline void BuySell::set_transaction_id(::google::protobuf::uint32 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:BuySell.transaction_id)
}

// bool tip_flag = 6;
inline void BuySell::clear_tip_flag() {
  tip_flag_ = false;
}
inline bool BuySell::tip_flag() const {
  // @@protoc_insertion_point(field_get:BuySell.tip_flag)
  return tip_flag_;
}
inline void BuySell::set_tip_flag(bool value) {
  
  tip_flag_ = value;
  // @@protoc_insertion_point(field_set:BuySell.tip_flag)
}

// uint32 hour = 7;
inline void BuySell::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 BuySell::hour() const {
  // @@protoc_insertion_point(field_get:BuySell.hour)
  return hour_;
}
inline void BuySell::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:BuySell.hour)
}

// uint32 day = 8;
inline void BuySell::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 BuySell::day() const {
  // @@protoc_insertion_point(field_get:BuySell.day)
  return day_;
}
inline void BuySell::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:BuySell.day)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Magic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Magic>() {
  return ::Magic_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
