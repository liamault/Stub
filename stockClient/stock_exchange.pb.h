// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_exchange.proto

#ifndef PROTOBUF_INCLUDED_stock_5fexchange_2eproto
#define PROTOBUF_INCLUDED_stock_5fexchange_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stock_5fexchange_2eproto 

namespace protobuf_stock_5fexchange_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stock_5fexchange_2eproto
namespace stock_exchange {
class BuySpec;
class BuySpecDefaultTypeInternal;
extern BuySpecDefaultTypeInternal _BuySpec_default_instance_;
class Cancel;
class CancelDefaultTypeInternal;
extern CancelDefaultTypeInternal _Cancel_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace stock_exchange
namespace google {
namespace protobuf {
template<> ::stock_exchange::BuySpec* Arena::CreateMaybeMessage<::stock_exchange::BuySpec>(Arena*);
template<> ::stock_exchange::Cancel* Arena::CreateMaybeMessage<::stock_exchange::Cancel>(Arena*);
template<> ::stock_exchange::Packet* Arena::CreateMaybeMessage<::stock_exchange::Packet>(Arena*);
template<> ::stock_exchange::Query* Arena::CreateMaybeMessage<::stock_exchange::Query>(Arena*);
template<> ::stock_exchange::Response* Arena::CreateMaybeMessage<::stock_exchange::Response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace stock_exchange {

enum Response_ResponseType {
  Response_ResponseType_INVALID = 0,
  Response_ResponseType_MALFORMED_MESSAGE = 1,
  Response_ResponseType_INVALID_TRANSACTION_ID = 2,
  Response_ResponseType_INVALID_BROKERAGE_ID = 3,
  Response_ResponseType_INVALID_PRICE = 4,
  Response_ResponseType_SUCCESS = 5,
  Response_ResponseType_WITHDRAW_FAILED_NOT_ENOUGH_BALANCE = 6,
  Response_ResponseType_NO_MATCHING_REQUEST = 7,
  Response_ResponseType_Response_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_ResponseType_Response_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_ResponseType_IsValid(int value);
const Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_INVALID;
const Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_NO_MATCHING_REQUEST;
const int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor();
inline const ::std::string& Response_ResponseType_Name(Response_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResponseType_descriptor(), value);
}
inline bool Response_ResponseType_Parse(
    const ::std::string& name, Response_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
enum BuyOrSell {
  BUY = 0,
  SELL = 1,
  BuyOrSell_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BuyOrSell_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BuyOrSell_IsValid(int value);
const BuyOrSell BuyOrSell_MIN = BUY;
const BuyOrSell BuyOrSell_MAX = SELL;
const int BuyOrSell_ARRAYSIZE = BuyOrSell_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuyOrSell_descriptor();
inline const ::std::string& BuyOrSell_Name(BuyOrSell value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuyOrSell_descriptor(), value);
}
inline bool BuyOrSell_Parse(
    const ::std::string& name, BuyOrSell* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuyOrSell>(
    BuyOrSell_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  enum PayloadCase {
    kBuy = 2,
    kSell = 3,
    kBuySpec = 4,
    kQuery = 5,
    kCancel = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(NULL);
  }

  Packet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Header& _internal_header() const;
  public:
  const ::Header& header() const;
  ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);

  // .BuySell buy = 2;
  bool has_buy() const;
  void clear_buy();
  static const int kBuyFieldNumber = 2;
  private:
  const ::BuySell& _internal_buy() const;
  public:
  const ::BuySell& buy() const;
  ::BuySell* release_buy();
  ::BuySell* mutable_buy();
  void set_allocated_buy(::BuySell* buy);

  // .BuySell sell = 3;
  bool has_sell() const;
  void clear_sell();
  static const int kSellFieldNumber = 3;
  private:
  const ::BuySell& _internal_sell() const;
  public:
  const ::BuySell& sell() const;
  ::BuySell* release_sell();
  ::BuySell* mutable_sell();
  void set_allocated_sell(::BuySell* sell);

  // .stock_exchange.BuySpec buy_spec = 4;
  bool has_buy_spec() const;
  void clear_buy_spec();
  static const int kBuySpecFieldNumber = 4;
  private:
  const ::stock_exchange::BuySpec& _internal_buy_spec() const;
  public:
  const ::stock_exchange::BuySpec& buy_spec() const;
  ::stock_exchange::BuySpec* release_buy_spec();
  ::stock_exchange::BuySpec* mutable_buy_spec();
  void set_allocated_buy_spec(::stock_exchange::BuySpec* buy_spec);

  // .stock_exchange.Query query = 5;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 5;
  private:
  const ::stock_exchange::Query& _internal_query() const;
  public:
  const ::stock_exchange::Query& query() const;
  ::stock_exchange::Query* release_query();
  ::stock_exchange::Query* mutable_query();
  void set_allocated_query(::stock_exchange::Query* query);

  // .stock_exchange.Cancel cancel = 6;
  bool has_cancel() const;
  void clear_cancel();
  static const int kCancelFieldNumber = 6;
  private:
  const ::stock_exchange::Cancel& _internal_cancel() const;
  public:
  const ::stock_exchange::Cancel& cancel() const;
  ::stock_exchange::Cancel* release_cancel();
  ::stock_exchange::Cancel* mutable_cancel();
  void set_allocated_cancel(::stock_exchange::Cancel* cancel);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:stock_exchange.Packet)
 private:
  void set_has_buy();
  void set_has_sell();
  void set_has_buy_spec();
  void set_has_query();
  void set_has_cancel();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Header* header_;
  union PayloadUnion {
    PayloadUnion() {}
    ::BuySell* buy_;
    ::BuySell* sell_;
    ::stock_exchange::BuySpec* buy_spec_;
    ::stock_exchange::Query* query_;
    ::stock_exchange::Cancel* cancel_;
  } payload_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_stock_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_ResponseType ResponseType;
  static const ResponseType INVALID =
    Response_ResponseType_INVALID;
  static const ResponseType MALFORMED_MESSAGE =
    Response_ResponseType_MALFORMED_MESSAGE;
  static const ResponseType INVALID_TRANSACTION_ID =
    Response_ResponseType_INVALID_TRANSACTION_ID;
  static const ResponseType INVALID_BROKERAGE_ID =
    Response_ResponseType_INVALID_BROKERAGE_ID;
  static const ResponseType INVALID_PRICE =
    Response_ResponseType_INVALID_PRICE;
  static const ResponseType SUCCESS =
    Response_ResponseType_SUCCESS;
  static const ResponseType WITHDRAW_FAILED_NOT_ENOUGH_BALANCE =
    Response_ResponseType_WITHDRAW_FAILED_NOT_ENOUGH_BALANCE;
  static const ResponseType NO_MATCHING_REQUEST =
    Response_ResponseType_NO_MATCHING_REQUEST;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return Response_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .BuySell buys = 5;
  int buys_size() const;
  void clear_buys();
  static const int kBuysFieldNumber = 5;
  ::BuySell* mutable_buys(int index);
  ::google::protobuf::RepeatedPtrField< ::BuySell >*
      mutable_buys();
  const ::BuySell& buys(int index) const;
  ::BuySell* add_buys();
  const ::google::protobuf::RepeatedPtrField< ::BuySell >&
      buys() const;

  // repeated .BuySell sells = 6;
  int sells_size() const;
  void clear_sells();
  static const int kSellsFieldNumber = 6;
  ::BuySell* mutable_sells(int index);
  ::google::protobuf::RepeatedPtrField< ::BuySell >*
      mutable_sells();
  const ::BuySell& sells(int index) const;
  ::BuySell* add_sells();
  const ::google::protobuf::RepeatedPtrField< ::BuySell >&
      sells() const;

  // .Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::Header& _internal_header() const;
  public:
  const ::Header& header() const;
  ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);

  // .BrokerageId brokerage_id = 3;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 3;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  ::google::protobuf::uint32 transaction_id() const;
  void set_transaction_id(::google::protobuf::uint32 value);

  // .stock_exchange.Response.ResponseType response = 4;
  void clear_response();
  static const int kResponseFieldNumber = 4;
  ::stock_exchange::Response_ResponseType response() const;
  void set_response(::stock_exchange::Response_ResponseType value);

  // @@protoc_insertion_point(class_scope:stock_exchange.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BuySell > buys_;
  ::google::protobuf::RepeatedPtrField< ::BuySell > sells_;
  ::Header* header_;
  ::BrokerageId* brokerage_id_;
  ::google::protobuf::uint32 transaction_id_;
  int response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stock_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuySpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_exchange.BuySpec) */ {
 public:
  BuySpec();
  virtual ~BuySpec();

  BuySpec(const BuySpec& from);

  inline BuySpec& operator=(const BuySpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuySpec(BuySpec&& from) noexcept
    : BuySpec() {
    *this = ::std::move(from);
  }

  inline BuySpec& operator=(BuySpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuySpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuySpec* internal_default_instance() {
    return reinterpret_cast<const BuySpec*>(
               &_BuySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BuySpec* other);
  friend void swap(BuySpec& a, BuySpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuySpec* New() const final {
    return CreateMaybeMessage<BuySpec>(NULL);
  }

  BuySpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuySpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuySpec& from);
  void MergeFrom(const BuySpec& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuySpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 1;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  ::google::protobuf::uint32 transaction_id() const;
  void set_transaction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:stock_exchange.BuySpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BrokerageId* brokerage_id_;
  ::google::protobuf::uint32 transaction_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stock_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cancel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Cancel) */ {
 public:
  Cancel();
  virtual ~Cancel();

  Cancel(const Cancel& from);

  inline Cancel& operator=(const Cancel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cancel(Cancel&& from) noexcept
    : Cancel() {
    *this = ::std::move(from);
  }

  inline Cancel& operator=(Cancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cancel* internal_default_instance() {
    return reinterpret_cast<const Cancel*>(
               &_Cancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Cancel* other);
  friend void swap(Cancel& a, Cancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cancel* New() const final {
    return CreateMaybeMessage<Cancel>(NULL);
  }

  Cancel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cancel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cancel& from);
  void MergeFrom(const Cancel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 1;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  ::google::protobuf::uint32 transaction_id() const;
  void set_transaction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:stock_exchange.Cancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BrokerageId* brokerage_id_;
  ::google::protobuf::uint32 transaction_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stock_5fexchange_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stock_ticker = 3;
  void clear_stock_ticker();
  static const int kStockTickerFieldNumber = 3;
  const ::std::string& stock_ticker() const;
  void set_stock_ticker(const ::std::string& value);
  #if LANG_CXX11
  void set_stock_ticker(::std::string&& value);
  #endif
  void set_stock_ticker(const char* value);
  void set_stock_ticker(const char* value, size_t size);
  ::std::string* mutable_stock_ticker();
  ::std::string* release_stock_ticker();
  void set_allocated_stock_ticker(::std::string* stock_ticker);

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  void clear_brokerage_id();
  static const int kBrokerageIdFieldNumber = 1;
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  public:
  const ::BrokerageId& brokerage_id() const;
  ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);

  // .BrokerageId brokerage_id_look = 2;
  bool has_brokerage_id_look() const;
  void clear_brokerage_id_look();
  static const int kBrokerageIdLookFieldNumber = 2;
  private:
  const ::BrokerageId& _internal_brokerage_id_look() const;
  public:
  const ::BrokerageId& brokerage_id_look() const;
  ::BrokerageId* release_brokerage_id_look();
  ::BrokerageId* mutable_brokerage_id_look();
  void set_allocated_brokerage_id_look(::BrokerageId* brokerage_id_look);

  // .stock_exchange.BuyOrSell buy_or_sell = 4;
  void clear_buy_or_sell();
  static const int kBuyOrSellFieldNumber = 4;
  ::stock_exchange::BuyOrSell buy_or_sell() const;
  void set_buy_or_sell(::stock_exchange::BuyOrSell value);

  // uint32 filters = 5;
  void clear_filters();
  static const int kFiltersFieldNumber = 5;
  ::google::protobuf::uint32 filters() const;
  void set_filters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:stock_exchange.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stock_ticker_;
  ::BrokerageId* brokerage_id_;
  ::BrokerageId* brokerage_id_look_;
  int buy_or_sell_;
  ::google::protobuf::uint32 filters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stock_5fexchange_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .Header header = 1;
inline bool Packet::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::Header& Packet::_internal_header() const {
  return *header_;
}
inline const ::Header& Packet::header() const {
  const ::Header* p = header_;
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Header*>(
      &::_Header_default_instance_);
}
inline ::Header* Packet::release_header() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.header)
  
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Header* Packet::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.header)
  return header_;
}
inline void Packet::set_allocated_header(::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.header)
}

// .BuySell buy = 2;
inline bool Packet::has_buy() const {
  return payload_case() == kBuy;
}
inline void Packet::set_has_buy() {
  _oneof_case_[0] = kBuy;
}
inline const ::BuySell& Packet::_internal_buy() const {
  return *payload_.buy_;
}
inline ::BuySell* Packet::release_buy() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.buy)
  if (has_buy()) {
    clear_has_payload();
      ::BuySell* temp = payload_.buy_;
    payload_.buy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BuySell& Packet::buy() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.buy)
  return has_buy()
      ? *payload_.buy_
      : *reinterpret_cast< ::BuySell*>(&::_BuySell_default_instance_);
}
inline ::BuySell* Packet::mutable_buy() {
  if (!has_buy()) {
    clear_payload();
    set_has_buy();
    payload_.buy_ = CreateMaybeMessage< ::BuySell >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.buy)
  return payload_.buy_;
}

// .BuySell sell = 3;
inline bool Packet::has_sell() const {
  return payload_case() == kSell;
}
inline void Packet::set_has_sell() {
  _oneof_case_[0] = kSell;
}
inline const ::BuySell& Packet::_internal_sell() const {
  return *payload_.sell_;
}
inline ::BuySell* Packet::release_sell() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.sell)
  if (has_sell()) {
    clear_has_payload();
      ::BuySell* temp = payload_.sell_;
    payload_.sell_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BuySell& Packet::sell() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.sell)
  return has_sell()
      ? *payload_.sell_
      : *reinterpret_cast< ::BuySell*>(&::_BuySell_default_instance_);
}
inline ::BuySell* Packet::mutable_sell() {
  if (!has_sell()) {
    clear_payload();
    set_has_sell();
    payload_.sell_ = CreateMaybeMessage< ::BuySell >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.sell)
  return payload_.sell_;
}

// .stock_exchange.BuySpec buy_spec = 4;
inline bool Packet::has_buy_spec() const {
  return payload_case() == kBuySpec;
}
inline void Packet::set_has_buy_spec() {
  _oneof_case_[0] = kBuySpec;
}
inline void Packet::clear_buy_spec() {
  if (has_buy_spec()) {
    delete payload_.buy_spec_;
    clear_has_payload();
  }
}
inline const ::stock_exchange::BuySpec& Packet::_internal_buy_spec() const {
  return *payload_.buy_spec_;
}
inline ::stock_exchange::BuySpec* Packet::release_buy_spec() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.buy_spec)
  if (has_buy_spec()) {
    clear_has_payload();
      ::stock_exchange::BuySpec* temp = payload_.buy_spec_;
    payload_.buy_spec_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::stock_exchange::BuySpec& Packet::buy_spec() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.buy_spec)
  return has_buy_spec()
      ? *payload_.buy_spec_
      : *reinterpret_cast< ::stock_exchange::BuySpec*>(&::stock_exchange::_BuySpec_default_instance_);
}
inline ::stock_exchange::BuySpec* Packet::mutable_buy_spec() {
  if (!has_buy_spec()) {
    clear_payload();
    set_has_buy_spec();
    payload_.buy_spec_ = CreateMaybeMessage< ::stock_exchange::BuySpec >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.buy_spec)
  return payload_.buy_spec_;
}

// .stock_exchange.Query query = 5;
inline bool Packet::has_query() const {
  return payload_case() == kQuery;
}
inline void Packet::set_has_query() {
  _oneof_case_[0] = kQuery;
}
inline void Packet::clear_query() {
  if (has_query()) {
    delete payload_.query_;
    clear_has_payload();
  }
}
inline const ::stock_exchange::Query& Packet::_internal_query() const {
  return *payload_.query_;
}
inline ::stock_exchange::Query* Packet::release_query() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.query)
  if (has_query()) {
    clear_has_payload();
      ::stock_exchange::Query* temp = payload_.query_;
    payload_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::stock_exchange::Query& Packet::query() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.query)
  return has_query()
      ? *payload_.query_
      : *reinterpret_cast< ::stock_exchange::Query*>(&::stock_exchange::_Query_default_instance_);
}
inline ::stock_exchange::Query* Packet::mutable_query() {
  if (!has_query()) {
    clear_payload();
    set_has_query();
    payload_.query_ = CreateMaybeMessage< ::stock_exchange::Query >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.query)
  return payload_.query_;
}

// .stock_exchange.Cancel cancel = 6;
inline bool Packet::has_cancel() const {
  return payload_case() == kCancel;
}
inline void Packet::set_has_cancel() {
  _oneof_case_[0] = kCancel;
}
inline void Packet::clear_cancel() {
  if (has_cancel()) {
    delete payload_.cancel_;
    clear_has_payload();
  }
}
inline const ::stock_exchange::Cancel& Packet::_internal_cancel() const {
  return *payload_.cancel_;
}
inline ::stock_exchange::Cancel* Packet::release_cancel() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.cancel)
  if (has_cancel()) {
    clear_has_payload();
      ::stock_exchange::Cancel* temp = payload_.cancel_;
    payload_.cancel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::stock_exchange::Cancel& Packet::cancel() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.cancel)
  return has_cancel()
      ? *payload_.cancel_
      : *reinterpret_cast< ::stock_exchange::Cancel*>(&::stock_exchange::_Cancel_default_instance_);
}
inline ::stock_exchange::Cancel* Packet::mutable_cancel() {
  if (!has_cancel()) {
    clear_payload();
    set_has_cancel();
    payload_.cancel_ = CreateMaybeMessage< ::stock_exchange::Cancel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.cancel)
  return payload_.cancel_;
}

inline bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Packet::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .Header header = 1;
inline bool Response::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::Header& Response::_internal_header() const {
  return *header_;
}
inline const ::Header& Response::header() const {
  const ::Header* p = header_;
  // @@protoc_insertion_point(field_get:stock_exchange.Response.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Header*>(
      &::_Header_default_instance_);
}
inline ::Header* Response::release_header() {
  // @@protoc_insertion_point(field_release:stock_exchange.Response.header)
  
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Header* Response::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.header)
  return header_;
}
inline void Response::set_allocated_header(::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Response.header)
}

// uint32 transaction_id = 2;
inline void Response::clear_transaction_id() {
  transaction_id_ = 0u;
}
inline ::google::protobuf::uint32 Response::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.transaction_id)
  return transaction_id_;
}
inline void Response::set_transaction_id(::google::protobuf::uint32 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.Response.transaction_id)
}

// .BrokerageId brokerage_id = 3;
inline bool Response::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& Response::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& Response::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:stock_exchange.Response.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Response::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Response.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* Response::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.brokerage_id)
  return brokerage_id_;
}
inline void Response::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Response.brokerage_id)
}

// .stock_exchange.Response.ResponseType response = 4;
inline void Response::clear_response() {
  response_ = 0;
}
inline ::stock_exchange::Response_ResponseType Response::response() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.response)
  return static_cast< ::stock_exchange::Response_ResponseType >(response_);
}
inline void Response::set_response(::stock_exchange::Response_ResponseType value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.Response.response)
}

// repeated .BuySell buys = 5;
inline int Response::buys_size() const {
  return buys_.size();
}
inline ::BuySell* Response::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.buys)
  return buys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BuySell >*
Response::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:stock_exchange.Response.buys)
  return &buys_;
}
inline const ::BuySell& Response::buys(int index) const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.buys)
  return buys_.Get(index);
}
inline ::BuySell* Response::add_buys() {
  // @@protoc_insertion_point(field_add:stock_exchange.Response.buys)
  return buys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BuySell >&
Response::buys() const {
  // @@protoc_insertion_point(field_list:stock_exchange.Response.buys)
  return buys_;
}

// repeated .BuySell sells = 6;
inline int Response::sells_size() const {
  return sells_.size();
}
inline ::BuySell* Response::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.sells)
  return sells_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::BuySell >*
Response::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:stock_exchange.Response.sells)
  return &sells_;
}
inline const ::BuySell& Response::sells(int index) const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.sells)
  return sells_.Get(index);
}
inline ::BuySell* Response::add_sells() {
  // @@protoc_insertion_point(field_add:stock_exchange.Response.sells)
  return sells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BuySell >&
Response::sells() const {
  // @@protoc_insertion_point(field_list:stock_exchange.Response.sells)
  return sells_;
}

// -------------------------------------------------------------------

// BuySpec

// .BrokerageId brokerage_id = 1;
inline bool BuySpec::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& BuySpec::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& BuySpec::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:stock_exchange.BuySpec.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* BuySpec::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.BuySpec.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* BuySpec::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.BuySpec.brokerage_id)
  return brokerage_id_;
}
inline void BuySpec::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.BuySpec.brokerage_id)
}

// uint32 transaction_id = 2;
inline void BuySpec::clear_transaction_id() {
  transaction_id_ = 0u;
}
inline ::google::protobuf::uint32 BuySpec::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.BuySpec.transaction_id)
  return transaction_id_;
}
inline void BuySpec::set_transaction_id(::google::protobuf::uint32 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.BuySpec.transaction_id)
}

// -------------------------------------------------------------------

// Cancel

// .BrokerageId brokerage_id = 1;
inline bool Cancel::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& Cancel::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& Cancel::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:stock_exchange.Cancel.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Cancel::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Cancel.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* Cancel::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Cancel.brokerage_id)
  return brokerage_id_;
}
inline void Cancel::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Cancel.brokerage_id)
}

// uint32 transaction_id = 2;
inline void Cancel::clear_transaction_id() {
  transaction_id_ = 0u;
}
inline ::google::protobuf::uint32 Cancel::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Cancel.transaction_id)
  return transaction_id_;
}
inline void Cancel::set_transaction_id(::google::protobuf::uint32 value) {
  
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.Cancel.transaction_id)
}

// -------------------------------------------------------------------

// Query

// .BrokerageId brokerage_id = 1;
inline bool Query::has_brokerage_id() const {
  return this != internal_default_instance() && brokerage_id_ != NULL;
}
inline const ::BrokerageId& Query::_internal_brokerage_id() const {
  return *brokerage_id_;
}
inline const ::BrokerageId& Query::brokerage_id() const {
  const ::BrokerageId* p = brokerage_id_;
  // @@protoc_insertion_point(field_get:stock_exchange.Query.brokerage_id)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Query::release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.brokerage_id)
  
  ::BrokerageId* temp = brokerage_id_;
  brokerage_id_ = NULL;
  return temp;
}
inline ::BrokerageId* Query::mutable_brokerage_id() {
  
  if (brokerage_id_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.brokerage_id)
  return brokerage_id_;
}
inline void Query::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_);
  }
  if (brokerage_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.brokerage_id)
}

// .BrokerageId brokerage_id_look = 2;
inline bool Query::has_brokerage_id_look() const {
  return this != internal_default_instance() && brokerage_id_look_ != NULL;
}
inline const ::BrokerageId& Query::_internal_brokerage_id_look() const {
  return *brokerage_id_look_;
}
inline const ::BrokerageId& Query::brokerage_id_look() const {
  const ::BrokerageId* p = brokerage_id_look_;
  // @@protoc_insertion_point(field_get:stock_exchange.Query.brokerage_id_look)
  return p != NULL ? *p : *reinterpret_cast<const ::BrokerageId*>(
      &::_BrokerageId_default_instance_);
}
inline ::BrokerageId* Query::release_brokerage_id_look() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.brokerage_id_look)
  
  ::BrokerageId* temp = brokerage_id_look_;
  brokerage_id_look_ = NULL;
  return temp;
}
inline ::BrokerageId* Query::mutable_brokerage_id_look() {
  
  if (brokerage_id_look_ == NULL) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaNoVirtual());
    brokerage_id_look_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.brokerage_id_look)
  return brokerage_id_look_;
}
inline void Query::set_allocated_brokerage_id_look(::BrokerageId* brokerage_id_look) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(brokerage_id_look_);
  }
  if (brokerage_id_look) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      brokerage_id_look = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, brokerage_id_look, submessage_arena);
    }
    
  } else {
    
  }
  brokerage_id_look_ = brokerage_id_look;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.brokerage_id_look)
}

// string stock_ticker = 3;
inline void Query::clear_stock_ticker() {
  stock_ticker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Query::stock_ticker() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.stock_ticker)
  return stock_ticker_.GetNoArena();
}
inline void Query::set_stock_ticker(const ::std::string& value) {
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stock_exchange.Query.stock_ticker)
}
#if LANG_CXX11
inline void Query::set_stock_ticker(::std::string&& value) {
  
  stock_ticker_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stock_exchange.Query.stock_ticker)
}
#endif
inline void Query::set_stock_ticker(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stock_exchange.Query.stock_ticker)
}
inline void Query::set_stock_ticker(const char* value, size_t size) {
  
  stock_ticker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stock_exchange.Query.stock_ticker)
}
inline ::std::string* Query::mutable_stock_ticker() {
  
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.stock_ticker)
  return stock_ticker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_stock_ticker() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.stock_ticker)
  
  return stock_ticker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_stock_ticker(::std::string* stock_ticker) {
  if (stock_ticker != NULL) {
    
  } else {
    
  }
  stock_ticker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_ticker);
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.stock_ticker)
}

// .stock_exchange.BuyOrSell buy_or_sell = 4;
inline void Query::clear_buy_or_sell() {
  buy_or_sell_ = 0;
}
inline ::stock_exchange::BuyOrSell Query::buy_or_sell() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.buy_or_sell)
  return static_cast< ::stock_exchange::BuyOrSell >(buy_or_sell_);
}
inline void Query::set_buy_or_sell(::stock_exchange::BuyOrSell value) {
  
  buy_or_sell_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.Query.buy_or_sell)
}

// uint32 filters = 5;
inline void Query::clear_filters() {
  filters_ = 0u;
}
inline ::google::protobuf::uint32 Query::filters() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.filters)
  return filters_;
}
inline void Query::set_filters(::google::protobuf::uint32 value) {
  
  filters_ = value;
  // @@protoc_insertion_point(field_set:stock_exchange.Query.filters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stock_exchange

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::stock_exchange::Response_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_exchange::Response_ResponseType>() {
  return ::stock_exchange::Response_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::stock_exchange::BuyOrSell> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_exchange::BuyOrSell>() {
  return ::stock_exchange::BuyOrSell_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stock_5fexchange_2eproto
