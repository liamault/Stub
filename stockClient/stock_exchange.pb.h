// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stock_exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stock_5fexchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stock_5fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stock_5fexchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stock_5fexchange_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stock_5fexchange_2eproto;
namespace stock_exchange {
class BuySpec;
struct BuySpecDefaultTypeInternal;
extern BuySpecDefaultTypeInternal _BuySpec_default_instance_;
class Cancel;
struct CancelDefaultTypeInternal;
extern CancelDefaultTypeInternal _Cancel_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Query;
struct QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace stock_exchange
PROTOBUF_NAMESPACE_OPEN
template<> ::stock_exchange::BuySpec* Arena::CreateMaybeMessage<::stock_exchange::BuySpec>(Arena*);
template<> ::stock_exchange::Cancel* Arena::CreateMaybeMessage<::stock_exchange::Cancel>(Arena*);
template<> ::stock_exchange::Packet* Arena::CreateMaybeMessage<::stock_exchange::Packet>(Arena*);
template<> ::stock_exchange::Query* Arena::CreateMaybeMessage<::stock_exchange::Query>(Arena*);
template<> ::stock_exchange::Response* Arena::CreateMaybeMessage<::stock_exchange::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stock_exchange {

enum Response_ResponseType : int {
  Response_ResponseType_INVALID = 0,
  Response_ResponseType_MALFORMED_MESSAGE = 1,
  Response_ResponseType_INVALID_TRANSACTION_ID = 2,
  Response_ResponseType_INVALID_BROKERAGE_ID = 3,
  Response_ResponseType_INVALID_PRICE = 4,
  Response_ResponseType_SUCCESS = 5,
  Response_ResponseType_WITHDRAW_FAILED_NOT_ENOUGH_BALANCE = 6,
  Response_ResponseType_NO_MATCHING_REQUEST = 7,
  Response_ResponseType_Response_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Response_ResponseType_Response_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Response_ResponseType_IsValid(int value);
constexpr Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_INVALID;
constexpr Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_NO_MATCHING_REQUEST;
constexpr int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_ResponseType_descriptor();
template<typename T>
inline const std::string& Response_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_ResponseType_descriptor(), enum_t_value);
}
inline bool Response_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
enum BuyOrSell : int {
  BUY = 0,
  SELL = 1,
  BuyOrSell_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BuyOrSell_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BuyOrSell_IsValid(int value);
constexpr BuyOrSell BuyOrSell_MIN = BUY;
constexpr BuyOrSell BuyOrSell_MAX = SELL;
constexpr int BuyOrSell_ARRAYSIZE = BuyOrSell_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuyOrSell_descriptor();
template<typename T>
inline const std::string& BuyOrSell_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuyOrSell>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuyOrSell_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BuyOrSell_descriptor(), enum_t_value);
}
inline bool BuyOrSell_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuyOrSell* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BuyOrSell>(
    BuyOrSell_descriptor(), name, value);
}
// ===================================================================

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kBuy = 2,
    kSell = 3,
    kBuySpec = 4,
    kQuery = 5,
    kCancel = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_exchange.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBuyFieldNumber = 2,
    kSellFieldNumber = 3,
    kBuySpecFieldNumber = 4,
    kQueryFieldNumber = 5,
    kCancelFieldNumber = 6,
  };
  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .BuySell buy = 2;
  bool has_buy() const;
  private:
  bool _internal_has_buy() const;
  public:
  void clear_buy();
  const ::BuySell& buy() const;
  PROTOBUF_NODISCARD ::BuySell* release_buy();
  ::BuySell* mutable_buy();
  void set_allocated_buy(::BuySell* buy);
  private:
  const ::BuySell& _internal_buy() const;
  ::BuySell* _internal_mutable_buy();
  public:
  void unsafe_arena_set_allocated_buy(
      ::BuySell* buy);
  ::BuySell* unsafe_arena_release_buy();

  // .BuySell sell = 3;
  bool has_sell() const;
  private:
  bool _internal_has_sell() const;
  public:
  void clear_sell();
  const ::BuySell& sell() const;
  PROTOBUF_NODISCARD ::BuySell* release_sell();
  ::BuySell* mutable_sell();
  void set_allocated_sell(::BuySell* sell);
  private:
  const ::BuySell& _internal_sell() const;
  ::BuySell* _internal_mutable_sell();
  public:
  void unsafe_arena_set_allocated_sell(
      ::BuySell* sell);
  ::BuySell* unsafe_arena_release_sell();

  // .stock_exchange.BuySpec buy_spec = 4;
  bool has_buy_spec() const;
  private:
  bool _internal_has_buy_spec() const;
  public:
  void clear_buy_spec();
  const ::stock_exchange::BuySpec& buy_spec() const;
  PROTOBUF_NODISCARD ::stock_exchange::BuySpec* release_buy_spec();
  ::stock_exchange::BuySpec* mutable_buy_spec();
  void set_allocated_buy_spec(::stock_exchange::BuySpec* buy_spec);
  private:
  const ::stock_exchange::BuySpec& _internal_buy_spec() const;
  ::stock_exchange::BuySpec* _internal_mutable_buy_spec();
  public:
  void unsafe_arena_set_allocated_buy_spec(
      ::stock_exchange::BuySpec* buy_spec);
  ::stock_exchange::BuySpec* unsafe_arena_release_buy_spec();

  // .stock_exchange.Query query = 5;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::stock_exchange::Query& query() const;
  PROTOBUF_NODISCARD ::stock_exchange::Query* release_query();
  ::stock_exchange::Query* mutable_query();
  void set_allocated_query(::stock_exchange::Query* query);
  private:
  const ::stock_exchange::Query& _internal_query() const;
  ::stock_exchange::Query* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::stock_exchange::Query* query);
  ::stock_exchange::Query* unsafe_arena_release_query();

  // .stock_exchange.Cancel cancel = 6;
  bool has_cancel() const;
  private:
  bool _internal_has_cancel() const;
  public:
  void clear_cancel();
  const ::stock_exchange::Cancel& cancel() const;
  PROTOBUF_NODISCARD ::stock_exchange::Cancel* release_cancel();
  ::stock_exchange::Cancel* mutable_cancel();
  void set_allocated_cancel(::stock_exchange::Cancel* cancel);
  private:
  const ::stock_exchange::Cancel& _internal_cancel() const;
  ::stock_exchange::Cancel* _internal_mutable_cancel();
  public:
  void unsafe_arena_set_allocated_cancel(
      ::stock_exchange::Cancel* cancel);
  ::stock_exchange::Cancel* unsafe_arena_release_cancel();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:stock_exchange.Packet)
 private:
  class _Internal;
  void set_has_buy();
  void set_has_sell();
  void set_has_buy_spec();
  void set_has_query();
  void set_has_cancel();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Header* header_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::BuySell* buy_;
      ::BuySell* sell_;
      ::stock_exchange::BuySpec* buy_spec_;
      ::stock_exchange::Query* query_;
      ::stock_exchange::Cancel* cancel_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stock_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_exchange.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_ResponseType ResponseType;
  static constexpr ResponseType INVALID =
    Response_ResponseType_INVALID;
  static constexpr ResponseType MALFORMED_MESSAGE =
    Response_ResponseType_MALFORMED_MESSAGE;
  static constexpr ResponseType INVALID_TRANSACTION_ID =
    Response_ResponseType_INVALID_TRANSACTION_ID;
  static constexpr ResponseType INVALID_BROKERAGE_ID =
    Response_ResponseType_INVALID_BROKERAGE_ID;
  static constexpr ResponseType INVALID_PRICE =
    Response_ResponseType_INVALID_PRICE;
  static constexpr ResponseType SUCCESS =
    Response_ResponseType_SUCCESS;
  static constexpr ResponseType WITHDRAW_FAILED_NOT_ENOUGH_BALANCE =
    Response_ResponseType_WITHDRAW_FAILED_NOT_ENOUGH_BALANCE;
  static constexpr ResponseType NO_MATCHING_REQUEST =
    Response_ResponseType_NO_MATCHING_REQUEST;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return Response_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBuysFieldNumber = 5,
    kSellsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kBrokerageIdFieldNumber = 3,
    kTransactionIdFieldNumber = 2,
    kResponseFieldNumber = 4,
  };
  // repeated .BuySell buys = 5;
  int buys_size() const;
  private:
  int _internal_buys_size() const;
  public:
  void clear_buys();
  ::BuySell* mutable_buys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >*
      mutable_buys();
  private:
  const ::BuySell& _internal_buys(int index) const;
  ::BuySell* _internal_add_buys();
  public:
  const ::BuySell& buys(int index) const;
  ::BuySell* add_buys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >&
      buys() const;

  // repeated .BuySell sells = 6;
  int sells_size() const;
  private:
  int _internal_sells_size() const;
  public:
  void clear_sells();
  ::BuySell* mutable_sells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >*
      mutable_sells();
  private:
  const ::BuySell& _internal_sells(int index) const;
  ::BuySell* _internal_add_sells();
  public:
  const ::BuySell& sells(int index) const;
  ::BuySell* add_sells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >&
      sells() const;

  // .Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Header& header() const;
  PROTOBUF_NODISCARD ::Header* release_header();
  ::Header* mutable_header();
  void set_allocated_header(::Header* header);
  private:
  const ::Header& _internal_header() const;
  ::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Header* header);
  ::Header* unsafe_arena_release_header();

  // .BrokerageId brokerage_id = 3;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  uint32_t transaction_id() const;
  void set_transaction_id(uint32_t value);
  private:
  uint32_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint32_t value);
  public:

  // .stock_exchange.Response.ResponseType response = 4;
  void clear_response();
  ::stock_exchange::Response_ResponseType response() const;
  void set_response(::stock_exchange::Response_ResponseType value);
  private:
  ::stock_exchange::Response_ResponseType _internal_response() const;
  void _internal_set_response(::stock_exchange::Response_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:stock_exchange.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell > buys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell > sells_;
    ::Header* header_;
    ::BrokerageId* brokerage_id_;
    uint32_t transaction_id_;
    int response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stock_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class BuySpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_exchange.BuySpec) */ {
 public:
  inline BuySpec() : BuySpec(nullptr) {}
  ~BuySpec() override;
  explicit PROTOBUF_CONSTEXPR BuySpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuySpec(const BuySpec& from);
  BuySpec(BuySpec&& from) noexcept
    : BuySpec() {
    *this = ::std::move(from);
  }

  inline BuySpec& operator=(const BuySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuySpec& operator=(BuySpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuySpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuySpec* internal_default_instance() {
    return reinterpret_cast<const BuySpec*>(
               &_BuySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuySpec& a, BuySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(BuySpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuySpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuySpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuySpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuySpec& from) {
    BuySpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuySpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_exchange.BuySpec";
  }
  protected:
  explicit BuySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerageIdFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
  };
  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  uint32_t transaction_id() const;
  void set_transaction_id(uint32_t value);
  private:
  uint32_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_exchange.BuySpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::BrokerageId* brokerage_id_;
    uint32_t transaction_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stock_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Cancel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Cancel) */ {
 public:
  inline Cancel() : Cancel(nullptr) {}
  ~Cancel() override;
  explicit PROTOBUF_CONSTEXPR Cancel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cancel(const Cancel& from);
  Cancel(Cancel&& from) noexcept
    : Cancel() {
    *this = ::std::move(from);
  }

  inline Cancel& operator=(const Cancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cancel& operator=(Cancel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cancel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cancel* internal_default_instance() {
    return reinterpret_cast<const Cancel*>(
               &_Cancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Cancel& a, Cancel& b) {
    a.Swap(&b);
  }
  inline void Swap(Cancel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cancel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cancel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cancel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cancel& from) {
    Cancel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cancel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_exchange.Cancel";
  }
  protected:
  explicit Cancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrokerageIdFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
  };
  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // uint32 transaction_id = 2;
  void clear_transaction_id();
  uint32_t transaction_id() const;
  void set_transaction_id(uint32_t value);
  private:
  uint32_t _internal_transaction_id() const;
  void _internal_set_transaction_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_exchange.Cancel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::BrokerageId* brokerage_id_;
    uint32_t transaction_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stock_5fexchange_2eproto;
};
// -------------------------------------------------------------------

class Query final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stock_exchange.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  ~Query() override;
  explicit PROTOBUF_CONSTEXPR Query(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Query& default_instance() {
    return *internal_default_instance();
  }
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Query& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Query& from) {
    Query::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stock_exchange.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockTickerFieldNumber = 3,
    kBrokerageIdFieldNumber = 1,
    kBrokerageIdLookFieldNumber = 2,
    kBuyOrSellFieldNumber = 4,
    kFiltersFieldNumber = 5,
  };
  // string stock_ticker = 3;
  void clear_stock_ticker();
  const std::string& stock_ticker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stock_ticker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stock_ticker();
  PROTOBUF_NODISCARD std::string* release_stock_ticker();
  void set_allocated_stock_ticker(std::string* stock_ticker);
  private:
  const std::string& _internal_stock_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_ticker(const std::string& value);
  std::string* _internal_mutable_stock_ticker();
  public:

  // .BrokerageId brokerage_id = 1;
  bool has_brokerage_id() const;
  private:
  bool _internal_has_brokerage_id() const;
  public:
  void clear_brokerage_id();
  const ::BrokerageId& brokerage_id() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id();
  ::BrokerageId* mutable_brokerage_id();
  void set_allocated_brokerage_id(::BrokerageId* brokerage_id);
  private:
  const ::BrokerageId& _internal_brokerage_id() const;
  ::BrokerageId* _internal_mutable_brokerage_id();
  public:
  void unsafe_arena_set_allocated_brokerage_id(
      ::BrokerageId* brokerage_id);
  ::BrokerageId* unsafe_arena_release_brokerage_id();

  // .BrokerageId brokerage_id_look = 2;
  bool has_brokerage_id_look() const;
  private:
  bool _internal_has_brokerage_id_look() const;
  public:
  void clear_brokerage_id_look();
  const ::BrokerageId& brokerage_id_look() const;
  PROTOBUF_NODISCARD ::BrokerageId* release_brokerage_id_look();
  ::BrokerageId* mutable_brokerage_id_look();
  void set_allocated_brokerage_id_look(::BrokerageId* brokerage_id_look);
  private:
  const ::BrokerageId& _internal_brokerage_id_look() const;
  ::BrokerageId* _internal_mutable_brokerage_id_look();
  public:
  void unsafe_arena_set_allocated_brokerage_id_look(
      ::BrokerageId* brokerage_id_look);
  ::BrokerageId* unsafe_arena_release_brokerage_id_look();

  // .stock_exchange.BuyOrSell buy_or_sell = 4;
  void clear_buy_or_sell();
  ::stock_exchange::BuyOrSell buy_or_sell() const;
  void set_buy_or_sell(::stock_exchange::BuyOrSell value);
  private:
  ::stock_exchange::BuyOrSell _internal_buy_or_sell() const;
  void _internal_set_buy_or_sell(::stock_exchange::BuyOrSell value);
  public:

  // uint32 filters = 5;
  void clear_filters();
  uint32_t filters() const;
  void set_filters(uint32_t value);
  private:
  uint32_t _internal_filters() const;
  void _internal_set_filters(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stock_exchange.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_ticker_;
    ::BrokerageId* brokerage_id_;
    ::BrokerageId* brokerage_id_look_;
    int buy_or_sell_;
    uint32_t filters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stock_5fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .Header header = 1;
inline bool Packet::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Packet::has_header() const {
  return _internal_has_header();
}
inline const ::Header& Packet::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& Packet::header() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.header)
  return _internal_header();
}
inline void Packet::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.header)
}
inline ::Header* Packet::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* Packet::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* Packet::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* Packet::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.header)
  return _msg;
}
inline void Packet::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Packet.header)
}

// .BuySell buy = 2;
inline bool Packet::_internal_has_buy() const {
  return payload_case() == kBuy;
}
inline bool Packet::has_buy() const {
  return _internal_has_buy();
}
inline void Packet::set_has_buy() {
  _impl_._oneof_case_[0] = kBuy;
}
inline ::BuySell* Packet::release_buy() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.buy)
  if (_internal_has_buy()) {
    clear_has_payload();
    ::BuySell* temp = _impl_.payload_.buy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.buy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuySell& Packet::_internal_buy() const {
  return _internal_has_buy()
      ? *_impl_.payload_.buy_
      : reinterpret_cast< ::BuySell&>(::_BuySell_default_instance_);
}
inline const ::BuySell& Packet::buy() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.buy)
  return _internal_buy();
}
inline ::BuySell* Packet::unsafe_arena_release_buy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stock_exchange.Packet.buy)
  if (_internal_has_buy()) {
    clear_has_payload();
    ::BuySell* temp = _impl_.payload_.buy_;
    _impl_.payload_.buy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_buy(::BuySell* buy) {
  clear_payload();
  if (buy) {
    set_has_buy();
    _impl_.payload_.buy_ = buy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.buy)
}
inline ::BuySell* Packet::_internal_mutable_buy() {
  if (!_internal_has_buy()) {
    clear_payload();
    set_has_buy();
    _impl_.payload_.buy_ = CreateMaybeMessage< ::BuySell >(GetArenaForAllocation());
  }
  return _impl_.payload_.buy_;
}
inline ::BuySell* Packet::mutable_buy() {
  ::BuySell* _msg = _internal_mutable_buy();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.buy)
  return _msg;
}

// .BuySell sell = 3;
inline bool Packet::_internal_has_sell() const {
  return payload_case() == kSell;
}
inline bool Packet::has_sell() const {
  return _internal_has_sell();
}
inline void Packet::set_has_sell() {
  _impl_._oneof_case_[0] = kSell;
}
inline ::BuySell* Packet::release_sell() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.sell)
  if (_internal_has_sell()) {
    clear_has_payload();
    ::BuySell* temp = _impl_.payload_.sell_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.sell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuySell& Packet::_internal_sell() const {
  return _internal_has_sell()
      ? *_impl_.payload_.sell_
      : reinterpret_cast< ::BuySell&>(::_BuySell_default_instance_);
}
inline const ::BuySell& Packet::sell() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.sell)
  return _internal_sell();
}
inline ::BuySell* Packet::unsafe_arena_release_sell() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stock_exchange.Packet.sell)
  if (_internal_has_sell()) {
    clear_has_payload();
    ::BuySell* temp = _impl_.payload_.sell_;
    _impl_.payload_.sell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_sell(::BuySell* sell) {
  clear_payload();
  if (sell) {
    set_has_sell();
    _impl_.payload_.sell_ = sell;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.sell)
}
inline ::BuySell* Packet::_internal_mutable_sell() {
  if (!_internal_has_sell()) {
    clear_payload();
    set_has_sell();
    _impl_.payload_.sell_ = CreateMaybeMessage< ::BuySell >(GetArenaForAllocation());
  }
  return _impl_.payload_.sell_;
}
inline ::BuySell* Packet::mutable_sell() {
  ::BuySell* _msg = _internal_mutable_sell();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.sell)
  return _msg;
}

// .stock_exchange.BuySpec buy_spec = 4;
inline bool Packet::_internal_has_buy_spec() const {
  return payload_case() == kBuySpec;
}
inline bool Packet::has_buy_spec() const {
  return _internal_has_buy_spec();
}
inline void Packet::set_has_buy_spec() {
  _impl_._oneof_case_[0] = kBuySpec;
}
inline void Packet::clear_buy_spec() {
  if (_internal_has_buy_spec()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.buy_spec_;
    }
    clear_has_payload();
  }
}
inline ::stock_exchange::BuySpec* Packet::release_buy_spec() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.buy_spec)
  if (_internal_has_buy_spec()) {
    clear_has_payload();
    ::stock_exchange::BuySpec* temp = _impl_.payload_.buy_spec_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.buy_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stock_exchange::BuySpec& Packet::_internal_buy_spec() const {
  return _internal_has_buy_spec()
      ? *_impl_.payload_.buy_spec_
      : reinterpret_cast< ::stock_exchange::BuySpec&>(::stock_exchange::_BuySpec_default_instance_);
}
inline const ::stock_exchange::BuySpec& Packet::buy_spec() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.buy_spec)
  return _internal_buy_spec();
}
inline ::stock_exchange::BuySpec* Packet::unsafe_arena_release_buy_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stock_exchange.Packet.buy_spec)
  if (_internal_has_buy_spec()) {
    clear_has_payload();
    ::stock_exchange::BuySpec* temp = _impl_.payload_.buy_spec_;
    _impl_.payload_.buy_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_buy_spec(::stock_exchange::BuySpec* buy_spec) {
  clear_payload();
  if (buy_spec) {
    set_has_buy_spec();
    _impl_.payload_.buy_spec_ = buy_spec;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.buy_spec)
}
inline ::stock_exchange::BuySpec* Packet::_internal_mutable_buy_spec() {
  if (!_internal_has_buy_spec()) {
    clear_payload();
    set_has_buy_spec();
    _impl_.payload_.buy_spec_ = CreateMaybeMessage< ::stock_exchange::BuySpec >(GetArenaForAllocation());
  }
  return _impl_.payload_.buy_spec_;
}
inline ::stock_exchange::BuySpec* Packet::mutable_buy_spec() {
  ::stock_exchange::BuySpec* _msg = _internal_mutable_buy_spec();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.buy_spec)
  return _msg;
}

// .stock_exchange.Query query = 5;
inline bool Packet::_internal_has_query() const {
  return payload_case() == kQuery;
}
inline bool Packet::has_query() const {
  return _internal_has_query();
}
inline void Packet::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline void Packet::clear_query() {
  if (_internal_has_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.query_;
    }
    clear_has_payload();
  }
}
inline ::stock_exchange::Query* Packet::release_query() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.query)
  if (_internal_has_query()) {
    clear_has_payload();
    ::stock_exchange::Query* temp = _impl_.payload_.query_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stock_exchange::Query& Packet::_internal_query() const {
  return _internal_has_query()
      ? *_impl_.payload_.query_
      : reinterpret_cast< ::stock_exchange::Query&>(::stock_exchange::_Query_default_instance_);
}
inline const ::stock_exchange::Query& Packet::query() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.query)
  return _internal_query();
}
inline ::stock_exchange::Query* Packet::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stock_exchange.Packet.query)
  if (_internal_has_query()) {
    clear_has_payload();
    ::stock_exchange::Query* temp = _impl_.payload_.query_;
    _impl_.payload_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_query(::stock_exchange::Query* query) {
  clear_payload();
  if (query) {
    set_has_query();
    _impl_.payload_.query_ = query;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.query)
}
inline ::stock_exchange::Query* Packet::_internal_mutable_query() {
  if (!_internal_has_query()) {
    clear_payload();
    set_has_query();
    _impl_.payload_.query_ = CreateMaybeMessage< ::stock_exchange::Query >(GetArenaForAllocation());
  }
  return _impl_.payload_.query_;
}
inline ::stock_exchange::Query* Packet::mutable_query() {
  ::stock_exchange::Query* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.query)
  return _msg;
}

// .stock_exchange.Cancel cancel = 6;
inline bool Packet::_internal_has_cancel() const {
  return payload_case() == kCancel;
}
inline bool Packet::has_cancel() const {
  return _internal_has_cancel();
}
inline void Packet::set_has_cancel() {
  _impl_._oneof_case_[0] = kCancel;
}
inline void Packet::clear_cancel() {
  if (_internal_has_cancel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.cancel_;
    }
    clear_has_payload();
  }
}
inline ::stock_exchange::Cancel* Packet::release_cancel() {
  // @@protoc_insertion_point(field_release:stock_exchange.Packet.cancel)
  if (_internal_has_cancel()) {
    clear_has_payload();
    ::stock_exchange::Cancel* temp = _impl_.payload_.cancel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stock_exchange::Cancel& Packet::_internal_cancel() const {
  return _internal_has_cancel()
      ? *_impl_.payload_.cancel_
      : reinterpret_cast< ::stock_exchange::Cancel&>(::stock_exchange::_Cancel_default_instance_);
}
inline const ::stock_exchange::Cancel& Packet::cancel() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Packet.cancel)
  return _internal_cancel();
}
inline ::stock_exchange::Cancel* Packet::unsafe_arena_release_cancel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stock_exchange.Packet.cancel)
  if (_internal_has_cancel()) {
    clear_has_payload();
    ::stock_exchange::Cancel* temp = _impl_.payload_.cancel_;
    _impl_.payload_.cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_cancel(::stock_exchange::Cancel* cancel) {
  clear_payload();
  if (cancel) {
    set_has_cancel();
    _impl_.payload_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Packet.cancel)
}
inline ::stock_exchange::Cancel* Packet::_internal_mutable_cancel() {
  if (!_internal_has_cancel()) {
    clear_payload();
    set_has_cancel();
    _impl_.payload_.cancel_ = CreateMaybeMessage< ::stock_exchange::Cancel >(GetArenaForAllocation());
  }
  return _impl_.payload_.cancel_;
}
inline ::stock_exchange::Cancel* Packet::mutable_cancel() {
  ::stock_exchange::Cancel* _msg = _internal_mutable_cancel();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Packet.cancel)
  return _msg;
}

inline bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Packet::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .Header header = 1;
inline bool Response::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool Response::has_header() const {
  return _internal_has_header();
}
inline const ::Header& Response::_internal_header() const {
  const ::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& Response::header() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.header)
  return _internal_header();
}
inline void Response::unsafe_arena_set_allocated_header(
    ::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Response.header)
}
inline ::Header* Response::release_header() {
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* Response::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:stock_exchange.Response.header)
  
  ::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::Header* Response::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::Header* Response::mutable_header() {
  ::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.header)
  return _msg;
}
inline void Response::set_allocated_header(::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Response.header)
}

// uint32 transaction_id = 2;
inline void Response::clear_transaction_id() {
  _impl_.transaction_id_ = 0u;
}
inline uint32_t Response::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint32_t Response::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.transaction_id)
  return _internal_transaction_id();
}
inline void Response::_internal_set_transaction_id(uint32_t value) {
  
  _impl_.transaction_id_ = value;
}
inline void Response::set_transaction_id(uint32_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:stock_exchange.Response.transaction_id)
}

// .BrokerageId brokerage_id = 3;
inline bool Response::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Response::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Response::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Response::brokerage_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.brokerage_id)
  return _internal_brokerage_id();
}
inline void Response::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Response.brokerage_id)
}
inline ::BrokerageId* Response::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Response::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Response.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Response::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Response::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.brokerage_id)
  return _msg;
}
inline void Response::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Response.brokerage_id)
}

// .stock_exchange.Response.ResponseType response = 4;
inline void Response::clear_response() {
  _impl_.response_ = 0;
}
inline ::stock_exchange::Response_ResponseType Response::_internal_response() const {
  return static_cast< ::stock_exchange::Response_ResponseType >(_impl_.response_);
}
inline ::stock_exchange::Response_ResponseType Response::response() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.response)
  return _internal_response();
}
inline void Response::_internal_set_response(::stock_exchange::Response_ResponseType value) {
  
  _impl_.response_ = value;
}
inline void Response::set_response(::stock_exchange::Response_ResponseType value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:stock_exchange.Response.response)
}

// repeated .BuySell buys = 5;
inline int Response::_internal_buys_size() const {
  return _impl_.buys_.size();
}
inline int Response::buys_size() const {
  return _internal_buys_size();
}
inline ::BuySell* Response::mutable_buys(int index) {
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.buys)
  return _impl_.buys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >*
Response::mutable_buys() {
  // @@protoc_insertion_point(field_mutable_list:stock_exchange.Response.buys)
  return &_impl_.buys_;
}
inline const ::BuySell& Response::_internal_buys(int index) const {
  return _impl_.buys_.Get(index);
}
inline const ::BuySell& Response::buys(int index) const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.buys)
  return _internal_buys(index);
}
inline ::BuySell* Response::_internal_add_buys() {
  return _impl_.buys_.Add();
}
inline ::BuySell* Response::add_buys() {
  ::BuySell* _add = _internal_add_buys();
  // @@protoc_insertion_point(field_add:stock_exchange.Response.buys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >&
Response::buys() const {
  // @@protoc_insertion_point(field_list:stock_exchange.Response.buys)
  return _impl_.buys_;
}

// repeated .BuySell sells = 6;
inline int Response::_internal_sells_size() const {
  return _impl_.sells_.size();
}
inline int Response::sells_size() const {
  return _internal_sells_size();
}
inline ::BuySell* Response::mutable_sells(int index) {
  // @@protoc_insertion_point(field_mutable:stock_exchange.Response.sells)
  return _impl_.sells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >*
Response::mutable_sells() {
  // @@protoc_insertion_point(field_mutable_list:stock_exchange.Response.sells)
  return &_impl_.sells_;
}
inline const ::BuySell& Response::_internal_sells(int index) const {
  return _impl_.sells_.Get(index);
}
inline const ::BuySell& Response::sells(int index) const {
  // @@protoc_insertion_point(field_get:stock_exchange.Response.sells)
  return _internal_sells(index);
}
inline ::BuySell* Response::_internal_add_sells() {
  return _impl_.sells_.Add();
}
inline ::BuySell* Response::add_sells() {
  ::BuySell* _add = _internal_add_sells();
  // @@protoc_insertion_point(field_add:stock_exchange.Response.sells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BuySell >&
Response::sells() const {
  // @@protoc_insertion_point(field_list:stock_exchange.Response.sells)
  return _impl_.sells_;
}

// -------------------------------------------------------------------

// BuySpec

// .BrokerageId brokerage_id = 1;
inline bool BuySpec::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool BuySpec::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& BuySpec::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& BuySpec::brokerage_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.BuySpec.brokerage_id)
  return _internal_brokerage_id();
}
inline void BuySpec::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.BuySpec.brokerage_id)
}
inline ::BrokerageId* BuySpec::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* BuySpec::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.BuySpec.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* BuySpec::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* BuySpec::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:stock_exchange.BuySpec.brokerage_id)
  return _msg;
}
inline void BuySpec::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.BuySpec.brokerage_id)
}

// uint32 transaction_id = 2;
inline void BuySpec::clear_transaction_id() {
  _impl_.transaction_id_ = 0u;
}
inline uint32_t BuySpec::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint32_t BuySpec::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.BuySpec.transaction_id)
  return _internal_transaction_id();
}
inline void BuySpec::_internal_set_transaction_id(uint32_t value) {
  
  _impl_.transaction_id_ = value;
}
inline void BuySpec::set_transaction_id(uint32_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:stock_exchange.BuySpec.transaction_id)
}

// -------------------------------------------------------------------

// Cancel

// .BrokerageId brokerage_id = 1;
inline bool Cancel::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Cancel::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Cancel::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Cancel::brokerage_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Cancel.brokerage_id)
  return _internal_brokerage_id();
}
inline void Cancel::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Cancel.brokerage_id)
}
inline ::BrokerageId* Cancel::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Cancel::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Cancel.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Cancel::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Cancel::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Cancel.brokerage_id)
  return _msg;
}
inline void Cancel::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Cancel.brokerage_id)
}

// uint32 transaction_id = 2;
inline void Cancel::clear_transaction_id() {
  _impl_.transaction_id_ = 0u;
}
inline uint32_t Cancel::_internal_transaction_id() const {
  return _impl_.transaction_id_;
}
inline uint32_t Cancel::transaction_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Cancel.transaction_id)
  return _internal_transaction_id();
}
inline void Cancel::_internal_set_transaction_id(uint32_t value) {
  
  _impl_.transaction_id_ = value;
}
inline void Cancel::set_transaction_id(uint32_t value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:stock_exchange.Cancel.transaction_id)
}

// -------------------------------------------------------------------

// Query

// .BrokerageId brokerage_id = 1;
inline bool Query::_internal_has_brokerage_id() const {
  return this != internal_default_instance() && _impl_.brokerage_id_ != nullptr;
}
inline bool Query::has_brokerage_id() const {
  return _internal_has_brokerage_id();
}
inline const ::BrokerageId& Query::_internal_brokerage_id() const {
  const ::BrokerageId* p = _impl_.brokerage_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Query::brokerage_id() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.brokerage_id)
  return _internal_brokerage_id();
}
inline void Query::unsafe_arena_set_allocated_brokerage_id(
    ::BrokerageId* brokerage_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  _impl_.brokerage_id_ = brokerage_id;
  if (brokerage_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Query.brokerage_id)
}
inline ::BrokerageId* Query::release_brokerage_id() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Query::unsafe_arena_release_brokerage_id() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.brokerage_id)
  
  ::BrokerageId* temp = _impl_.brokerage_id_;
  _impl_.brokerage_id_ = nullptr;
  return temp;
}
inline ::BrokerageId* Query::_internal_mutable_brokerage_id() {
  
  if (_impl_.brokerage_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_ = p;
  }
  return _impl_.brokerage_id_;
}
inline ::BrokerageId* Query::mutable_brokerage_id() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.brokerage_id)
  return _msg;
}
inline void Query::set_allocated_brokerage_id(::BrokerageId* brokerage_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_);
  }
  if (brokerage_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id));
    if (message_arena != submessage_arena) {
      brokerage_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_ = brokerage_id;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.brokerage_id)
}

// .BrokerageId brokerage_id_look = 2;
inline bool Query::_internal_has_brokerage_id_look() const {
  return this != internal_default_instance() && _impl_.brokerage_id_look_ != nullptr;
}
inline bool Query::has_brokerage_id_look() const {
  return _internal_has_brokerage_id_look();
}
inline const ::BrokerageId& Query::_internal_brokerage_id_look() const {
  const ::BrokerageId* p = _impl_.brokerage_id_look_;
  return p != nullptr ? *p : reinterpret_cast<const ::BrokerageId&>(
      ::_BrokerageId_default_instance_);
}
inline const ::BrokerageId& Query::brokerage_id_look() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.brokerage_id_look)
  return _internal_brokerage_id_look();
}
inline void Query::unsafe_arena_set_allocated_brokerage_id_look(
    ::BrokerageId* brokerage_id_look) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_look_);
  }
  _impl_.brokerage_id_look_ = brokerage_id_look;
  if (brokerage_id_look) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stock_exchange.Query.brokerage_id_look)
}
inline ::BrokerageId* Query::release_brokerage_id_look() {
  
  ::BrokerageId* temp = _impl_.brokerage_id_look_;
  _impl_.brokerage_id_look_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BrokerageId* Query::unsafe_arena_release_brokerage_id_look() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.brokerage_id_look)
  
  ::BrokerageId* temp = _impl_.brokerage_id_look_;
  _impl_.brokerage_id_look_ = nullptr;
  return temp;
}
inline ::BrokerageId* Query::_internal_mutable_brokerage_id_look() {
  
  if (_impl_.brokerage_id_look_ == nullptr) {
    auto* p = CreateMaybeMessage<::BrokerageId>(GetArenaForAllocation());
    _impl_.brokerage_id_look_ = p;
  }
  return _impl_.brokerage_id_look_;
}
inline ::BrokerageId* Query::mutable_brokerage_id_look() {
  ::BrokerageId* _msg = _internal_mutable_brokerage_id_look();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.brokerage_id_look)
  return _msg;
}
inline void Query::set_allocated_brokerage_id_look(::BrokerageId* brokerage_id_look) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.brokerage_id_look_);
  }
  if (brokerage_id_look) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brokerage_id_look));
    if (message_arena != submessage_arena) {
      brokerage_id_look = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brokerage_id_look, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.brokerage_id_look_ = brokerage_id_look;
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.brokerage_id_look)
}

// string stock_ticker = 3;
inline void Query::clear_stock_ticker() {
  _impl_.stock_ticker_.ClearToEmpty();
}
inline const std::string& Query::stock_ticker() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.stock_ticker)
  return _internal_stock_ticker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Query::set_stock_ticker(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stock_ticker_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stock_exchange.Query.stock_ticker)
}
inline std::string* Query::mutable_stock_ticker() {
  std::string* _s = _internal_mutable_stock_ticker();
  // @@protoc_insertion_point(field_mutable:stock_exchange.Query.stock_ticker)
  return _s;
}
inline const std::string& Query::_internal_stock_ticker() const {
  return _impl_.stock_ticker_.Get();
}
inline void Query::_internal_set_stock_ticker(const std::string& value) {
  
  _impl_.stock_ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* Query::_internal_mutable_stock_ticker() {
  
  return _impl_.stock_ticker_.Mutable(GetArenaForAllocation());
}
inline std::string* Query::release_stock_ticker() {
  // @@protoc_insertion_point(field_release:stock_exchange.Query.stock_ticker)
  return _impl_.stock_ticker_.Release();
}
inline void Query::set_allocated_stock_ticker(std::string* stock_ticker) {
  if (stock_ticker != nullptr) {
    
  } else {
    
  }
  _impl_.stock_ticker_.SetAllocated(stock_ticker, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stock_ticker_.IsDefault()) {
    _impl_.stock_ticker_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stock_exchange.Query.stock_ticker)
}

// .stock_exchange.BuyOrSell buy_or_sell = 4;
inline void Query::clear_buy_or_sell() {
  _impl_.buy_or_sell_ = 0;
}
inline ::stock_exchange::BuyOrSell Query::_internal_buy_or_sell() const {
  return static_cast< ::stock_exchange::BuyOrSell >(_impl_.buy_or_sell_);
}
inline ::stock_exchange::BuyOrSell Query::buy_or_sell() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.buy_or_sell)
  return _internal_buy_or_sell();
}
inline void Query::_internal_set_buy_or_sell(::stock_exchange::BuyOrSell value) {
  
  _impl_.buy_or_sell_ = value;
}
inline void Query::set_buy_or_sell(::stock_exchange::BuyOrSell value) {
  _internal_set_buy_or_sell(value);
  // @@protoc_insertion_point(field_set:stock_exchange.Query.buy_or_sell)
}

// uint32 filters = 5;
inline void Query::clear_filters() {
  _impl_.filters_ = 0u;
}
inline uint32_t Query::_internal_filters() const {
  return _impl_.filters_;
}
inline uint32_t Query::filters() const {
  // @@protoc_insertion_point(field_get:stock_exchange.Query.filters)
  return _internal_filters();
}
inline void Query::_internal_set_filters(uint32_t value) {
  
  _impl_.filters_ = value;
}
inline void Query::set_filters(uint32_t value) {
  _internal_set_filters(value);
  // @@protoc_insertion_point(field_set:stock_exchange.Query.filters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stock_exchange

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::stock_exchange::Response_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_exchange::Response_ResponseType>() {
  return ::stock_exchange::Response_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::stock_exchange::BuyOrSell> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stock_exchange::BuyOrSell>() {
  return ::stock_exchange::BuyOrSell_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stock_5fexchange_2eproto
